// Copyright (C) 2017 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only
/*!
    \page qtserialbus-tinycan-overview.html
    \title Using TinyCAN Plugin

    \brief Overview of how to use the TinyCAN plugin.

    The TinyCAN plugin encapsulates the low-level API to work with the
    \l{http://www.mhs-elektronik.de/}{MHS Elektronik} CAN adapters.

    \note The TinyCAN adapters use virtual serial ports. To communicate with
    TinyCAN adapters in Linux, the user must have appropriate access rights.
    Usually these rights are given to all users in the group "dialout".

    \section1 Creating CAN Bus Devices

    At first it is necessary to check that QCanBus provides the desired plugin:

    \code
        if (QCanBus::instance()->plugins().contains(QStringLiteral("tinycan"))) {
            // plugin available
        }
    \endcode

    Where \e tinycan is the plugin name.

    Next, a connection to a specific interface can be established:

    \code
        QCanBusDevice *device = QCanBus::instance()->createDevice(
            QStringLiteral("tinycan"), QStringLiteral("can0.0"));
        device->connectDevice();
    \endcode

    Where \e can0.0 is the active CAN interface name. TinyCAN currently only provides
    the interface \e can0.0, which maps to INDEX_CAN_KANAL_A in the TinyCAN plugin.

    \note The function availableDevices() currently always returns one device
    "can0.0" as there is no way to detect the available CAN adapters for now.

    \note Only the USB adapters are currently supported by this plugin.

    The device is now open for writing and reading CAN frames:

    \code
        QCanBusFrame frame;
        frame.setFrameId(8);
        QByteArray payload("A36E");
        frame.setPayload(payload);
        device->writeFrame(frame);
    \endcode

    The reading can be done using the \l {QCanBusDevice::}{readFrame()} method. The
    \l {QCanBusDevice::}{framesReceived()} signal is emitted when at least one new frame
    is available for reading:

    \code
        QCanBusFrame frame = device->readFrame();
    \endcode

    TinyCAN supports the following configurations that can be controlled through
    \l {QCanBusDevice::}{setConfigurationParameter()}:

    \table
        \header
            \li Configuration parameter key
            \li Description
        \row
            \li QCanBusDevice::BitRateKey
            \li Determines the bit rate of the CAN bus connection. The following bit rates
                are supported: 10000, 20000, 50000, 100000, 125000, 250000, 500000, 800000, 1000000.
   \endtable

    TinyCAN supports the following additional functions:

    \list
        \li QCanBusDevice::resetController()
    \endlist

*/
