// Copyright (C) 2017 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only
/*!
    \page qtserialbus-peakcan-overview.html
    \title Using PeakCAN Plugin

    \brief Overview of how to use the PeakCAN plugin.

    The PeakCAN plugin encapsulates the low-level API to work with the
    \l{http://www.peak-system.com/}{PEAK-System} CAN adapters.

    This plugin requires the PCAN device drivers and the PCAN-Basic library
    version 4.4.0 or higher on Windows (pcanbasic.dll) resp. 4.0.0 on Linux
    (libpcanbasic.so). On macOS the plugin requires the PCBUSB library from
    \l{http://www.mac-can.com}{UV Software}, version is 0.9 or higher.

    \note The Qt versions 5.14 to 6.4 are only compatible to PCBUSB library
        version 0.8.1, but Qt versions 6.5 and higher requires a PCBUSB
        version 0.9 upwards.

    \note QCanBusDeviceInfo::alias() is only supported on Windows and with
        PCAN-Basic 4.4.0 or higher.

    \section1 Creating CAN Bus Devices

    At first it is necessary to check that QCanBus provides the desired plugin:

    \code
        if (QCanBus::instance()->plugins().contains(QStringLiteral("peakcan"))) {
            // plugin available
        }
    \endcode

    Where \e peakcan is the plugin name.

    Next, a connection to a specific interface can be established:

    \code
        QString errorString;
        QCanBusDevice *device = QCanBus::instance()->createDevice(
            QStringLiteral("peakcan"), QStringLiteral("usb0"), &errorString);
        if (!device) {
            // Error handling goes here
            qDebug << errorString;
        } else {
            device->connectDevice();
        }
    \endcode

    Where \e usb0 is the active CAN interface name. The PeakCAN plugin supports
    16 USB interfaces from \e usb0 to \e usb15 and 16 PCI interfaces from
    \e pci0 to \e pci15. The \l {QCanBus::}{availableDevices()} method returns a
    list of currently available devices.

    \note Only the USB and PCI adapters are currently supported by this plugin.

    \note On macOS, only USB adapters are currently supported by this plugin.

    The device is now open for writing and reading CAN frames:

    \code
        QCanBusFrame frame;
        frame.setFrameId(8);
        QByteArray payload("A36E");
        frame.setPayload(payload);
        device->writeFrame(frame);
    \endcode

    The reading can be done using the \l {QCanBusDevice::}{readFrame()} method. The
    \l {QCanBusDevice::}{framesReceived()} signal is emitted when at least one new frame
    is available for reading:

    \code
        QCanBusFrame frame = device->readFrame();
    \endcode

    PeakCAN supports the following configurations that can be controlled through
    \l {QCanBusDevice::}{setConfigurationParameter()}:

    \table
        \header
            \li Configuration parameter key
            \li Description
        \row
            \li QCanBusDevice::CanFdKey
            \li This configuration option determines whether CAN FD frames may be sent or
                received. By default, this option is disabled. CAN FD compatible hardware
                is needed to enable this option.
        \row
            \li QCanBusDevice::BitRateKey
            \li Determines the bit rate of the CAN bus connection. The following bit rates
                are supported: 5000, 10000, 20000, 33000, 47000, 50000, 83000, 95000,
                100000, 125000, 250000, 500000, 800000, 1000000.
                If the QCanBusDevice::CanFdKey option is enabled, the bit rates are limited
                to 125000, 250000, 500000, or 1000000.
                Note that this configuration parameter can only be adjusted while the
                QCanBusDevice is not connected.
        \row
            \li QCanBusDevice::DataBitRateKey
            \li Determines the data bit rate of the CAN FD bus connection. The
                QCanBusDevice::CanFdKey option must be enabled to allow setting this option.
                Possible data bitrates are 2000000, 4000000, 8000000, or 10000000. Note that
                this configuration parameter can only be adjusted while the QCanBusDevice is
                not connected.
   \endtable

   PeakCAN supports the following additional functions:

    \list
        \li QCanBusDevice::resetController()
        \li QCanBusDevice::busStatus()
        \li QCanBusDeviceInfo::alias() (Windows and PCAN-Basic >= 4.4.0 only):
            Returns the PCAN_DEVICE_ID which can be set to a user defined value
            from 0..255 resp. 0..4294967295 (depending on the device) with PCAN-View.
            The default value is 255 resp. 4294967295.

    \endlist

*/
