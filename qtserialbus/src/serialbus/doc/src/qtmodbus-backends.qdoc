/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
    \page qtmodbus-backends.html
    \title Qt Modbus

    \brief Implemented Qt Modbus.

    Modbus is a request/reply protocol that has one Modbus client in its network and may have many
    Modbus servers. Servers can control only their own internal states and clients can read and write
    data in them. Modbus is not restricted by the network type, in theory it can use any
    QIODevice. However, not every plugin supports all classes derived from QIODevice.

    Each Modbus server has four tables in which it can store data.

    \table
        \header
            \li name
            \li data range in one field
            \li permissions for client
        \row
            \li Discrete Inputs
            \li 0-1
            \li Read
        \row
            \li Coils
            \li 0-1
            \li Read/Write
        \row
            \li Input Registers
            \li 0-65535 (0xffff)
            \li Read
        \row
            \li Holding Registers
            \li 0-65535 (0xffff)
            \li Read/Write
    \endtable

    The Modbus API provides some common API to access the Modbus devices:

    \list
        \li QModbusDevice provides an API for common functionality with client and server.
        \li QModbusClient provides an API for direct access to Modbus client.
        \li QModbusServer provides an API for direct access to Modbus server.
        \li QModbusDataUnit represents a data value.
        \li QModbusReply is created by QModbusClient as a handle for write/read operation.
    \endlist
 */
