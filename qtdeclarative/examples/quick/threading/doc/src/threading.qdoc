/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
    \title Qt Quick Examples - Threading
    \example threading
    \brief This is a collection of QML multithreading examples.
    \image qml-threading-example.png
    \ingroup qtquickexamples

    \e Threading is a collection of QML multithreading examples.

    \include examples-run.qdocinc

    \section1 Threaded ListModel

    \e{Threaded ListModel} contains a \l ListView and a \l ListModel.
    The ListModel object is updated asynchronously in another thread, and the
    results propagate back to the main thread. A timer requests updates from the
    worker thread periodically:
    \snippet threading/threadedlistmodel/timedisplay.qml 0

    Inside the worker thread, the ListModel is synchronized once the data is
    finished loading:
    \snippet threading/threadedlistmodel/dataloader.mjs 0

    \section1 WorkerScript

    \e WorkerScript contains an example of using a \l WorkerScript to offload
    expensive calculations into another thread. This keeps the UI from being
    blocked. This example calculates numbers in Pascal's Triangle, and not in a
    very optimal way, so it will often take several seconds to complete the
    calculation. By doing this in a WorkerScript in another thread, the UI is
    not blocked during this time.

    When the UI needs another value, a request is sent to the WorkerScript:
    \snippet threading/workerscript/workerscript.qml 0

    The workerscript then is free to take a really long time to calculate it:
    \snippet threading/workerscript/workerscript.mjs 0

    When it's done, the result returns to the main scene via the WorkerScript
    type:
    \snippet threading/workerscript/workerscript.qml 1
*/
