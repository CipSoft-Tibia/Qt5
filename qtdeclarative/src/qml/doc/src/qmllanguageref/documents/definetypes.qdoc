/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
\page qtqml-documents-definetypes.html
\title Defining Object Types through QML Documents
\brief Description of how a QML document is a reusable type definition

One of the core features of QML is that it enables QML object types to be
easily defined in a lightweight manner through QML documents to suit the needs
of individual QML applications. The standard \l {Qt Quick} module provides
various types like \l Rectangle, \l Text and \l Image for building a QML
application; beyond these, you can easily define your own QML types to be
reused within your application. This ability to create your own types forms the
building blocks of any QML application.


\section1 Defining an Object Type with a QML File

\section2 Naming Custom QML Object Types

To create an object type, a QML document should be placed into a text file
named as \e <TypeName>.qml where \e <TypeName> is the desired name of the type.
The type name has the following requirements:

\list
    \li It must be comprised of alphanumeric characters or underscores.
    \li It must begin with an uppercase letter.
\endlist

This document is then automatically recognized by the engine as a definition of
a QML type. Additionally, a type defined in this manner is automatically made
available to other QML files within the same directory as the engine searches
within the immediate directory when resolving QML type names.

\section2 Custom QML Type Definition

For example, below is a document that declares a \l Rectangle with a child \l
MouseArea. The document has been saved to file named \c SquareButton.qml:

\qml
// SquareButton.qml
import QtQuick 2.0

Rectangle {
    property int side: 100
    width: side; height: side
    color: "red"

    MouseArea {
        anchors.fill: parent
        onClicked: console.log("Button clicked!")
    }
}
\endqml

Since the file is named \c SquareButton.qml, \b {this can now be used as a type
named \c SquareButton by any other QML file within the same directory}. For
example, if there was a \c myapplication.qml file in the same directory, it
could refer to the \c SquareButton type:

\qml
// myapplication.qml
import QtQuick 2.0

SquareButton {}
\endqml

\image documents-definetypes-simple.png

This creates a 100 x 100 red \l Rectangle with an inner \l MouseArea, as
defined in \c SquareButton.qml. When this \c myapplication.qml document is
loaded by the engine, it loads the SquareButton.qml document as a component and
instantiates it to create a \c SquareButton object.

The \c SquareButton type encapsulates the tree of QML objects declared in \c
SquareButton.qml. When the QML engine instantiates a \c SquareButton object
from this type, it is instantiating an object from the \l Rectangle tree
declared in \c SquareButton.qml.

\note the letter case of the file name is significant on some (notably UNIX)
filesystems. It is recommended the file name case matches the case of the
desired QML type name exactly - for example, \c Box.qml and not \c BoX.qml -
regardless of the platform to which the QML type will be deployed.

\section2 Inline Components

Sometimes, it can be inconvenient to create  a new file for a type, for
instance when reusing a small delegate in multiple views. If you don't actually
need to expose the type, but only need to create an instance,
\l{QtQml::Component}{Component} is an option.
But if you want to declare properties with the component types, or if you
want to use it in multiple files, \c Component is not an option. In that case,
you can use \e {inline components}. Inline components declare a new component
inside of a file. The syntax for that is
\code
component <component name> : BaseType {
    // declare properties and bindings here
}
\endcode

Inside the file which declares the inline component, the type can be referenced
simply by its name.

\snippet qml/qml-documents/Images.qml document

In other files, it has to be prefixed with the name of its containing component.

\snippet qml/qml-documents/LabeledImageBox.qml document

\note Inline components don't share their scope with the component they are
declared in. In the following example, when \c A.MyInlineComponent in file
B.qml gets created, a ReferenceError will occur, as \c root does not exist as
an id in B.qml.
It is therefore advisable not to reference objects in an inline component
which are not part of it.

\snippet qml/qml-documents/A.qml document
\snippet qml/qml-documents/B.qml document

\note Inline components cannot be nested.

\section2 Importing Types Defined Outside the Current Directory

If \c SquareButton.qml was not in the same directory as \c myapplication.qml,
the \c SquareButton type would need to be specifically made available through
an \e import statement in \c myapplication.qml. It could be imported from a
relative path on the file system, or as an installed module; see \l {QML
Modules}{module} for more details.


\section1 Accessible Attributes of Custom Types

The \b {root object} definition in a .qml file \b {defines the attributes that
are available for a QML type}. All properties, signals and methods that belong
to this root object - whether they are custom declared, or come from the QML
type of the root object - are externally accessible and can be read and
modified for objects of this type.

For example, the root object type in the \c SquareButton.qml file above is \l
Rectangle. This means any properties defined by the \l Rectangle type can be
modified for a \c SquareButton object. The code below defines three \c
SquareButton objects with customized values for some of the properties of the
root \l Rectangle object of the \c SquareButton type:

\qml
// application.qml
import QtQuick 2.0

Column {
    SquareButton { side: 50 }
    SquareButton { x: 50; color: "blue" }
    SquareButton { radius: 10 }
}
\endqml

\image documents-definetypes-attributes.png

The attributes that are accessible to objects of the custom QML type include
any \l{Defining Property Attributes}{custom properties}, \l{Defining Method
Attributes}{methods} and \l{Defining Signal Attributes}{signals} that have
additionally been defined for an object. For example, suppose the \l Rectangle
in \c SquareButton.qml had been defined as follows, with additional properties,
methods and signals:

\qml
// SquareButton.qml
import QtQuick 2.0

Rectangle {
    id: root

    property bool pressed: mouseArea.pressed

    signal buttonClicked(real xPos, real yPos)

    function randomizeColor() {
        root.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1)
    }

    property int side: 100
    width: side; height: side
    color: "red"

    MouseArea {
        id: mouseArea
        anchors.fill: parent
        onClicked: root.buttonClicked(mouse.x, mouse.y)
    }
}
\endqml

Any \c SquareButton object could make use of the \c pressed property, \c
buttonClicked signal and \c randomizeColor() method that have been added to the
root \l Rectangle:

\qml
// application.qml
import QtQuick 2.0

SquareButton {
    id: squareButton

    onButtonClicked: {
        console.log("Clicked", xPos, yPos)
        randomizeColor()
    }

    Text { text: squareButton.pressed ? "Down" : "Up" }
}
\endqml

Note that any of the \c id values defined in \c SquareButton.qml are not
accessible to \c SquareButton objects, as id values are only accessible from
within the component scope in which a component is declared. The \c
SquareButton object definition above cannot refer to \c mouseArea in order to
refer to the \l MouseArea child, and if it had an \c id of \c root rather than
\c squareButton, this would not conflict with the \c id of the same value for
the root object defined in \c SquareButton.qml as the two would be declared
within separate scopes.


*/
