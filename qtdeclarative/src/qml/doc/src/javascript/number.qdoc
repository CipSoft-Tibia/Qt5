/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \qmltype Number
    \inqmlmodule QtQml
    \brief The Number object provides represents a number value.

    The QML Number object extends the JS Number object with
    locale aware functions.

    \sa {QtQml::Locale}{Locale}
*/

/*!
    \qmlmethod string Number::toLocaleString(locale,format,precision)

    Converts the Number to a string suitable for the specified \a locale
    in the specified \a format, with the specified \a precision.

    Valid formats are:
    \list
    \li 'f'   Decimal floating point, e.g. 248.65
    \li 'e'   Scientific notation using e character, e.g. 2.4865e+2
    \li 'E'   Scientific notation using E character, e.g. 2.4865E+2
    \li 'g'   Use the shorter of e or f
    \li 'G'   Use the shorter of E or f
    \endlist

    If precision is not specified, the precision will be 2.

    If the format is not specified 'f' will be used.

    If \a locale is not specified, the default locale will be used.

    The following example shows a number formatted for the German locale:
    \code
    import QtQuick 2.0

    Text {
        text: "The value is: " +  Number(4742378.423).toLocaleString(Qt.locale("de_DE"))
    }
    \endcode

    You can apply toLocaleString() directly to constants, provided the decimal
    is included in the constant, e.g.
    \code
    123.0.toLocaleString(Qt.locale("de_DE")) // OK
    123..toLocaleString(Qt.locale("de_DE"))  // OK
    123.toLocaleString(Qt.locale("de_DE"))   // fails
    \endcode
*/

/*!
    \qmlmethod string Number::toLocaleCurrencyString(locale,symbol)

    Converts the Number to a currency using the currency and conventions of the specified
    \a locale.  If \a symbol is specified it will be used as the currency
    symbol.

    \sa Locale::currencySymbol()
*/

/*!
    \qmlmethod string Number::fromLocaleString(locale,number)

    Returns a Number by parsing \a number using the conventions of the supplied \a locale.

    If \a locale is not supplied the default locale will be used.

    For example, using the German locale:
    \code
    var german = Qt.locale("de_DE");
    var d;
    d = Number.fromLocaleString(german, "1234,56")   // d == 1234.56
    d = Number.fromLocaleString(german, "1.234,56") // d == 1234.56
    d = Number.fromLocaleString(german, "1234.56")  // throws exception
    d = Number.fromLocaleString(german, "1.234")    // d == 1234.0
    \endcode
*/
