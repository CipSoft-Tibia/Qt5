// Copyright (C) 2017 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only


/*!
\page qtquick-effects-topic.html
\title Important Concepts In Qt Quick - Graphical Effects
\brief Overview of graphical effects concepts

\section1 Graphical Effects and Particles

Visually appealing user-interfaces are more engaging than lacklustre ones.
That said, the designer must bear in mind that visual effects simply provide
a useful way to subtly communicate to the user (for example, which visual
item is active, or how focus is being transferred).  Over-use of visual
effects can actually detract from the user-experience.

For more information about applying post-processing effects, such as blur, drop
shadow, or colorize, to an \l Item, see the \l MultiEffect QML type.

\section1 Visual Transformation

Visual objects can be transformed.  For example, they can be scaled or rotated.
These sort of transformations can provide hints about focus or selection, and
can provide intuitive hints about what events are occurring in an application.

For information about visual transformations to visual objects, see the
page titled \l{qtquick-effects-transformations.html}
{Qt Quick Transformation Types}.

\section1 Shader Effects

Shader effects allow the full, raw power of a graphics processing unit to be
utilized directly via vertex and fragment shaders. Using too many shader effects
can result in increased power usage and sometimes slow performance, but if
used sparingly and carefully, a shader can allow complex and visually appealing
effects to be applied to a visual object (for example, ripples in water).

For information about shader effects, see the \l {ShaderEffect}
reference documentation.

\section1 Particles

A particle system allows explosions, fireworks, smoke, fog and wind effects to
be simulated and displayed to the user.  Qt Quick provides a particle system
which allows these sort of complex, 2D simulations to be performed, including
support for environmental effects like gravity and turbulence.
Particles are most commonly used to add subtle and visually appealing effects
to currently selected items in lists or in activity notifiers, and in games.

For information about particles, see the documentation about the
\l{qtquick-effects-particles.html}{Qt Quick Particle System}.

\section1 Sprites

A sprite is an animated image made up of frames.  Sprites are commonly found
in games.  Qt Quick provides a visual type to display sprites, as well as a
complex, stochastic, frame-transition controller for more complex applications
which use sprites extensively (such as games).

For information about sprite animations, see the page titled
\l{qtquick-effects-sprites.html}{Sprite Animations}.

\section1 Opacity

Visual objects can be opaque or translucent. For example, an application
can make one visual object opaque and other visual objects translucent
to focus the users attention on the opaque one. This is controlled using the
\c{opacity} property of the Item.

For more information about opacity, see the \l {Item} documentation.

*/

