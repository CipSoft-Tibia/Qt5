/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page qtquick-visualcanvas-topic.html
\title Important Concepts In Qt Quick - The Visual Canvas
\brief Overview of visual canvas concepts

The visual canvas provided by the Qt Quick is a two dimensional canvas with
z-ordering.

\section1 Coordinate System

The top-left pixel in the Qt Quick coordinate system is the [0, 0] pixel.
The coordinate system of a child item is relative to its visual parent item.
See the documentation on the
\l{qtquick-visualcanvas-coordinates.html}{Coordinate System} for
in-depth information about the coordinate system utilized by Qt Quick.

\section1 Visual Parent

There are two separate kinds of parenting in a QML application which uses
Qt Quick.  The first kind is the ownership-parent (also known as the QObject
parent) which determines object lifetime semantics.  The second kind is the
visual parent which determines where on the canvas an item is drawn, and also
certain properties (for example, opacity applies to visual children).

In almost all cases, the visual parent is identical to the ownership-parent.
See the documentation about the \l{qtquick-visualcanvas-visualparent.html}
{Visual Parent} for more in-depth information on the topic.

\section1 Scene Graph

Modern computer systems and devices use graphics processing units or GPUs to
render graphics. Qt Quick can leverage this graphics hardware by using graphics
APIs like \l{https://www.khronos.org/opengl/}{OpenGL},
\l{https://www.khronos.org/vulkan/}{Vulkan}, or
\l{https://developer.apple.com/documentation/metal}{Metal}. The default
graphics adaptation for Qt Quick requires OpenGL and it is used to display
applications developed with Qt Quick in QML. In particular, Qt Quick defines a
scene graph which is then rendered. See the documentation about the
\l{qtquick-visualcanvas-scenegraph.html}{Scene Graph} for in-depth information
about the concept of a scene graph and why it is beneficial, and about the
scene graph adaptations provided by Qt Quick.

*/
