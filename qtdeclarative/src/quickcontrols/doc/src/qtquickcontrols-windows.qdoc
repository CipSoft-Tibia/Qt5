// Copyright (C) 2021 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \page qtquickcontrols-windows.html
    \title Windows Style

    The Windows style is a style that looks native on Windows.
    \l {detailed-desc-Windows}{More...}

    \styleimport {QtQuick.Controls.Windows} {Qt 6.0}

    \target detailed-desc-Windows

    The Windows style is a style that looks native on Windows. The controls are drawn run-time using
    native libraries, and is therefore only available for applications running on Windows.

    \note Be aware that the apperance of this style can change from one minor Qt version to the
    next, to better blend in with native applications on the platform.

    \table
        \row
            \li \image qtquickcontrols-windows.png
                \caption The Windows style
    \endtable

    To run an application with the Windows style, see
    \l {Using Styles in Qt Quick Controls}.

    \section2 Current state

    The Windows style is under development, and some controls are not yet supported. Those controls
    are: \l BusyIndicator, \l DelayButton, \l Menu, \l MenuBar, \l PageIndicator, \l RangeSlider,
    \l Switch, \l TabBar and \l Tumbler. Those will fall back to use the \l {Fusion Style}.

    \section2 Customization

    The goal of the Windows style is to for the controls look and feel as similar as possible to the
    native controls on Windows. The style will follow the theme and colors configured globally from
    Windows Settings, and does not come with a separate customization API on top of that.

    \note The Windows style is not suitable for \l {Customizing Qt Quick Controls}{customizing}.
    The main reason is that it sometimes draw both the contents and the background
    onto a single background item, which will not look good together with a custom contentItem.
    It also tends to use padding and inset values that are different from the other styles.
    \include customizing-native-styles.qdocinc
*/
