ecma/Array/15.4.3.1-2.js | var props = ''; for ( p in Array  ) { props += p } props

ecma/Boolean/15.6.3.1-1.js | var str='';for ( p in Boolean ) { str += p } str;

ecma/Expressions/11.4.1.js | var abc; delete(abc)

ecma/FunctionObjects/15.3.3.1-2.js | var str='';for (prop in Function ) str += prop; str;

ecma/ObjectObjects/15.2.3.1-1.js | var str = '';for ( p in Object ) { str += p; }; str

ecma/Statements/12.6.3-11.js | result = ""; for ( p in Number ) { result += String(p) };
ecma/Statements/12.6.3-2.js | Boolean.prototype.foo = 34; for ( j in Boolean ) Boolean[j]

ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4256) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4257) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4258) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4259) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4260) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4261) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4262) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4263) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4264) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4265) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4266) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4267) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4268) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4269) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4270) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4271) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4272) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4273) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4274) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4275) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4276) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4277) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4278) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4279) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4280) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4281) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4282) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4283) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4284) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4285) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4286) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4287) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4288) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4289) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4290) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4291) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4292) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4293) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4295) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-2.js | var s = new String( String.fromCharCode(4301) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-5.js | var s = new String( String.fromCharCode(1024) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.11-5.js | var s = new String( String.fromCharCode(1037) ); s.toLowerCase().charCodeAt(0)
ecma/String/15.5.4.12-1.js | var s = new String( String.fromCharCode(181) ); s.toUpperCase().charCodeAt(0)
ecma/String/15.5.4.12-1.js | var s = new String( String.fromCharCode(329) ); s.toUpperCase().charCodeAt(0)
ecma/String/15.5.4.12-4.js | var s = new String( String.fromCharCode(1104) ); s.toUpperCase().charCodeAt(0)
ecma/String/15.5.4.12-4.js | var s = new String( String.fromCharCode(1117) ); s.toUpperCase().charCodeAt(0)
ecma/String/15.5.4.12-5.js | var s = new String( String.fromCharCode(1415) ); s.toUpperCase().charCodeAt(0)

ecma/TypeConversion/9.3.1-3.js | -"\u20001234\u2001"
ecma/TypeConversion/9.3.1-3.js | - "-0x123456789abcde8"

ecma/extensions/15.1.2.1-1.js | var PROPS = ''; for ( p in eval ) { PROPS += p }; PROPS

ecma/GlobalObject/15.1.2.2-1.js | var PROPS=''; for ( var p in parseInt ) { PROPS += p; }; PROPS
ecma/GlobalObject/15.1.2.3-1.js | var MYPROPS=''; for ( var p in parseFloat ) { MYPROPS += p }; MYPROPS
ecma/GlobalObject/15.1.2.4.js | var MYPROPS=''; for ( var p in escape ) { MYPROPS+= p}; MYPROPS
ecma/GlobalObject/15.1.2.5-1.js | var MYPROPS=''; for ( var p in unescape ) { MYPROPS+= p }; MYPROPS
ecma/GlobalObject/15.1.2.6.js | var MYPROPS=''; for ( var p in isNaN ) { MYPROPS+= p }; MYPROPS
ecma/GlobalObject/15.1.2.7.js | var MYPROPS=''; for ( p in isFinite ) { MYPROPS+= p }; MYPROPS

ecma_3/Array/15.4.5.1-01.js | 15.4.5.1 - array.length coverage

ecma_3/extensions/regress-274152.js | Do not ignore unicode format-control characters: 0
ecma_3/extensions/regress-274152.js | Do not ignore unicode format-control characters: 1
ecma_3/extensions/regress-274152.js | Do not ignore unicode format-control characters: 2
ecma_3/extensions/regress-274152.js | Do not ignore unicode format-control characters: 3
ecma_3/extensions/regress-274152.js | Do not ignore unicode format-control characters: 4
ecma_3/extensions/regress-274152.js | Do not ignore unicode format-control characters: 5
ecma_3/extensions/regress-274152.js | Do not ignore unicode format-control characters: 6
ecma_3/extensions/regress-274152.js | Do not ignore unicode format-control characters: 7
ecma_3/extensions/regress-274152.js | Do not ignore unicode format-control characters: 8
ecma_3/extensions/regress-368516.js | Treat unicode BOM characters as whitespace: 0
ecma_3/extensions/regress-368516.js | Treat unicode BOM characters as whitespace: 1

ecma_3/Date/15.9.4.3.js | 15.9.4.3 - Date.UTC edge-case arguments.: date Infinity
ecma_3/Date/15.9.4.3.js | 15.9.4.3 - Date.UTC edge-case arguments.: hours Infinity
ecma_3/Date/15.9.4.3.js | 15.9.4.3 - Date.UTC edge-case arguments.: minutes Infinity
ecma_3/Date/15.9.4.3.js | 15.9.4.3 - Date.UTC edge-case arguments.: seconds Infinity
ecma_3/Function/regress-131964.js | Section 1 of test - 
ecma_3/Function/regress-313570.js | length of objects whose prototype chain includes a function: immutable
ecma_3/FunExpr/fe-001.js | Both functions were defined.

ecma_3/LexicalConventions/7.9.1.js | Automatic Semicolon insertion in postfix expressions: expr\n++
ecma_3/LexicalConventions/7.9.1.js | Automatic Semicolon insertion in postfix expressions: expr\n--
ecma_3/LexicalConventions/7.9.1.js | Automatic Semicolon insertion in postfix expressions: (x\n)-- y
ecma_3/LexicalConventions/7.9.1.js | Automatic Semicolon insertion in postfix expressions: (x)-- y

ecma_3/Object/8.6.1-01.js | In strict mode, setting a read-only property should generate a warning: Throw if STRICT and WERROR is enabled

ecma_3/Operators/order-01.js | operator evaluation order: 11.8.2 >
ecma_3/Operators/order-01.js | operator evaluation order: 11.8.4 >=

ecma_3/RegExp/15.10.2-1.js | Section 7 of test - \nregexp = /(z)((a+)?(b+)?(c))*/\nstring = 'zaacbbbcac'\nERROR !!! regexp failed to give expected match array:\nExpect: ["zaacbbbcac", "z", "ac", "a", , "c"]\nActual: ["zaacbbbcac", "z", "ac", "a", "bbb", "c"]\n
ecma_3/RegExp/15.10.2-1.js | Section 8 of test - \nregexp = /(a*)*/\nstring = 'b'\nERROR !!! regexp failed to give expected match array:\nExpect: ["", , ]\nActual: ["", ""]\n
ecma_3/RegExp/15.10.2-1.js | Section 12 of test - \nregexp = /(.*?)a(?!(a+)b\2c)\2(.*)/\nstring = 'baaabaac'\nERROR !!! regexp failed to give expected match array:\nExpect: ["baaabaac", "ba", , "abaac"]\nActual: ["baaabaac", "ba", "aa", "abaac"]\n
ecma_3/RegExp/perlstress-001.js | Section 218 of test - \nregexp = /((foo)|(bar))*/\nstring = 'foobar'\nERROR !!! regexp failed to give expected match array:\nExpect: ["foobar", "bar", , "bar"]\nActual: ["foobar", "bar", "foo", "bar"]\n
ecma_3/RegExp/perlstress-001.js | Section 234 of test - \nregexp = /(?:(f)(o)(o)|(b)(a)(r))*/\nstring = 'foobar'\nERROR !!! regexp failed to give expected match array:\nExpect: ["foobar", , , , "b", "a", "r"]\nActual: ["foobar", "f", "o", "o", "b", "a", "r"]\n
ecma_3/RegExp/perlstress-001.js | Section 241 of test - \nregexp = /^(?:b|a(?=(.)))*\1/\nstring = 'abc'\nERROR !!! regexp failed to give expected match array:\nExpect: ["ab", , ]\nActual: ["ab", "b"]\n
ecma_3/RegExp/perlstress-001.js | Section 412 of test - \nregexp = /^(a(b)?)+$/\nstring = 'aba'\nERROR !!! regexp failed to give expected match array:\nExpect: ["aba", "a", , ]\nActual: ["aba", "a", "b"]\n
ecma_3/RegExp/perlstress-001.js | Section 413 of test - \nregexp = /^(aa(bb)?)+$/\nstring = 'aabbaa'\nERROR !!! regexp failed to give expected match array:\nExpect: ["aabbaa", "aa", , ]\nActual: ["aabbaa", "aa", "bb"]\n

ecma_3/RegExp/regress-209919.js | Section 1 of test - \nregexp = /(a|b*)*/\nstring = 'a'\nERROR !!! regexp failed to give expected match array:\nExpect: ["a", "a"]\nActual: ["a", ""]\n
ecma_3/RegExp/regress-209919.js | Section 3 of test - \nregexp = /(b*)*/\nstring = 'a'\nERROR !!! regexp failed to give expected match array:\nExpect: ["", , ]\nActual: ["", ""]\n
ecma_3/RegExp/regress-209919.js | Section 5 of test - \nregexp = /^\-?(\d{1,}|\.{0,})*(\,\d{1,})?$/\nstring = '100.00'\nERROR !!! regexp failed to give expected match array:\nExpect: ["100.00", "00", , ]\nActual: ["100.00", "", , ]\n
ecma_3/RegExp/regress-209919.js | Section 6 of test - \nregexp = /^\-?(\d{1,}|\.{0,})*(\,\d{1,})?$/\nstring = '100,00'\nERROR !!! regexp failed to give expected match array:\nExpect: ["100,00", "100", ",00"]\nActual: ["100,00", "", ",00"]\n
ecma_3/RegExp/regress-209919.js | Section 7 of test - \nregexp = /^\-?(\d{1,}|\.{0,})*(\,\d{1,})?$/\nstring = '1.000,00'\nERROR !!! regexp failed to give expected match array:\nExpect: ["1.000,00", "000", ",00"]\nActual: ["1.000,00", "", ",00"]\n

ecma_3/String/15.5.4.11.js | Section 7
ecma_3/String/15.5.4.11.js | Section 24
ecma_3/String/15.5.4.11.js | Section 26
ecma_3/String/15.5.4.11.js | Section 28
ecma_3/String/15.5.4.11.js | Section 30
ecma_3/String/15.5.4.14.js | 15.5.4.14 - String.prototype.split(/()/)

ecma_3/Unicode/regress-352044-01.js | issues with Unicode escape sequences in JavaScript source code
ecma_3/Unicode/uc-001.js | Unicode format-control character test (Category Cf.)

ecma_2/RegExp/exec-001.js | NO TESTS EXIST
ecma_2/String/replace-001.js | NO TESTS EXIST

[Q_CC_MSVC32]
ecma_3/Expressions/11.7.3-01.js | 11.7.3 - >>> should evaluate operands in order: order | QTBUG-8056
ecma_3/Operators/order-01.js | operator evaluation order: 11.7.3 >>> | QTBUG-8056
ecma_3/Operators/order-01.js | operator evaluation order: 11.13.2 >>>= | QTBUG-8056

[Q_CC_MSVC64]
ecma/Expressions/11.4.7-02.js | -(-2147483648) == 2147483648 | QTBUG-32829
ecma/TypeConversion/9.3.1-3.js | - -"0x80000000" | QTBUG-32829

[Q_CC_MINGW]
ecma/Math/15.8.2.5.js | Math.atan2(Infinity, Infinity)
ecma/Math/15.8.2.5.js | Math.atan2(Infinity, -Infinity)
ecma/Math/15.8.2.5.js | Math.atan2(-Infinity, Infinity)
ecma/Math/15.8.2.5.js | Math.atan2(-Infinity, -Infinity)
ecma/Math/15.8.2.17.js | Math.sqrt(-0)
ecma/Math/15.8.2.17.js | Infinity/Math.sqrt(-0)

[Q_CC_MINGW64]
ecma/Expressions/11.4.7-02.js | -(-2147483648) == 2147483648 | QTBUG-32829
ecma/TypeConversion/9.3.1-3.js | - -"0x80000000" | QTBUG-32829

[Q_OS_SOLARIS]
ecma/Expressions/11.13.2-2.js | VAR1 = -0; VAR2= Infinity; VAR2 /= VAR1
ecma/Expressions/11.13.2-2.js | VAR1 = -0; VAR2= -Infinity; VAR2 /= VAR1
ecma/Expressions/11.13.2-2.js | VAR1 = 1; VAR2= -0; VAR1 /= VAR2
ecma/Expressions/11.13.2-2.js | VAR1 = -1; VAR2= -0; VAR1 /= VAR2
ecma/Expressions/11.5.2.js | Number.POSITIVE_INFINITY / -0
ecma/Expressions/11.5.2.js | Number.NEGATIVE_INFINITY / -0
ecma/Expressions/11.5.2.js | 1 / -0
ecma/Expressions/11.5.2.js | -1 / -0
ecma/Math/15.8.2.10.js | Math.log(-0.0000001)
ecma/Math/15.8.2.10.js | Math.log(-1)
ecma/Math/15.8.2.11.js | Infinity/Math.max(-0,-0)
ecma/Math/15.8.2.12.js | Infinity/Math.min(0,-0)
ecma/Math/15.8.2.12.js | Infinity/Math.min(-0,-0)
ecma/Math/15.8.2.13.js | Math.pow(NaN,0)
ecma/Math/15.8.2.13.js | Math.pow(NaN,-0)
ecma/Math/15.8.2.13.js | Infinity/Math.pow(-Infinity, -1)
ecma/Math/15.8.2.13.js | Math.pow(0, -1)
ecma/Math/15.8.2.13.js | Math.pow(0, -0.5)
ecma/Math/15.8.2.13.js | Math.pow(0, -1000)
ecma/Math/15.8.2.13.js | Infinity/Math.pow(-0, 1)
ecma/Math/15.8.2.13.js | Infinity/Math.pow(-0, 3)
ecma/Math/15.8.2.13.js | Math.pow(-0, -2)
ecma/Math/15.8.2.15.js | Infinity/Math.round(-0)
ecma/Math/15.8.2.15.js | Infinity/Math.round(-0.49)
ecma/Math/15.8.2.15.js | Infinity/Math.round(-0.5)
ecma/Math/15.8.2.17.js | Infinity/Math.sqrt(-0)
ecma/Math/15.8.2.18.js | Infinity/Math.tan(-0)
ecma/Math/15.8.2.2.js | Math.acos(1.00000001)
ecma/Math/15.8.2.2.js | Math.acos(11.00000001)
ecma/Math/15.8.2.3.js | Math.asin(1.000001)
ecma/Math/15.8.2.3.js | Math.asin(-1.000001)
ecma/Math/15.8.2.3.js | Infinity/Math.asin(-0)
ecma/Math/15.8.2.4.js | Infinity/Math.atan(-0)
ecma/Math/15.8.2.5.js | Math.atan2(0, -0)
ecma/Math/15.8.2.5.js | Infinity/Math.atan2(-0, 1)
ecma/Math/15.8.2.5.js | Math.atan2(-0,\t-0)
ecma/Math/15.8.2.5.js | Math.atan2(-0,\t-1)
ecma/Math/15.8.2.6.js | Infinity/Math.ceil('-0')
ecma/Math/15.8.2.6.js | Infinity/Math.ceil(-0)
ecma/Math/15.8.2.6.js | Infinity/Math.ceil(-Number.MIN_VALUE)
ecma/Math/15.8.2.6.js | Infinity/Math.ceil(-0.9)
ecma/Math/15.8.2.9.js | Infinity/Math.floor(-0)
ecma/TypeConversion/9.3.1-3.js | var z = 0; print(1/-z)
ecma/TypeConversion/9.3.1-3.js | 1/-1e-2000
