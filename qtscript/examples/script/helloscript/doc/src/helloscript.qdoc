/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example script/helloscript
    \title Hello Script Example

    The Hello Script example shows the basic use of Qt Script: How to embed
    a script engine into the application, how to evaluate a script, and how
    to process the result of the evaluation. The example also shows how to
    apply internationalization to scripts.

    \snippet script/helloscript/main.cpp 0

    The application will load the script file to evaluate from a resource, so
    we first make sure that the resource is initialized.

    \snippet script/helloscript/main.cpp 1

    We attempt to load a translation, and install translation functions in the
    script engine. How to produce a translation is explained later.

    \snippet script/helloscript/main.cpp 2

    A push button is created and exported to the script environment as a
    global variable, \c button. Scripts will be able to access properties,
    signals and slots of the button as properties of the \c button script
    object; the script object acts as a proxy to the C++ button object.

    \snippet script/helloscript/main.cpp 3

    The contents of the script file are read.

    \snippet script/helloscript/helloscript.js 0

    The script sets the \c text (note that the qTr() function is used to allow
    for translation) and \c styleSheet properties of the button, and calls the
    button's \c show() slot.

    \snippet script/helloscript/main.cpp 4

    The script is evaluated. Note that the file name is passed as the
    (optional) second parameter; this makes it possible for the script engine
    to produce a meaningful backtrace if something goes wrong, and makes the
    qTr() function be able to resolve the translations that are associated
    with this script.

    \snippet script/helloscript/main.cpp 5

    If the result is an Error object (e.g. the script contained a syntax
    error, or tried to call a function that doesn't exist), we obtain
    the line number and string representation of the error and display
    it in a message box.

    \snippet script/helloscript/main.cpp 6

    If the evaluation went well, the application event loop is entered.

    \section1 Translating the Application

    The Qt Script internalization support builds on what Qt already provides
    for C++; see the \l{Hello tr() Example} for an introduction.

    Since we haven't made the translation file \c helloscript_la.qm, the
    source text is shown when we run the application ("Hello world!").

    To generate the translation file, run \c lupdate as follows:

    \code
    lupdate helloscript.js -ts helloscript_la.ts
    \endcode

    You should now have a file \c helloscript_la.ts in the current
    directory. Run \c linguist to edit the translation:

    \code
    linguist helloscript_la.ts
    \endcode

    You should now see the text "helloscript.js" in the top left pane.
    Double-click it, then click on "Hello world!" and enter "Orbis, te
    saluto!" in the \gui Translation pane (the middle right of the
    window). Don't forget the exclamation mark!

    Click the \gui Done checkbox and choose \gui File|Save from the
    menu bar. The TS file will no longer contain

    \snippet code/doc_src_examples_hellotr.qdoc 3

    but instead will have

    \snippet code/doc_src_examples_hellotr.qdoc 4

    To see the application running in Latin, we have to generate a QM
    file from the TS file. Generating a QM file can be achieved
    either from within \e {Qt Linguist} (for a single TS file), or
    by using the command line program \c lrelease which will produce one
    QM file for each of the TS files listed in the project file.
    Generate \c hellotr_la.qm from \c hellotr_la.ts by choosing
    \gui File|Release from \e {Qt Linguist}'s menu bar and pressing
    \gui Save in the file save dialog that pops up. Now run the \c helloscript
    program again. This time the button will be labelled "Orbis, te
    saluto!".
*/
