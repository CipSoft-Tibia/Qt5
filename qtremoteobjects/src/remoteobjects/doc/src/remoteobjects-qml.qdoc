/****************************************************************************
**
** Copyright (C) 2018 Ford Motor Company
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\qmlmodule QtRemoteObjects 5.12
\title Qt Remote Objects QML Types
\ingroup qmlmodules
\brief Provides QML types for remote objects support.

The QML types for \l{Qt Remote Objects} provide the helper pieces needed to build a remote objects network.
They are typically used in conjunction with custom-registered replica types that make up a specific
network.

As an example, consider the following .rep file:
\code
class MyType {
    PROP(QString myProp="Hello World")
};
\endcode

The generated replica can be registered as a QML type:
\code
qmlRegisterType<MyTypeReplica>("custom",1,0,"MyTypeReplica")
\endcode

And then used from QML in conjunction with the base type Node:
\code
import QtQuick 2.0
import QtRemoteObjects 5.12
import custom 1.0

Item {
    MyTypeReplica {
        id: myType
        node: Node { registryUrl: "local:registry" }
    }

    Text { text: myType.myProp }

    MouseArea {
        anchors.fill: parent
        onClicked: myType.pushMyProp("Updated Text")
    }
}
\endcode

Note that by default you cannot directly assign to a replica property, but rather use a \c push function.
This is due to the potential problems that arise from the mix of declarative programming and asynchronous updates.
Specifically, we want to avoid issues like the following:
\badcode
myType.myProp = "Updated Text"
console.log(myType.myProp) // logs "Hello World", as the new text has not yet been round-tripped
\endcode

The QML types in this module can be imported into your application using the following import
statement in your .qml file:
\code
import QtRemoteObjects 5.12
\endcode

\section1 QML Types
*/
