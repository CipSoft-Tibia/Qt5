/****************************************************************************
**
** Copyright (C) 2018 Ford Motor Company
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
\page qtremoteobjects-interaction.html
\brief Describes how a source and replicas interact with one another.
\section1 Remote Object Interaction

The interaction between source and replicas is directional. Property changes
and signal emission happen on the source, and are propagated to all replicas.
If a property is writable, you can call the setter function on a replica, which
is then forwarded to the source. Afterwards, if this call results in a new
property value, that value is first changed at the source and then subsequently
forwarded to all replicas. To the replica, it is then an asynchronous call,
with latency before the change takes effect.

While technically you can emit a signal on a replica, this is discouraged as it
may have unexpected results. It will only trigger slots connected to the
replica itself; not slots connected to the source or other replicas. Like
property setters, slot invocations on a replica are forwarded to the source to
run.

Qt Remote Objects automatically implements the behavior described above. There
is no need to write any replica implementation code. For dynamic replicas,
this is handled automatically at runtime. For \l{repc} generated headers, this
is handled at compile time.
*/
