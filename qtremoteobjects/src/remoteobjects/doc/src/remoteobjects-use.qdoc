/****************************************************************************
**
** Copyright (C) 2018 Ford Motor Company
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
\page qtremoteobjects-use.html
\title Using Qt Remote Objects
\brief Introduction to using Qt Remote Objects.

Consider a sensor; a global positioning system (GPS) receiver for instance. In
QtRO terms, the \l {Source} would be the process that directly interacts with
the GPS hardware and derives your current location. The location would be
exposed as QObject properties, and the periodic updates to the location would
update the properties and emit property changed signals. \l {Replica}s would be
created in other processes and would always know your current location, but
would not need any of the logic to compute the location from the sensor data.
Connecting to the location changed signal on the \l {Replica} would work as
expected, as the signal emitted from the \l {Source} would trigger the signal
emission on every \l {Replica}.

Another example of QtRO usage would be for a service (for example, access to a printer).
The \l {Source} is again the process controlling the printer directly. Here you
would again likely have properties monitoring the ink levels or whether the printer is
currently busy. However, the key feature, being able to print something, needs to be
passed back to the printer. This aligns with the Qt slot mechanism, which QtRO
uses as the way for \l {Replica}s to make calls on the \l {Source}. In effect,
properties and signals go from \l {Source} to \l {Replica}s, while slots go
from (a) \l {Replica} to the \l {Source}. Assuming a print request is accepted,
the printer status would change, which would change the status property. This
would then be reported to all \l {Replica}s.
*/
