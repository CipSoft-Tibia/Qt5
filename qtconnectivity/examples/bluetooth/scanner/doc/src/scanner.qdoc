/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Copyright (C) 2013 Aaron McCarthy <mccarthy.aaron@gmail.com>
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt local connectivty modules.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\example scanner
\title QML Bluetooth Scanner Example
\brief A QML example about locating Bluetooth devices.

This is an example on how to locate Bluetooth devices in QML.

The user has the choice to run three different types of Bluetooth scans. The device retrieves
information about the remote device within Bluetooth range. This implies that the remote
device can be discovered. The picture below demonstrates the potential result of such
a search:

\image devicescan.png

The second and third type of scan dicover the types of services offered by each remote device.
A full service discovery can take quite some time to finish. The local device connects to each
remote device and performs an SDP enquiry. The results of such an enquiry can be seen below.

\image servicescan.png

In general a service discovery is based on the results of a previously run device enquiry. A minimal
service discovery returns the same data set as a full discovery except that the results are retrieved
from local cache information and may not always be complete and accurate. The primary reason to
perform a minimal discovery are time constraints. A full service discovery can take up to two minutes.
Note that not every platform supports a minimal discovery. In such cases the API performs a full discovery.

\include examples-run.qdocinc

\sa {Qt Bluetooth}
*/
