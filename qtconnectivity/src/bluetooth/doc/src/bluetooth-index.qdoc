/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page qtbluetooth-index.html
\title Qt Bluetooth
\brief Qt Bluetooth enables connectivity between Bluetooth enabled devices.
\ingroup technology-apis

The Bluetooth API provides connectivity between Bluetooth enabled devices.

Currently, the API is supported on the following platforms:

\table
\header
    \li API Feature
    \li \l {Qt for Android}{Android}
    \li \l {Qt for iOS}{iOS}
    \li \l {Qt for Linux/X11}{Linux (BlueZ 4.x/5.x)}
    \li \l \macos
    \li \l {Qt for WinRT}{WinRT}
    \li \l {Qt for Windows}{Win32}
\row
    \li Classic Bluetooth
    \li x
    \li
    \li x
    \li x
    \li x
    \li
\row
    \li Bluetooth LE Central
    \li x
    \li x
    \li x
    \li x
    \li x
    \li
\row
    \li Bluetooth LE Peripheral
    \li x
    \li x
    \li x
    \li x
    \li
    \li
\row
    \li Bluetooth LE Advertisement & Scanning
    \li
    \li
    \li
    \li
    \li
    \li
\endtable

Despite there not being a Win32 port yet, the WinRT backend is automatically used
if the win32 target platform supports the required WinRT APIs. Minimal requirement is Windows 10 version 1507
with slightly improved service discovery since Windows 10 version 1607. Therefore Windows 7 and 8.x
targets are excluded.

\section1 Overview

Bluetooth is a short-range (less than 100 meters) wireless technology. It
has a reasonably high data transfer rate of 2.1 Mbit/s, which makes it ideal
for transferring data between devices. Bluetooth connectivity is based on
basic device management, such as scanning for devices, gathering information
about them, and exchanging data between them.

Qt Bluetooth supports Bluetooth Low Energy development for client/central role use cases.
Further details can be found in the
\l {Bluetooth Low Energy Overview}{Bluetooth Low Energy Overview} section.

A new addition since the Qt Bluetooth 5.7 release covers support for Bluetooth Low Energy
applications performing the peripheral/server role. This new API remains in Technology Preview.

\section1 Getting Started

To use the C++ library in your application, add the following configuration
option to your \c .pro file:

\snippet snippets.pro contacts project modification

To use the classes of the module in your application you need the following
import statement in your \c .qml file:

\snippet doc_src_qtbluetooth.qml import

\section1 Related Information

\section2 Building Qt Bluetooth

Despite the fact that the module can be built for all Qt platforms,
the module is not ported to all of them. Not supported platforms such as Windows desktop
employ a fake or dummy backend which is automatically selected when the
platform is not supported. The dummy backend reports appropriate error messages
and values which allow the Qt Bluetooth developer to detect at runtime that the
current platform is not supported. The dummy backend is also selected on Linux if
BlueZ development headers are not found during build time or Qt was built without
Qt D-Bus support.

The usage of the dummy backend is highlighted via an appropriate warning while building and running.

\section2 Guides
\list
    \li \l {Qt Bluetooth Overview}{Classic Bluetooth Overview}
    \li \l {Bluetooth Low Energy Overview}
\endlist

\section2 Reference
\list
    \li \l {Qt Bluetooth QML Types}{QML Types}
    \li \l {Qt Bluetooth C++ Classes}{C++ Classes}
\endlist

\section2 Logging Categories

The \l QtBluetooth module exports the following
\l {Configuring Categories}{logging categories}:

\table
\header
    \li Logging Category
    \li Description
\row
    \li qt.bluetooth
    \li Enables logging of cross platform code path in QtBluetooth
\row
    \li qt.bluetooth.android
    \li Enables logging of the \l {Qt for Android} {Android} implementation
\row
    \li qt.bluetooth.bluez
    \li Enables logging of the BLuez/Linux implementation
\row
    \li qt.bluetooth.ios
    \li Enables logging of the \l {Qt for iOS} {iOS} implementation
\row
    \li qt.bluetooth.osx
    \li Enables logging of the \l {Qt for macOS} {macOS} implementation
\row
    \li qt.bluetooth.qml
     \li Enables logging of the QtBluetooth QML implementation
\row
    \li qt.bluetooth.winrt
    \li Enables logging of the \l {Qt for WinRT} {WinRT} implementation
\endtable

Logging categories can be used to enable additional warning and debug output
for QtBluetooth. More detailed information about logging can be found in \l QLoggingCategory.
A quick way to enable all QtBluetooth logging is to add the following line to the \c main() function:

\code
    QLoggingCategory::setFilterRules(QStringLiteral("qt.bluetooth* = true"));
\endcode

\section2 Examples
\list
    \li QML
    \list
        \li \l {scanner}{QML Bluetooth Scanner}
        \li \l {picturetransfer}{QML Bluetooth Picture Push}
        \li \l {pingpong}{QML Bluetooth PingPong}
        \li \l {chat}{QML Bluetooth Chat}
        \li \l {heartrate-game}{Bluetooth Low Energy Heart Rate Game}
        \li \l {heartrate-server}{Bluetooth Low Energy Heart Rate Server}
        \li \l {lowenergyscanner}{Bluetooth Low Energy Scanner}
    \endlist
    \li C++
    \list
        \li \l {btchat}{Bluetooth Chat}
        \li \l {btscanner}{Bluetooth Scanner}
        \li \l {btfiletransfer}{Bluetooth File Transfer}
    \endlist
\endlist

\section1 Licenses and Attributions

Qt Bluetooth is available under commercial licenses from \l{The Qt Company}.
In addition, it is available under the
\l{GNU Lesser General Public License, version 3}, or
the \l{GNU General Public License, version 2}.
See \l{Qt Licensing} for further details.

On Linux, Qt Bluetooth uses a separate executable, \c sdpscanner,
to integrate with the official Linux bluetooth protocol stack
BlueZ. BlueZ is available under the \l{GNU General Public License,
version 2}.

\generatelist{groupsbymodule attributions-qtbluetooth}
*/
