/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -a leadvertisement1_p.h:leadvertisement1.cpp -c OrgBluezLEAdvertisement1Adaptor -i bluez5_helper_p.h org.bluez.LEAdvertisement1.xml
 *
 * qdbusxml2cpp is Copyright (C) 2022 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "leadvertisement1_p.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class OrgBluezLEAdvertisement1Adaptor
 */

OrgBluezLEAdvertisement1Adaptor::OrgBluezLEAdvertisement1Adaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

OrgBluezLEAdvertisement1Adaptor::~OrgBluezLEAdvertisement1Adaptor()
{
    // destructor
}

bool OrgBluezLEAdvertisement1Adaptor::discoverable() const
{
    // get the value of property Discoverable
    return qvariant_cast< bool >(parent()->property("Discoverable"));
}

void OrgBluezLEAdvertisement1Adaptor::setDiscoverable(bool value)
{
    // set the value of property Discoverable
    parent()->setProperty("Discoverable", QVariant::fromValue(value));
}

QStringList OrgBluezLEAdvertisement1Adaptor::includes() const
{
    // get the value of property Includes
    return qvariant_cast< QStringList >(parent()->property("Includes"));
}

void OrgBluezLEAdvertisement1Adaptor::setIncludes(const QStringList &value)
{
    // set the value of property Includes
    parent()->setProperty("Includes", QVariant::fromValue(value));
}

QString OrgBluezLEAdvertisement1Adaptor::localName() const
{
    // get the value of property LocalName
    return qvariant_cast< QString >(parent()->property("LocalName"));
}

void OrgBluezLEAdvertisement1Adaptor::setLocalName(const QString &value)
{
    // set the value of property LocalName
    parent()->setProperty("LocalName", QVariant::fromValue(value));
}

ManufacturerDataList OrgBluezLEAdvertisement1Adaptor::manufacturerData() const
{
    // get the value of property ManufacturerData
    return qvariant_cast< ManufacturerDataList >(parent()->property("ManufacturerData"));
}

void OrgBluezLEAdvertisement1Adaptor::setManufacturerData(ManufacturerDataList value)
{
    // set the value of property ManufacturerData
    parent()->setProperty("ManufacturerData", QVariant::fromValue(value));
}

uint OrgBluezLEAdvertisement1Adaptor::maxInterval() const
{
    // get the value of property MaxInterval
    return qvariant_cast< uint >(parent()->property("MaxInterval"));
}

void OrgBluezLEAdvertisement1Adaptor::setMaxInterval(uint value)
{
    // set the value of property MaxInterval
    parent()->setProperty("MaxInterval", QVariant::fromValue(value));
}

uint OrgBluezLEAdvertisement1Adaptor::minInterval() const
{
    // get the value of property MinInterval
    return qvariant_cast< uint >(parent()->property("MinInterval"));
}

void OrgBluezLEAdvertisement1Adaptor::setMinInterval(uint value)
{
    // set the value of property MinInterval
    parent()->setProperty("MinInterval", QVariant::fromValue(value));
}

QStringList OrgBluezLEAdvertisement1Adaptor::serviceUUIDs() const
{
    // get the value of property ServiceUUIDs
    return qvariant_cast< QStringList >(parent()->property("ServiceUUIDs"));
}

void OrgBluezLEAdvertisement1Adaptor::setServiceUUIDs(const QStringList &value)
{
    // set the value of property ServiceUUIDs
    parent()->setProperty("ServiceUUIDs", QVariant::fromValue(value));
}

QString OrgBluezLEAdvertisement1Adaptor::type() const
{
    // get the value of property Type
    return qvariant_cast< QString >(parent()->property("Type"));
}

void OrgBluezLEAdvertisement1Adaptor::setType(const QString &value)
{
    // set the value of property Type
    parent()->setProperty("Type", QVariant::fromValue(value));
}

void OrgBluezLEAdvertisement1Adaptor::Release()
{
    // handle method call org.bluez.LEAdvertisement1.Release
    QMetaObject::invokeMethod(parent(), "Release");
}
