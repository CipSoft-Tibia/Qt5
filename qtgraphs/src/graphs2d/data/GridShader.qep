{
    "QEP": {
        "QQEM": "0.43",
        "connections": [
            {
                "fromId": 0,
                "toId": 3
            },
            {
                "fromId": 3,
                "toId": 1
            }
        ],
        "exportDirectory": ".",
        "exportFlags": 2,
        "exportName": "gridshader",
        "nodes": [
            {
                "fragmentCode": [
                    "void main() {",
                    "    @nodes",
                    "    fragColor = fragColor * qt_Opacity;",
                    "}"
                ],
                "name": "Main",
                "nodeId": 0,
                "type": 0,
                "vertexCode": [
                    "void main() {",
                    "    texCoord = qt_MultiTexCoord0;",
                    "    if (origo == 0)",
                    "        fragCoord = vec2(qt_Vertex.x, iResolution.y - qt_Vertex.y);",
                    "    else if (origo == 1)",
                    "        fragCoord = qt_Vertex.xy;",
                    "    else if (origo == 2)",
                    "        fragCoord = vec2(iResolution.x - qt_Vertex.x, qt_Vertex.y);",
                    "    else",
                    "        fragCoord = vec2(iResolution.x - qt_Vertex.x, iResolution.y - qt_Vertex.y);",
                    "    fragCoord += gridMovement;",
                    "    vec2 vertCoord = qt_Vertex.xy;",
                    "    @nodes",
                    "    gl_Position = qt_Matrix * vec4(vertCoord, 0.0, 1.0);",
                    "}"
                ],
                "x": 140,
                "y": 35.400001525878906
            },
            {
                "name": "Output",
                "nodeId": 1,
                "type": 1,
                "x": 140,
                "y": 592.5999755859375
            },
            {
                "description": "This is an empty node for creating custom effects.",
                "fragmentCode": [
                    "float createBars(float coord, float spacing, float strokeWidth) {",
                    "    float sbar = 1.0 / spacing;// * 0.5;",
                    "    float barWidth = strokeWidth / spacing;// * 0.5;",
                    "    float firstPos = -((majorBarWidth / spacing) * 0.5);",
                    "    float p = firstPos + coord * sbar;",
                    "    //float p = (coord - 0.5) * sbar;",
                    "    float bar = abs(2.0 * fract(p) - 1.0);",
                    "    float barSmoothness = smoothing / spacing;",
                    "    bar = smoothstep(1.0 - barWidth - barSmoothness, 1.0 - barWidth + barSmoothness, bar);",
                    "    return bar;",
                    "}",
                    "",
                    "@main",
                    "{",
                    "    // Minor bars",
                    "    float bar1 = 0.0;",
                    "    if (barsVisibility.z > 0)",
                    "        bar1 += createBars(fragCoord.x, gridWidth * horizontalMinorTickScale, minorBarWidth);",
                    "    if (barsVisibility.w > 0)",
                    "        bar1 += createBars(fragCoord.y, gridHeight * verticalMinorTickScale, minorBarWidth) * (1.0 - bar1);",
                    "    // Major bars",
                    "    float bar2 = 0.0;",
                    "    if (barsVisibility.x > 0)",
                    "        bar2 += createBars(fragCoord.x, gridWidth, majorBarWidth);",
                    "    if (barsVisibility.y > 0)",
                    "        bar2 += createBars(fragCoord.y, gridHeight, majorBarWidth) * (1.0 - bar2);",
                    "    // Combine bars, minors below",
                    "    vec3 barColor = vec3(0.0);",
                    "    float majorColorAlpha = bar2 * majorColor.a;",
                    "    float minorColorAlpha = bar1 * minorColor.a;",
                    "    barColor = mix(barColor, minorColor.rgb, minorColorAlpha);",
                    "    barColor = mix(barColor, majorColor.rgb, majorColorAlpha);",
                    "    fragColor = vec4(barColor, min(1.0, minorColorAlpha + majorColorAlpha));",
                    "}"
                ],
                "name": "Grids",
                "nodeId": 3,
                "properties": [
                    {
                        "defaultValue": "0",
                        "maxValue": "3",
                        "minValue": "0",
                        "name": "origo",
                        "type": "int",
                        "value": "0"
                    },
                    {
                        "defaultValue": "1, 1, 1, 1",
                        "maxValue": "1, 1, 1, 1",
                        "minValue": "0, 0, 0, 0",
                        "name": "barsVisibility",
                        "type": "vec4",
                        "value": "1, 1, 1, 1"
                    },
                    {
                        "defaultValue": "50",
                        "maxValue": "100",
                        "minValue": "10",
                        "name": "gridWidth",
                        "type": "float",
                        "value": "50"
                    },
                    {
                        "defaultValue": "50",
                        "maxValue": "100",
                        "minValue": "10",
                        "name": "gridHeight",
                        "type": "float",
                        "value": "50"
                    },
                    {
                        "defaultValue": "0, 0",
                        "maxValue": "500, 500",
                        "minValue": "-500, -500",
                        "name": "gridMovement",
                        "type": "vec2",
                        "value": "0, 0"
                    },
                    {
                        "defaultValue": "0.5, 0.5, 0.5, 1",
                        "name": "minorColor",
                        "type": "color",
                        "value": "0.5, 0.5, 0.5, 1"
                    },
                    {
                        "defaultValue": "1, 1, 1, 1",
                        "name": "majorColor",
                        "type": "color",
                        "value": "1, 1, 1, 1"
                    },
                    {
                        "defaultValue": "1",
                        "maxValue": "5",
                        "minValue": "0",
                        "name": "minorBarWidth",
                        "type": "float",
                        "value": "1"
                    },
                    {
                        "defaultValue": "2",
                        "maxValue": "5",
                        "minValue": "0",
                        "name": "majorBarWidth",
                        "type": "float",
                        "value": "2"
                    },
                    {
                        "defaultValue": "1",
                        "maxValue": "5",
                        "minValue": "0",
                        "name": "smoothing",
                        "type": "float",
                        "value": "1"
                    },
                    {
                        "defaultValue": "0.2",
                        "maxValue": "1",
                        "minValue": "0",
                        "name": "verticalMinorTickScale",
                        "type": "float",
                        "value": "0.2"
                    },
                    {
                        "defaultValue": "0.2",
                        "maxValue": "1",
                        "minValue": "0",
                        "name": "horizontalMinorTickScale",
                        "type": "float",
                        "value": "0.2"
                    }
                ],
                "type": 2,
                "x": 105,
                "y": 129.55999755859375
            }
        ],
        "version": 1
    }
}
