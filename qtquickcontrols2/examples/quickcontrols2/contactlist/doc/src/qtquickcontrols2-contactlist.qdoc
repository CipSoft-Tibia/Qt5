/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
    \example contactlist
    \keyword Qt Quick Controls - Contact List
    \title Qt Quick Controls - Contact List
    \keyword Qt Quick Controls 2 - Contact List
    \ingroup qtquickcontrols2-examples
    \brief A QML app using Qt Quick Controls 2 and a C++ class that implements
    a simple contact list.

    The \e {Contact List Example} shows how to integrate a C++ backend in a way that
    is compatible with Qt Quick Designer.
    For the declarative parts of the UI, .ui.qml files are used that can be edited
    visually in the Qt Quick Designer.

    \image qtquickcontrols2-contactlist.png

    \section1 C++ Backend

    The contact list application allows the user to add, edit, and remove contacts.
    The actual implementation is done in C++ and exposed as a QAbstractListModel.

    The ContactModel C++ class is registered under a namespace and later
    imported and instantiated by \e MainForm.ui.qml. For more information about registering C++
    classes as QML types, see \l {Defining QML Types from C++}.

    \code
    #include <QtQml/qqml.h>
    ...
    qmlRegisterType<ContactModel>("Backend", 1, 0, "ContactModel");
    ...
    \endcode

    \section1 Designer Support

    In the designer subdirectory, we create a plugin that replaces the ContactModel
    in Qt Quick Designer. For this to work we add the following line to \e contactlist.pro.

    \code
    QML_DESIGNER_IMPORT_PATH = $$PWD/designer
    \endcode

    Because Qt Quick Designer cannot instantiate the ContactModel C++ class, we define
    a mockup using a ListModel. This ensures that the ListView using the model shows something
    in Qt Quick Designer.

    \include examples-run.qdocinc
*/
