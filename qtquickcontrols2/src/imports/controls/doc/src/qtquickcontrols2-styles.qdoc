/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page qtquickcontrols2-styles.html
    \title Styling Qt Quick Controls 2

    \section1 Available Styles

    Qt Quick Controls 2 comes with a selection of styles.

    \section2 Default Style

    \image qtquickcontrols2-default-thumbnail.png
    The \l {Default Style} is a simple and light-weight all-round style that offers
    the maximum performance for Qt Quick Controls 2.

    \section2 Fusion Style

    \image qtquickcontrols2-fusion-thumbnail.png
    The \l {Fusion Style} is a platform-agnostic style that offers a desktop-oriented
    look'n'feel for Qt Quick Controls 2.

    \section2 Imagine Style

    \image qtquickcontrols2-imagine-thumbnail.png
    The \l {Imagine Style} is based on image assets. The style comes with a default
    set of images which can easily be changed by providing a directory
    with images using a predefined naming convention.

    \section2 Material Style

    \image qtquickcontrols2-material-thumbnail.png
    The \l {Material Style} offers an appealing design based on the
    \l {https://www.google.com/design/spec/material-design/introduction.html}
    {Google Material Design Guidelines}, but requires more system resources than
    the Default style.

    \section2 Universal Style

    \image qtquickcontrols2-universal-thumbnail.png
    The \l {Universal Style} offers an appealing design based on the
    \l {https://dev.windows.com/design}{Microsoft Universal Design Guidelines},
    but requires more system resources than the Default style.

    \section1 Using Styles in Qt Quick Controls 2

    In order to run an application with a specific style, either configure the
    style using \l QQuickStyle in C++, pass a command line argument, or set an
    environment variable. Alternatively, the preferred style and style-specific
    attributes can be specified in a configuration file.

    The priority of these approaches follows the order they are listed below,
    from highest to lowest. That is, using QQuickStyle to set the style will
    always take priority over using the command line argument, for example.

    \section2 Using QQuickStyle in C++

    \l QQuickStyle provides C++ API for configuring a specific style. The following
    example runs a Qt Quick Controls 2 application with the Material style:

    \code
    QQuickStyle::setStyle("Material");
    \endcode

    See the detailed description of \l QQuickStyle for more details.

    \section2 Command line argument

    Passing a \c -style command line argument is the convenient way to test different
    styles. It takes precedence over the other methods listed below. The following
    example runs a Qt Quick Controls 2 application with the Material style:

    \code
    ./app -style material
    \endcode

    \section2 Environment variable

    Setting the \c QT_QUICK_CONTROLS_STYLE environment variable can be used to set
    a system-wide style preference. It takes precedence over the configuration file
    mentioned below. The following example runs a Qt Quick Controls 2 application with
    the Universal style:

    \code
    QT_QUICK_CONTROLS_STYLE=universal ./app
    \endcode

    See \l {Supported Environment Variables in Qt Quick Controls 2} for the full list
    of supported environment variables.

    \section2 Configuration file

    Qt Quick Controls 2 support a special configuration file, \c :/qtquickcontrols2.conf,
    that is built into an application's resources.

    The configuration file can specify the preferred style (may be overridden by either
    of the methods described earlier) and certain style-specific attributes. The following
    example specifies that the preferred style is the Material style.

    \code
    [Controls]
    Style=Material
    \endcode

    See \l {Qt Quick Controls 2 Configuration File} for more details about the
    configuration file.

    \section1 Related Information
    \list
    \li \l {Default Style}
    \li \l {Fusion Style}
    \li \l {Imagine Style}
    \li \l {Material Style}
    \li \l {Universal Style}
    \li \l {Customizing Qt Quick Controls 2}
    \li \l {Using File Selectors with Qt Quick Controls 2}
    \li \l {Deploying Qt Quick Controls 2 Applications}
    \li \l {Qt Quick Controls 2 Configuration File}
    \li \l {Supported Environment Variables in Qt Quick Controls 2}
    \endlist
*/
