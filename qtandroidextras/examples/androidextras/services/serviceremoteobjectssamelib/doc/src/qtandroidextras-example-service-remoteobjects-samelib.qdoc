/****************************************************************************
**
** Copyright (C) 2020 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtAndroidExtras module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** "Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \target android service with remote object in same lib
    \title Android Service with Qt Remote Objects - Same Lib File
    \ingroup examples-qtandroidextras
    \example services/serviceremoteobjectssamelib
    \brief Demonstrates how to run an Android service in a separate process using
            the same lib file, and how to communicate between the service process
            and the main process using Qt Remote Objects.

    \image androidservices.png

    This example demonstrates how to create and run an Android service in
    a separate process from the main application process, and then exchange data
    between QML/C++ and the Java service using \l{Qt Remote Objects}.

    When clicking the \uicontrol {Send to Service} button, the name entered in the QML
    view, Qt, in this case, is sent to the Android service. Then, the service
    replies back with a message \c {Hello Qt} which is printed in the QML view.

    \include examples-run.qdocinc

    \section1 Create the Service

    To start a service in its own process, you can extend the \c QtService class
    for your service. Extending \c QtService allows the service to load the
    necessary Qt libraries used for Qt, like \l{Qt Remote Objects} libraries.

    Start by creating the Java service class. The following class extends \c QtService
    and acts as your service entry point:

    \quotefromfile services/serviceremoteobjectssamelib/android/src/org/qtproject/example/qtandroidservice/QtAndroidService.java
    \skipto package
    \printuntil /^\}/

    This class can have any logic you want using Java code. However, you don't need
    any logic to communicate with Qt as that will be done using Qt Remote Objects.

    \section1 Manage the AndroidManifest.xml File

    To be able to use the service, it must be declared in the \c AndroidManifest.xml
    file as follows:

    \quotefromfile services/serviceremoteobjectssamelib/android/AndroidManifest.xml
    \skipto <service
    \printuntil </service>

    The important parts of this service declaration are the \c arguments and \c lib_name
    parts. Those will ensure that the service is run by executing the lib file
    of the main activity with the argument \c -service:

    \quotefromfile services/serviceremoteobjectssamelib/android/AndroidManifest.xml
    \skipto <service
    \skipto <!-- Application arguments -->
    \printuntil lib_name

    \section1 Handle the Application Start

    Since the same \c .so lib file is being used for the application and the
    service, you need to handle both scenarios in the \c main() function. No
    arguments are provided to start the main application, and therefore you must
    add the following in the \c main() function:

    \quotefromfile services/serviceremoteobjectssamelib/main.cpp
    \skipto (argc
    \printline (argc

    Then calling the following function starts the service:

    \quotefromfile services/serviceremoteobjectssamelib/main.cpp
    \skipto startService
    \printuntil /^\}/

    \section1 Handle the Service Start

    \l{QAndroidService} is used to create the service process. The main .so lib
    file will be called with an argument to start the service if you add the
    following code:

    \quotefromfile services/serviceremoteobjectssamelib/main.cpp
    \skipto else if
    \printline else if

    \section1 Communication with Qt Remote Objects

    To use \l{Qt Remote Objects}, define a \c .rep file:

    \quotefromfile services/common/qtandroidservice.rep
    \skipto class
    \printuntil /^\}/

    Define the \c .rep source and replica file in your project \c .pro file as follows:

    \quotefromfile services/serviceremoteobjectssamelib/serviceremoteobjectssamelib.pro
    \skipto REPC_SOURCE
    \printuntil REPC_REPLICA

    Then define the class used by Qt Remote Objects, which has a
    \c sendToService() slot and a \c messageFromService() signal:

    \quotefromfile services/common/qtandroidservice_ro.h
    \skipto include
    \printuntil /^\};/

    Include the class in the previous snippet in \c main.cpp:

    \quotefromfile services/serviceremoteobjectssamelib/main.cpp
    \skipto _replica.h
    \printline _replica.h

    Now, inside the service handling part, create the \l{QRemoteObjectHost}
    node:

    \quotefromfile services/serviceremoteobjectssamelib/main.cpp
    \skipto QRemoteObjectHost
    \printuntil enableRemoting

    Then, in the application handling part, create the client node and connect it
    to the source node created in the service and connect it to the QML view:

    \quotefromfile services/serviceremoteobjectssamelib/main.cpp
    \skipto QRemoteObjectNode
    \printuntil sendToService

    Then, add a \l Connections element to watch for the incoming messages from
    the service:

    \quotefromfile services/common/main.qml
    \skipto Connections
    \printuntil /^\ {4}\}/

    And set the \c onClicked for the sending button to:

    \quotefromfile services/common/main.qml
    \skipto onClicked
    \printline onClicked

    \sa {Android Service with Qt Remote Objects}, {Android Services},
        {Qt for Android}, {Qt Android Extras}
*/
