// Copyright (C) 2016 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \example basicshapes-cpp
    \title Qt 3D: Basic Shapes C++ Example
    \examplecategory {Data Visualization & 3D}
    \ingroup qt3d-examples-cpp
    \brief Shows four basic shapes that Qt 3D offers and sets up a mesh for each of them.

    \image basicshapes-cpp-example.jpg

    \e {Basic Shapes} shows four basic shapes that Qt 3D offers: a torus, a cylinder,
    a cube, and a sphere. The example also shows how to embed a Qt 3D scene
    into a widget and connect with other widgets.

    \include examples-run.qdocinc

    \section1 Setting Up a Torus Mesh

    As an example, we go through how to set up a torus mesh. First, we instantiate
    the \c QTorusMesh, and then we set the mesh specific parameters, which for torus are
    radius, minor radius, and the number of rings and slices.

    \snippet basicshapes-cpp/scenemodifier.cpp 0

    The size and position of the torus can be adjusted with transform components.
    We create scale, translation, and rotation components and add them into the
    \c QTransform component.

    \snippet basicshapes-cpp/scenemodifier.cpp 1

    To change the diffuse color of the mesh, we create a \c QPhongMaterial and set
    its diffuse color.

    \snippet basicshapes-cpp/scenemodifier.cpp 2

    The final step is to add the torus into an entity tree, and we do that by creating
    a \c QEntity with a parent entity and adding the previously created mesh, material,
    and transform components into it.

    \snippet basicshapes-cpp/scenemodifier.cpp 3

    We can control the visibility of the entity by defining whether it has a parent
    or not. That is, whether it is part of an entity tree or not.

    \snippet basicshapes-cpp/scenemodifier.cpp 4


*/
