/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt SVG module.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page svgrendering.html
    \title Rendering SVG Files
    \brief Rendering SVG files with the Qt SVG module

    Qt SVG provides classes for rendering SVG files. To include the definitions
    of the module's classes, use the following directive:

    \snippet doc_src_qtsvg.cpp 0

    To link against the module, add this line to your \l qmake \c
    .pro file:

    \snippet doc_src_qtsvg.pro 1

    \section1 Rendering SVG Files

    Scalable Vector Graphics (SVG) is a language for describing two-dimensional
    graphics and graphical applications in XML. SVG 1.1 is a W3C Recommendation
    and forms the core of the current SVG developments in Qt. SVG 1.2 is the
    specification currently being developed by the \l{SVG Working Group}, and it
    is \l{http://www.w3.org/TR/SVG12/}{available in draft form}. The \l{Mobile
    SVG Profiles} (SVG Basic and SVG Tiny) are aimed at resource-limited devices
    and are part of the 3GPP platform for third generation mobile phones. You
    can read more about SVG at \l{About SVG}.

    Qt supports the \l{SVG 1.2 Tiny Static Features}{static features} of
    \l{http://www.w3.org/TR/SVGMobile12}{SVG 1.2 Tiny}. ECMA scripts and DOM manipulation are currently not
    supported.

    SVG drawings can be rendered onto any QPaintDevice subclass. This
    approach gives developers the flexibility to experiment, in order
    to find the best solution for each application.

    The easiest way to render SVG files is to construct a QSvgWidget and
    load an SVG file using one of the QSvgWidget::load() functions.

    QSvgRenderer is the class responsible for rendering SVG files for
    QSvgWidget, and it can be used directly to provide SVG support for
    custom widgets.
    To load an SVG file, construct a QSvgRenderer with a file name or the
    contents of a file, or call QSvgRenderer::load() on an existing
    renderer. If the SVG file has been loaded successfully the
    QSvgRenderer::isValid() will return true.

    Once you have loaded the SVG file successfully, you can render it
    with the QSvgRenderer::render() function. Note that this scheme allows
    you to render SVG files on all paint devices supported by Qt, including
    QWidget, QGLWidget, and QImage. See the \l{SVG Viewer Example}{SVG Viewer}
    example for more details.
*/
