/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page topics-web-content.html
\title Integrating Web Content
\brief Qt enables web content integration.

To create Qt-based web applications, Qt provides interfaces that support a wide
range of standard web techologies such as HTML, CSS, and JavaScript. These
interfaces enable applications to embed content from the World Wide Web.

It is also possible to combine Qt C++ and QML code with HTML and JavaScript to
create web applications. Through \l{Qt WebChannel}, several of Qt's APIs are
accessible to remote clients.

\section1 WebEngine in Qt

Qt provides the Chromium-based \l{Qt WebEngine} module for applications
targeting desktop and embedded platforms. For example, a web browser
application for Linux platform.

It also provides the \l {Qt WebView} module, which uses the native web engine
of the platform. For example, a RSS feed reader Qt Quick application for
Android and iOS.

These pages contain information about porting applications to use
 \l{Qt WebEngine} and the various APIs:
\list
\li \l{Qt WebEngine Overview}
\li \l{Qt WebView}
\li \l{Porting from Qt WebKit to Qt WebEngine}
\endlist

\section1 Qt and HTML-JavaScript Hybrid Applications

The \l{Qt WebChannel} module enables HTML or JavaScript clients to access
Qt APIs such as QObject. It provides both C++ or QML API, allowing Qt apps
to communicate with JavaScript and HTML frontends.

These pages contain more information about the various APIs:
\list
\li \l{Qt WebChannel JavaScript API}{JavaScript API}
\li \l{Qt WebChannel C++ Classes}{C++ API}
\li \l{Qt WebChannel QML Types}{QML API}
\li \l{Qt WebChannel Standalone Example}{Standalone Example}
\endlist

*/
