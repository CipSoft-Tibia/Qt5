// Copyright (C) 2021 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \page qt-intro.html
    \title Introduction to Qt
    \brief Qt 6 features and its benefits.

    Qt 6 lets you develop applications with intuitive user interfaces for
    multiple devices and platforms, faster than ever before.

    \note Qt 6 is highly compatible with \l{Qt 5.15}{Qt 5}. Developers of Qt 5
    applications can move seamlessly to Qt 6 while retaining the applications'
    functionality.

    \section1 Designing User Interfaces

    Qt offers two \l{Solutions for UI Design}{solutions for UI design}:
    \l{Qt Widgets} and \l{Qt Quick}.
    \b{Qt Widgets} tightly integrates with desktop
    look-and-feel. \b{Qt Quick} UIs are dynamic with fluid animations and are
    optimal for touch interfaces. The
    \l{User Interfaces} page compares both Qt Quick and Qt Widgets
    technologies.

    \section1 Cross-Platform

    Qt is cross-platform. Qt modules are available on various
    \l{Supported Platforms} {devices and platforms}.
    Developer tools like \l{Qt Creator Manual}{Qt Creator} and
    \l{Qt Design Studio Manual}{Qt Design Studio} are available for Windows,
    macOS, and Linux.
    Build tools like \l{qmake} and \l{Build with CMake}{CMake} seamlessly
    handle the platform-specific differences in the build process.

    \section1 Features and APIs

    Qt features a large set of \l{All Modules}{modules} in the area of UIs,
    networking, web technologies, communication protocols, file formats, and
    much more.

    \l{Qt Essentials}{Essentials} define the foundation of Qt on all platforms.
    They are available on all the supported development platforms and tested
    target platforms.

    \l{Qt Add-Ons}{Add-ons} bring additional value for specific purposes.

    \section1 Tools

    \l{Qt Creator Manual}{Qt Creator} is a complete IDE for developing Qt
    applications. You can set up projects, code, debug, package, and
    deploy from within Qt Creator.

    \l{Qt Design Studio Manual}{Qt Design Studio} supports designing
    Qt Quick UIs. It enables you to define the look-and-feel of the UI from
    wireframe to final implementation, using preset UI components.

    Many more \l{Qt Tool Manuals}{tools} are available.

    \section1 Programming Languages

    Qt applications are usually written in C++. \l{Qt for Python} allows
    you to write applications in Python.

    Qt Quick UIs are written in \l{The QML Reference}{QML}.

    \section1 Where To Go From Here

    \list
        \li \l{Getting Started with Qt}{Getting Started}
        \li \l{Qt Examples And Tutorials}{Examples and Tutorials}
        \li \l{Supported Platforms}
        \li \l{Qt Licensing}
    \endlist
*/
