/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example customitems
    \title Custom Items Example
    \ingroup qtdatavisualization_examples
    \brief Adding custom items to a surface graph.
    \since QtDataVisualization 1.1

    The custom items example shows how to add your own custom meshes as items to a graph, and how
    to remove them.

    \image customitems-example.png

    \include examples-run.qdocinc

    \section1 Adding Custom Meshes to the Application

    We'll add the meshes in a resource file:

    \code
    <RCC>
    ...
    <qresource prefix="/items">
        <file>refinery.obj</file>
        <file>oilrig.obj</file>
    </qresource>
    </RCC>
    \endcode

    \section1 Adding Custom Item to a Graph

    In this example we do not have specific textures for our meshes, so we'll just create a small
    QImage and fill it with a single color:

    \snippet customitems/customitemgraph.cpp 0

    Then we'll specify the position for the item in a variable. This way we'll be able to use it
    later for removing the correct item:

    \snippet customitems/customitemgraph.cpp 1

    Then we'll create a new QCustom3DItem with all the parameters:

    \snippet customitems/customitemgraph.cpp 2

    And finally we'll just add the item:

    \snippet customitems/customitemgraph.cpp 3

    \section1 Removing Custom Item from a Graph

    We'll just call \c removeCustomItemAt() with the position of the item:

    \snippet customitems/customitemgraph.cpp 4

    \note Removing a custom item from the graph also deletes it. If you want to preserve the item,
    you need to use \c releaseCustomItem() method instead.

    \section1 Example Contents
*/
