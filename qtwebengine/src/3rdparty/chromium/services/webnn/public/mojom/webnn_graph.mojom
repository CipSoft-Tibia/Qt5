// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module webnn.mojom;

import "mojo/public/mojom/base/big_buffer.mojom";

// Represents the `MLOperand` which describes not only input and constant
// operand, but also the output operand of operator.
struct Operand {
  // Represents the `MLOperandType` in the WebIDL definition.
  enum DataType {
    kFloat32,
    kFloat16,
    kInt32,
    kUint32,
    kInt8,
    kUint8,
  };

  enum Kind { kInput, kConstant, kOutput };

  Kind kind;
  // The data type of the operand.
  DataType data_type;
  // The dimensions of the operand.
  array<uint32> dimensions;
  // The name field is only required for input/output operands of graph.
  string? name;
};

// Contains the attributes of clamp operator.
struct ClampAttributes {
  // The minimum value of the range.
  float min_value;
  // The maximum value of the range.
  float max_value;
};

// Represents the `MLInputOperandLayout` that specifies the layout format of
// the input tensor. `kChannelsFirst` means `nchw` (batches, channels, height,
// width), `kChannelsLast` means `nhwc` (batches, height, width, channels).
// The type is used to get the spatial dimension from input tensor, thus safe to
// represent as enum.
enum InputOperandLayout { kChannelsFirst, kChannelsLast };

// A size has height and width values.
struct Size2d {
  uint32 height;
  uint32 width;
};

// The additional rows and columns added to the beginning and ending of each
// spatial dimension of input.
struct Padding2d {
  // The height and width padding at the beginning of input tensor.
  Size2d beginning;
  // The height and width padding at the ending of input tensor.
  Size2d ending;
};

// Contains the attributes of conv2d operator.
// Only `oihw` (output_channels, input_channels/groups, height, width) filter
// layout is supported, other variants are being discussed in the working group
// https://github.com/webmachinelearning/webnn/issues/324.
struct Conv2dAttributes {
  // The padding of input tensor which is the explicit pad or calculated pad
  // with `MLAutoPad` type, input sizes, filter size, strides and dilations in
  // blink side.
  Padding2d padding;
  // The stride of the sliding window for each spatial dimension of input.
  Size2d strides;
  // The dilation factor for each spatial dimension of input.
  Size2d dilations;
  // The number of groups that input channels and output channels are divided
  // into.
  uint32 groups = 1;
  // The layout format of the input.
  InputOperandLayout input_layout;
  // The additional 1-D tensor with the shape of output channels whose values
  // are added to the convolution result.
  uint64? bias_operand_id;
  //The optional activation function that immediately follows the convolution.
  Operator? activation;
};

// Contains the attributes of pool2d operator.
// The `roundingType` and `outputSizes` array in MLPool2dOptions are not
// included because they are used to calculate the output dimensions of poo2d in
// blink side.
struct Pool2dAttributes {
  // The dimensions of the sliding window which is supplied by user or the
  // element of input operand height and width.
  Size2d window_dimensions;
  // The padding of input tensor which is the explicit pad or calculated pad
  // with `MLAutoPad` type, input sizes, window dimensions, strides and
  // dilations in blink side.
  Padding2d padding;
  // The element stride of the sliding window for each spatial dimension of
  // input.
  Size2d strides;
  // The dilation factor for each spatial dimension of input.
  Size2d dilations;
  // The layout format of the input.
  InputOperandLayout layout;
};

// Contains the attributes of gemm operator.
struct GemmAttributes {
  // The optional third tensor in expression alpha * A * B + beta * C.
  uint64? c_operand_id;
  // A float scalar multiplier for the `A * B`.
  float alpha = 1.0;
  // A float scalar multiplier for the third tensor.
  float beta = 1.0;
  // True is to transpose the first tensor before matrix multiplication.
  bool a_transpose = false;
  // True is to transpose the second tensor before matrix multiplication.
  bool b_transpose = false;
};

// Holds one of operator attributes.
union OperatorAttributes {
  ClampAttributes clamp;
  Conv2dAttributes conv2d;
  GemmAttributes gemm;
  Pool2dAttributes pool2d;
};

// Represents the operations defined in `MLGraphBuilder` that describes the
// functional semantics.
struct Operator {
  enum Kind {
    // Keep the order as the same as build methods of `MLGraphBuilder`.
    kClamp,
    kConv2d,
    kAdd,
    kSub,
    kMul,
    kDiv,
    kMax,
    kMin,
    kGemm,
    kAveragePool2d,
    kMaxPool2d,
    kRelu,
    kReshape,
    kSoftmax,
  };

  // The kind of this `Operator`.
  Kind kind;
  // The id array from the `GraphInfo.operands` will be used to map the input
  // operands of `Operator`.
  array<uint64> input_operands;
  // The id array from the `GraphInfo.operands` will be used to map the output
  // operands of `Operator`.
  array<uint64> output_operands;
  // The attributes of `Operator`.
  OperatorAttributes? attributes;
};

// Describes an entire WebNN graph information.
struct GraphInfo {
  // A map of all operands used in this `GraphInfo`, the key is the operand id.
  map<uint64, Operand> id_to_operand_map;
  // The id array from the `GraphInfo.operands` is used to identify the input
  // operands of this graph.
  array<uint64> input_operands;
  // The id array from the `GraphInfo.operands` is used to identify the output
  // operands of this graph.
  array<uint64> output_operands;
  // The operators are sorted in the topological order.
  array<Operator> operators;
  // The constant weight data specified through the MLGraphBuilder.constant()
  // method defined in the WebIDL, the key is the constant operand id.
  map<uint64, mojo_base.mojom.BigBuffer> constant_id_to_buffer_map;
};

enum ComputeResult {
  kOk,
  // The input for inference is invalid.
  kInvalidInputs,
  // Something has gone wrong during execution of the graph.
  kUnknownError,
};

// WebNNGraph runs in the GPU process and is called by the renderer process to
// execute the computational graph. Graph execution is performed by calling
// hardware accelerated OS machine learning APIs.
interface WebNNGraph {
  // Called by the renderer process to carry out the computational workload of
  // the compiled graph. The key of map is the name of input/output to identify
  // the tensor in the graph, the value is the shared memory to reduce memory
  // copy for inference.
  Compute(map<string, mojo_base.mojom.BigBuffer>  named_inputs)
      => (ComputeResult result,
          map<string, mojo_base.mojom.BigBuffer>? named_outputs);
};
