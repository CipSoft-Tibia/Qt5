{%- import "webui_js_bridge_macros.tmpl" as macros -%}
// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "{{module.path}}-webui-js-bridge-impl.h"

#include "{{webui_controller_header}}"
#include "base/memory/ptr_util.h"

namespace {{module.namespace}} {

{%- set class_name = "%sImpl" % webui_js_bridge.name %}

// static
void {{class_name}}::Create(
    {{- macros.constructor_params(webui_js_bridge) | indent(4) -}},
    content::WebUIController* controller,
    ::mojo::PendingReceiver<{{webui_js_bridge.name}}> receiver) {
  auto* controller_subclass = controller->GetAs<WebUIControllerSubclass>();
  CHECK(controller_subclass);

  auto js_bridge_impl = base::WrapUnique(new {{class_name}}(
      controller_subclass,
      std::move(receiver),
{%- for method in webui_js_bridge.methods %}
      {{method|binder_variable_name}}{{-"," if not loop.last else ""}}
{%- endfor %}));
  SaveWebUIManagedInterfaceInDocument(controller, std::move(js_bridge_impl));
}

{{class_name}}::{{class_name}}(
    WebUIControllerSubclass* controller,
    ::mojo::PendingReceiver<{{webui_js_bridge.name}}> receiver,
    {{- macros.constructor_params(webui_js_bridge) | indent(4) -}})
    : controller_(raw_ref<WebUIControllerSubclass>::from_ptr(controller)),
      receiver_(this, std::move(receiver)),
{%- for method in webui_js_bridge.methods %}
      {{method|binder_variable_name}}_({{method|binder_variable_name}})
      {{-"," if not loop.last else ""}}
{%- endfor %} {
}

{{class_name}}::~{{class_name}}() = default;

{% for method in webui_js_bridge.methods %}
void {{class_name}}::{{method.name}}(
{%-  for param in method.parameters %}
    {{param.kind|cpp_type}} {{param.name}}{{"," if not loop.last else ""}}
{%-   endfor -%}) {
  {{method|binder_variable_name}}_(
    &*controller_,
{%-  for param in method.parameters %}
    std::move({{param.name}}){{"," if not loop.last else ""}}
{%-   endfor -%}
  );
}
{% endfor %}

{%- set binder_initializer_name = "%sBinderInitializer" % webui_js_bridge.name %}
{{binder_initializer_name}}::{{binder_initializer_name}}() = default;

{{binder_initializer_name}}::~{{binder_initializer_name}}() = default;

{{binder_initializer_name}}::WebUIJsBridgeBinder
{{binder_initializer_name}}::GetWebUIJsBridgeBinder() {
  return base::BindRepeating(
      &{{class_name}}::Create,
{%- for method in webui_js_bridge.methods %}
      {{method|binder_variable_name}}_{{ "," if not loop.last else "" }}
{%- endfor %});
}

}  // {{module.namespace}}
