// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module location.nearby.connections.mojom;

import "chrome/services/sharing/public/mojom/nearby_connections_types.mojom";
import "chrome/services/sharing/public/mojom/webrtc_signaling_messenger.mojom";
import "chrome/services/sharing/public/mojom/webrtc.mojom";
import "device/bluetooth/public/mojom/adapter.mojom";
import "mojo/public/mojom/base/file.mojom";
import "services/network/public/mojom/p2p.mojom";
import "services/network/public/mojom/mdns_responder.mojom";

// Collection of dependencies required by WebRTC medium.
struct WebRtcDependencies {
  // Used to allocate p2p sockets via Chromium's network service.
  pending_remote<network.mojom.P2PSocketManager> socket_manager;
  // Used to implement mDNS responder interface in WebRTC via MdnsResponder
  // service in Chromium.
  pending_remote<network.mojom.MdnsResponder> mdns_responder;
  // Used to fetch STUN and TURN servers for establishing WebRTC connection.
  pending_remote<sharing.mojom.IceConfigFetcher> ice_config_fetcher;
  // Used to send and receive SDP messages for establishing WebRTC connection.
  pending_remote<sharing.mojom.WebRtcSignalingMessenger> messenger;
};

// Listener invoked during endpoint discovery. This interface is used by the
// browser process to listen for remote endpoints status during endpoint
// discovery.
interface EndpointDiscoveryListener {
  // Called when a remote endpoint is discovered.
  //
  // endpoint_id - The ID of the remote endpoint that was discovered.
  // info        - Further information about the remote endpoint which may
  //               include the human readable name if it is advertising in high
  //               visibility mode.
  OnEndpointFound(string endpoint_id, DiscoveredEndpointInfo info);

  // Called when a remote endpoint is no longer discoverable; only called for
  // endpoints that previously had been passed to OnEndpointFound().
  //
  // endpoint_id - The ID of the remote endpoint that was lost.
  OnEndpointLost(string endpoint_id);
};

// Listener for lifecycle events associated with a connection to a remote
// endpoint. Methods in this interface are called from utiltiiy process, and is
// used by the browser process to listen for connection status associated with
// remote endpoints.
interface ConnectionLifecycleListener {
  // A basic encrypted channel has been created between this device and the
  // the remote endpoint. Both sides are now asked if they wish to accept or
  // reject the connection before any data can be sent over this channel.
  //
  // Optionally, caller can verify if this device is connected to the correct
  // remote before accepting the connection. Typically this involves showing
  // ConnectionInfo::authentication_token on both devices and having the users
  // manually compare and confirm. Both devices are given an identical
  // authentication token.
  //
  // Call NearbyConnections::AcceptConnection() to accept the connection, or
  // NearbyConnections::RejectConnection() to close the connection.
  //
  // endpoint_id - The identifier for the remote endpoint.
  // info        -  Other relevant information about the connection.
  OnConnectionInitiated(string endpoint_id, ConnectionInfo info);

  // Called after both sides have accepted the connection.
  //
  // endpoint_id - The identifier for the remote endpoint.
  OnConnectionAccepted(string endpoint_id);

  // Called when either side rejected the connection.
  // Call NearbyConnections::DisconnectFromEndpoint() to terminate connection.
  //
  // endpoint_id - The identifier for the remote endpoint.
  // status      - The result of the connection. Valid values are
  //               Status::kSuccess and Status::kConnectionRejected}.
  OnConnectionRejected(string endpoint_id, Status status);

  // Called when a remote endpoint is disconnected or has become unreachable.
  // At this point service (re-)discovery may start again.
  //
  // endpoint_id - The identifier for the remote endpoint.
  OnDisconnected(string endpoint_id);

  // Called when the connection's available bandwidth has changed.
  //
  // endpoint_id - The identifier for the remote endpoint.
  // quality     - The new quality for the connection.
  OnBandwidthChanged(string endpoint_id, Medium medium);
};

// Listener for payload status. Methods in this interface are called from
// utiltiiy process, and is used by the browser process to listen for payload
// status associated with remote endpoints.
interface PayloadListener {
  // Called when a Payload is received from a remote endpoint. Depending on the
  // type of the Payload, all of the data may or may not have been received at
  // the time of this call. Use OnPayloadTransferUpdate() to get updates on the
  // status of the data received.
  //
  // endpoint_id - The identifier for the remote endpoint that sent the
  //               payload.
  // payload     - The Payload object received.
  OnPayloadReceived(string endpoint_id, Payload payload);

  // Called with progress information about an active Payload transfer, either
  // incoming or outgoing.
  //
  // endpoint_id - The identifier for the remote endpoint that is sending or
  //               receiving this payload.
  // update      - The PayloadTransferUpdate structure describing the status of
  //               the transfer.
  OnPayloadTransferUpdate(string endpoint_id, PayloadTransferUpdate update);
};

// Main interface to control the NearbyConnections library. Implemented in a
// sandboxed process. This interface is used by the browser process to connect
// to remote devices and send / receive raw data packets. Parsing of those
// packets is not part of the NearbyConnections library and is done in a
// separate interface.
interface NearbyConnections {
  // Starts advertising an endpoint with the specified service ID. Only one
  // advertisement can be active at a time and calling StartAdvertising() while
  // advertising will fail and return Status::kAlreadyAdvertising.
  //
  // endpoint_info - The local info to be broadcasted. May contain a human
  //                 readable name to appear on other devices if broadcasting
  //                 in high visibility mode.
  // service_id    - An identifier to advertise your app to other endpoints.
  //                 This can be an arbitrary string, so long as it uniquely
  //                 identifies your service. A good default is to use your
  //                 app's package name.
  // options       - The options for advertising.
  // listener      - An interface notified when remote endpoints request a
  //                 connection to this endpoint.
  // Possible return values include:
  //   Status::kSuccess if advertising started successfully.
  //   Status::kAlreadyAdvertising if the app is already advertising.
  //   Status::kOutOfOrderApiCall if the app is currently connected to remote
  //       endpoints; call StopAllEndpoints first.
  StartAdvertising(array<uint8> endpoint_info, string service_id,
                   AdvertisingOptions options,
                   pending_remote<ConnectionLifecycleListener> listener)
      => (Status status);

  // Stops advertising the local endpoint. Should be called after calling
  // StartAdvertising, as soon as the application no longer needs to advertise
  // itself or goes inactive. Payloads can still be sent to connected
  // endpoints after advertising ends.
  //
  // Possible return values include:
  //   Status::kSuccess returned after advertising got stopped.
  StopAdvertising() => (Status status);

  // Starts discovery for remote endpoints with the specified service ID.
  //
  // service_id - The ID for the service to be discovered, as specified in
  //              the corresponding call to StartAdvertising.
  // options    - The options for discovery.
  // listener   - An interface notified when a remote endpoint is discovered.
  // Possible status codes include:
  //   Status::kSuccess if discovery started successfully.
  //   Status::kAlreadyDiscovering if the app is already
  //       discovering the specified service.
  //   Status::kOutOfOrderApiCall if the app is currently
  //       connected to remote endpoints; call StopAllEndpoints first.
  StartDiscovery(string service_id, DiscoveryOptions options,
                 pending_remote<EndpointDiscoveryListener> listener)
      => (Status status);

  // Stops discovery for remote endpoints, after a previous call to
  // StartDiscovery, when the client no longer needs to discover endpoints or
  // goes inactive. Payloads can still be sent to connected endpoints after
  // discovery ends.
  //
  // Possible return values include:
  //   Status::kSuccess returned after discovery got stopped.
  StopDiscovery() => (Status status);

  // Sends a request to connect to a remote endpoint.
  //
  // endpoint_info - The local info including a human readable name to appear on
  //                 the remote endpoint.
  // endpoint_id   - The identifier for the remote endpoint to which a
  //                 connection request will be sent. Should match the value
  //                 provided in a call to
  //                 EndpointDiscoveryListener::OnEndpointFound().
  // options       - The options for connection.
  // listener      - An interface notified when the remote endpoint sends a
  //                 response to the connection request.
  // Possible return values include:
  //   Status::kSuccess if the connection request was sent.
  //   Status::kAlreadyConnectedToEndpoint if the app already
  //       has a connection to the specified endpoint.
  //   Status::kBluetoothError if we failed to connect because of an
  //       issue with Bluetooth.
  //   Status::kWifiLanError if we failed to connect because of an
  //       issue with WiFi.
  //   Status::kError if we failed to connect for any other reason.
  RequestConnection(array<uint8> endpoint_info, string endpoint_id,
                   ConnectionOptions options,
                   pending_remote<ConnectionLifecycleListener> listener)
      => (Status status);

  // Accepts a connection to a remote endpoint. This method must be called
  // before Payloads can be exchanged with the remote endpoint.
  //
  // endpoint_id - The identifier for the remote endpoint. Should match the
  //               value provided in a call to
  //               ConnectionsLifecycleListener::OnConnectionInitiated().
  // listener    - An interface for payloads exchanged with the remote endpoint.
  // Possible return values include:
  //   Status::kSuccess if the connection request was accepted.
  //   Status::kAlreadyConnectedToEndpoint if the app already as a connection
  //       to the specified endpoint.
  //   Status::kOutOfOrderApiCall if
  //       ConnectionsLifecycleListener::OnConnectionInitiated() has not been
  //       called for the |endpoint_id|.
  AcceptConnection(string endpoint_id, pending_remote<PayloadListener> listener)
      => (Status status);

  // Rejects a connection to a remote endpoint.
  //
  // endpoint_id - The identifier for the remote endpoint. Should match the
  //               value provided in a call to
  //               ConnectionsLifecycleListener::OnConnectionInitiated().
  // Possible return values include:
  //   Status::kSuccess if the connection request was rejected.
  //   Status::kAlreadyConnectedToEndpoint if the app already has a connection
  //       to the specified endpoint.
  //   Status::kOutOfOrderApiCall if
  //       ConnectionsLifecycleListener::OnConnectionInitiated() has not been
  //       called for the |endpoint_id|.
  RejectConnection(string endpoint_id) => (Status status);

  // Disconnects from a remote endpoint. Payloads can no longer be sent
  // to or received from the endpoint after this method is called.
  //
  // endpoint_id - The identifier for the remote endpoint to disconnect from.
  // Possible return values include:
  //   Status::kSuccess disconnected successfully.
  DisconnectFromEndpoint(string endpoint_id) => (Status status);

  // Sends a Payload to a list of remote endpoints. Payloads can only be sent to
  // remote endpoints once a notice of connection acceptance has been delivered
  // via ConnectionsLifecycleListener::OnConnectionResult().
  //
  // endpoint_ids - Array of remote endpoint identifiers for to which the
  //                payload should be sent.
  // payload      - The Payload to be sent.
  // Possible return values include:
  //   Status::kOutOfOrderApiCall if the device has not first performed
  //       advertisement or discovery (to set the Strategy).
  //   Status::kEndpointUnknown if there's no active (or pending) connection to
  //       the remote endpoint.
  //   Status::kSuccess if none of the above errors occurred. Note that this
  //       indicates that Nearby Connections will attempt to send the Payload,
  //       but not that the send has successfully completed yet. Errors might
  //       still occur during transmission (and at different times for different
  //       endpoints), and will be delivered via
  //       PayloadListener::OnPayloadTransferUpdate().
  SendPayload(array<string> endpoint_ids, Payload payload) => (Status status);

  // Cancels a Payload currently in-flight to or from remote endpoint(s).
  //
  // payload_id - The identifier for the Payload to be cancelled.
  // Possible return values include:
  //   Status::kSuccess if the payload got cancelled.
  CancelPayload(int64 payload_id) => (Status status);

   // Disconnects from, and removes all traces of, all connected and/or
   // discovered endpoints. As a side effect of this call, both
   // StopAdvertising and StopDiscovery are invoked. After calling
   // StopAllEndpoints, no further operations with remote endpoints will
   // be possible until a new call to one of StartAdvertising or
   // StartDiscovery.
   // Possible return values include:
   //   Status::kSuccess disconnected from all endpoints successfully.
  StopAllEndpoints() => (Status status);

  // Sends a request to initiate connection bandwidth upgrade.
  //
  // endpoint_id - The identifier for the remote endpoint which will be
  //               switching to a higher connection data rate and possibly
  //               different wireless protocol. On success, calls
  //               ConnectionLifecycleListener::OnBandwidthChanged.
  // Possible return values include:
  //   Status::kSuccess if upgraded successfully.
  InitiateBandwidthUpgrade(string endpoint_id) => (Status status);

  // Register a pair of input and output file for handling incoming file
  // payload associated with |payload_id_|, which is determined by feature
  // specific design. The |input_file| should be opened for read access, and
  // |output_file| should be opened for write access.
  // Possible return values include:
  //   Status::kSuccess if file is registered successfully.
  //   Status::kError if file is not opened correctly.
  RegisterPayloadFile(int64 payload_id, mojo_base.mojom.File input_file,
                      mojo_base.mojom.File output_file)
      => (Status status);
};

// Provide all the dependencies that NearbyConnections library requires.
struct NearbyConnectionsDependencies {
  pending_remote<bluetooth.mojom.Adapter>? bluetooth_adapter;

  WebRtcDependencies webrtc_dependencies;
};
