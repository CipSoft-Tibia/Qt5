// Copyright 2021 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module ash.shortcut_customization.mojom;

import "ash/public/mojom/accelerator_info.mojom";

// Observer interface, to be implemented by the Shortcut Customization SWA to
// receive updated accelerators.
interface AcceleratorsUpdatedObserver {
  // Called whenever there is an observable change with accelerators. This
  // includes any modifications to accelerators, change of accelerator-related
  // prefs (i.e. TreatTopRowAsFKey), or keyboard device connected/disconnected.
  // `config` encapsulates the entire accelerator mapping that has been updated
  // It is formatted as:
  // AcceleratorSource -> map<AcceleratorActionId, Array<AcceleratorInfo>>.
  // Where AcceleratorActionId represents the unique ID of a shortcut.
  OnAcceleratorsUpdated(
      map<ash.mojom.AcceleratorSource,
      map<uint32, array<ash.mojom.AcceleratorInfo>>> config);
};

// Provides methods to allow the Shortcut Customization SWA to call on the
// shortcut provider implementor. Interface is implemented by C++ accelerator
// source configurators, e.g. BrowserAcceleratorConfiguration,
// AcceleratorController, EventRewriterConfiguration. Remote is to be used by
// the Shortcut Customization webui app (JS).
interface AcceleratorConfigurationProvider {
  // Whether the source is mutable and shortcuts can be changed.
  IsMutable(ash.mojom.AcceleratorSource source) => (bool is_mutable);

  // Get the accelerator mappings for all sources. This is formatted as
  // AcceleratorSource -> map<AcceleratorActionId, Array<AcceleratorInfo>>.
  // Note that an accelerator action can have multiple accelerators associated
  // with it.
  GetAccelerators() =>
      (map<ash.mojom.AcceleratorSource,
       map<uint32, array<ash.mojom.AcceleratorInfo>>> config);

  // Registers an observer that will be notified whenever there is an update
  // to either the accelerator mapping or on keyboard device connected event.
  AddObserver(pending_remote<AcceleratorsUpdatedObserver> observer);

  // Get a list of all shortcuts with their corresponding category,
  // sub-category, styling, description, source and action. The order of the
  // layoutInfos are tied to its accelerator order representation in the app.
  // The app uses this to generate the layout structure.
  GetAcceleratorLayoutInfos()
      => (array<ash.mojom.AcceleratorLayoutInfo> layout_infos);
};
