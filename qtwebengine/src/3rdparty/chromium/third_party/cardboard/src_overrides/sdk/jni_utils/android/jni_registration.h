// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file was initially autogenerated by
//     third_party/jni_zero/jni_registration_generator.py
// However, Step 1 was replaced with the Step 1 from the generated:
// src/sdk/qrcode/android/java/com/google/cardboard/sdk/QrCodeCaptureActivity.java
// (Which this command does not generate).

#ifndef THIRD_PARTY_CARDBOARD_SRC_OVERRIDES_SDK_JNI_UTILS_ANDROID_JNI_REGISTRATION_H_
#define THIRD_PARTY_CARDBOARD_SRC_OVERRIDES_SDK_JNI_UTILS_ANDROID_JNI_REGISTRATION_H_

#include <jni.h>

#include <iterator>

#include "base/android/jni_generator/jni_generator_helper.h"
#include "base/android/jni_int_wrapper.h"

// Step 1: Forward declarations (classes).

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_com_google_cardboard_sdk_QrCodeCaptureActivity[];
const char kClassPath_com_google_cardboard_sdk_QrCodeCaptureActivity[] =
    "com/google/cardboard/sdk/QrCodeCaptureActivity";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_com_google_cardboard_sdk_QrCodeCaptureActivity_clazz(nullptr);
#ifndef com_google_cardboard_sdk_QrCodeCaptureActivity_clazz_defined
#define com_google_cardboard_sdk_QrCodeCaptureActivity_clazz_defined
inline jclass com_google_cardboard_sdk_QrCodeCaptureActivity_clazz(
    JNIEnv* env) {
  return base::android::LazyGetClass(
      env, kClassPath_com_google_cardboard_sdk_QrCodeCaptureActivity,
      &g_com_google_cardboard_sdk_QrCodeCaptureActivity_clazz);
}
#endif

// Step 2: Forward declarations (methods).

JNI_GENERATOR_EXPORT void
Java_com_google_cardboard_sdk_QrCodeCaptureActivity_nativeIncrementDeviceParamsChangedCount(
    JNIEnv* env,
    jobject jcaller);

// Step 3: Method declarations.

static const JNINativeMethod
    kMethods_com_google_cardboard_sdk_QrCodeCaptureActivity[] = {
        {"nativeIncrementDeviceParamsChangedCount", "()V",
         reinterpret_cast<void*>(
             Java_com_google_cardboard_sdk_QrCodeCaptureActivity_nativeIncrementDeviceParamsChangedCount)},
};

JNI_REGISTRATION_EXPORT bool
RegisterNative_com_google_cardboard_sdk_QrCodeCaptureActivity(JNIEnv* env) {
  const int kMethods_com_google_cardboard_sdk_QrCodeCaptureActivitySize =
      std::size(kMethods_com_google_cardboard_sdk_QrCodeCaptureActivity);
  if (env->RegisterNatives(
          com_google_cardboard_sdk_QrCodeCaptureActivity_clazz(env),
          kMethods_com_google_cardboard_sdk_QrCodeCaptureActivity,
          kMethods_com_google_cardboard_sdk_QrCodeCaptureActivitySize) < 0) {
    jni_generator::HandleRegistrationError(
        env, com_google_cardboard_sdk_QrCodeCaptureActivity_clazz(env),
        __FILE__);
    return false;
  }

  return true;
}

// Step 4: Registration function.

namespace cardboard {

bool RegisterNatives(JNIEnv* env) {
  if (!RegisterNative_com_google_cardboard_sdk_QrCodeCaptureActivity(env)) {
    return false;
  }

  return true;
}

}  // namespace cardboard

#endif  // THIRD_PARTY_CARDBOARD_SRC_OVERRIDES_SDK_JNI_UTILS_ANDROID_JNI_REGISTRATION_H_
