/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
var _a;
import { __decorate } from "tslib";
import '../../focus/focus-ring.js';
import '../../ripple/ripple.js';
import { html, isServer, LitElement, nothing } from 'lit';
import { property, query, queryAssignedElements } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { html as staticHtml, literal } from 'lit/static-html.js';
import { requestUpdateOnAriaChange } from '../../internal/aria/delegate.js';
import { dispatchActivationClick, isActivationClick, redispatchEvent } from '../../internal/controller/events.js';
/**
 * A button component.
 */
export class Button extends LitElement {
    /** @nocollapse */
    static get formAssociated() {
        return true;
    }
    constructor() {
        super();
        /**
         * Whether or not the button is disabled.
         */
        this.disabled = false;
        /**
         * Whether to render the icon at the inline end of the label rather than the
         * inline start.
         *
         * _Note:_ Link buttons cannot have trailing icons.
         */
        this.trailingIcon = false;
        /**
         * Whether to display the icon or not.
         */
        this.hasIcon = false;
        /**
         * Whether `preventDefault()` should be called on the underlying button.
         * Useful for preventing certain native functionalities like preventing form
         * submissions.
         */
        this.preventClickDefault = false;
        /**
         * Specifies the type of button, used for controlling forms. When type
         * is `submit`, the containing form is submitted; when it is `reset` the
         * form is reset.
         */
        this.type = '';
        this.internals = this /* needed for closure */.attachInternals();
        // flag to avoid processing redispatched event.
        this.isRedispatchingEvent = false;
        this.handleActivationClick = (event) => {
            if (!isActivationClick((event)) || !this.buttonElement) {
                return;
            }
            this.focus();
            dispatchActivationClick(this.buttonElement);
        };
        if (!isServer) {
            this.addEventListener('click', this.handleActivationClick);
        }
    }
    focus() {
        this.buttonElement?.focus();
    }
    blur() {
        this.buttonElement?.blur();
    }
    render() {
        // Link buttons may not be disabled
        const isDisabled = this.disabled && !this.href;
        const button = this.href ? literal `a` : literal `button`;
        // Needed for closure conformance
        const { ariaLabel, ariaHasPopup, ariaExpanded } = this;
        return staticHtml `
      <${button}
        class="md3-button ${classMap(this.getRenderClasses())}"
        ?disabled=${isDisabled}
        aria-label="${ariaLabel || nothing}"
        aria-haspopup="${ariaHasPopup || nothing}"
        aria-expanded="${ariaExpanded || nothing}"
        href=${this.href || nothing}
        target=${this.target || nothing}
        @click="${this.handleClick}"
      >
        ${this.renderFocusRing()}
        ${this.renderElevation()}
        ${this.renderRipple()}
        ${this.renderOutline()}
        ${this.renderTouchTarget()}
        ${this.renderLeadingIcon()}
        ${this.renderLabel()}
        ${this.renderTrailingIcon()}
      </${button}>`;
    }
    getRenderClasses() {
        return {
            'md3-button--icon-leading': !this.trailingIcon && this.hasIcon,
            'md3-button--icon-trailing': this.trailingIcon && this.hasIcon,
        };
    }
    renderElevation() {
        return nothing;
    }
    renderOutline() {
        return nothing;
    }
    renderTouchTarget() {
        return html `
      <span class="md3-button__touch"></span>
    `;
    }
    renderRipple() {
        return html `<md-ripple class="md3-button__ripple" ?disabled="${this.disabled}"></md-ripple>`;
    }
    renderFocusRing() {
        return html `<md-focus-ring></md-focus-ring>`;
    }
    renderLabel() {
        return html `<span class="md3-button__label"><slot></slot></span>`;
    }
    renderLeadingIcon() {
        return this.trailingIcon ? nothing : this.renderIcon();
    }
    renderTrailingIcon() {
        return this.trailingIcon ? this.renderIcon() : nothing;
    }
    renderIcon() {
        return html `<slot name="icon" @slotchange="${this.handleSlotChange}"></slot>`;
    }
    handleClick(e) {
        if (this.isRedispatchingEvent) {
            return;
        }
        if (this.preventClickDefault) {
            e.preventDefault();
        }
        // based on type, trigger form action.
        const { type, internals: { form } } = this;
        if (!form) {
            return;
        }
        const isSubmit = type === 'submit', isReset = type === 'reset';
        if (!(isSubmit || isReset)) {
            return;
        }
        e.stopPropagation();
        this.isRedispatchingEvent = true;
        const prevented = !redispatchEvent(this, e);
        this.isRedispatchingEvent = false;
        if (prevented) {
            return;
        }
        if (isSubmit) {
            form.requestSubmit();
        }
        else if (isReset) {
            form.reset();
        }
    }
    handleSlotChange() {
        this.hasIcon = this.assignedIcons.length > 0;
    }
}
_a = Button;
(() => {
    requestUpdateOnAriaChange(_a);
})();
/** @nocollapse */
Button.shadowRootOptions = { mode: 'open', delegatesFocus: true };
__decorate([
    property({ type: Boolean, reflect: true })
], Button.prototype, "disabled", void 0);
__decorate([
    property()
], Button.prototype, "href", void 0);
__decorate([
    property()
], Button.prototype, "target", void 0);
__decorate([
    property({ type: Boolean, attribute: 'trailingicon' })
], Button.prototype, "trailingIcon", void 0);
__decorate([
    property({ type: Boolean })
], Button.prototype, "hasIcon", void 0);
__decorate([
    property({ type: Boolean })
], Button.prototype, "preventClickDefault", void 0);
__decorate([
    property()
], Button.prototype, "type", void 0);
__decorate([
    query('.md3-button')
], Button.prototype, "buttonElement", void 0);
__decorate([
    queryAssignedElements({ slot: 'icon', flatten: true })
], Button.prototype, "assignedIcons", void 0);
//# sourceMappingURL=button.js.map