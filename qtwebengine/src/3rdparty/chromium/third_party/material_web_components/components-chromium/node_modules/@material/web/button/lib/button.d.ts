/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import '../../focus/focus-ring.js';
import '../../ripple/ripple.js';
import { LitElement, nothing, TemplateResult } from 'lit';
/**
 * A button component.
 */
export declare abstract class Button extends LitElement {
    /** @nocollapse */
    static get formAssociated(): boolean;
    /** @nocollapse */
    static shadowRootOptions: ShadowRootInit;
    /**
     * Whether or not the button is disabled.
     */
    disabled: boolean;
    /**
     * The URL that the link button points to.
     */
    href?: string;
    /**
     * Where to display the linked `href` URL for a link button. Common options
     * include `_blank` to open in a new tab.
     */
    target?: string;
    /**
     * Whether to render the icon at the inline end of the label rather than the
     * inline start.
     *
     * _Note:_ Link buttons cannot have trailing icons.
     */
    trailingIcon: boolean;
    /**
     * Whether to display the icon or not.
     */
    hasIcon: boolean;
    /**
     * Whether `preventDefault()` should be called on the underlying button.
     * Useful for preventing certain native functionalities like preventing form
     * submissions.
     */
    preventClickDefault: boolean;
    /**
     * Specifies the type of button, used for controlling forms. When type
     * is `submit`, the containing form is submitted; when it is `reset` the
     * form is reset.
     */
    type: '' | 'submit' | 'reset';
    private readonly buttonElement;
    private readonly assignedIcons;
    private readonly internals;
    private isRedispatchingEvent;
    constructor();
    focus(): void;
    blur(): void;
    protected render(): TemplateResult<2 | 1>;
    protected getRenderClasses(): {
        'md3-button--icon-leading': boolean;
        'md3-button--icon-trailing': boolean;
    };
    protected renderElevation(): TemplateResult | typeof nothing;
    protected renderOutline(): TemplateResult | typeof nothing;
    private renderTouchTarget;
    private readonly handleActivationClick;
    private renderRipple;
    private renderFocusRing;
    private renderLabel;
    private renderLeadingIcon;
    private renderTrailingIcon;
    private renderIcon;
    private handleClick;
    private handleSlotChange;
}
