/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { __decorate } from "tslib";
import '../../elevation/elevation.js';
import { html, nothing, svg } from 'lit';
import { property, query } from 'lit/decorators.js';
import { MultiActionChip } from './multi-action-chip.js';
import { renderRemoveButton } from './trailing-icons.js';
/**
 * A filter chip component.
 */
export class FilterChip extends MultiActionChip {
    get primaryId() {
        return 'option';
    }
    constructor() {
        super();
        this.elevated = false;
        this.removable = false;
        this.selected = false;
        // Remove the `row` role from the container, since filter chips do not use a
        // `grid` navigation model.
        this.containerRole = undefined;
        this.addEventListener('click', () => {
            if (this.disabled) {
                return;
            }
            this.selected = !this.selected;
        });
    }
    updated(changed) {
        if (changed.has('selected') && changed.get('selected') !== undefined) {
            // Dispatch when `selected` changes, except for the first update.
            this.dispatchEvent(new Event('selected', { bubbles: true }));
        }
    }
    getContainerClasses() {
        return {
            ...super.getContainerClasses(),
            elevated: this.elevated,
            selected: this.selected,
        };
    }
    renderActionCell(content) {
        // Filter chips use a `listbox`/`option` model, and do not need `gridcell`
        // wrappers around their actions.
        return content;
    }
    renderAction() {
        const { ariaLabel } = this;
        return html `
      <button class="primary action"
        id="option"
        aria-label=${ariaLabel || nothing}
        aria-selected=${this.selected}
        ?disabled=${this.disabled || nothing}
        role="option"
      >${this.renderContent()}</button>
    `;
    }
    renderLeadingIcon() {
        if (!this.selected) {
            return super.renderLeadingIcon();
        }
        return svg `
      <svg class="checkmark" viewBox="0 0 18 18" aria-hidden="true">
        <path d="M6.75012 12.1274L3.62262 8.99988L2.55762 10.0574L6.75012 14.2499L15.7501 5.24988L14.6926 4.19238L6.75012 12.1274Z" />
      </svg>
    `;
    }
    renderTrailingAction() {
        if (this.removable) {
            return renderRemoveButton({ ariaLabel: this.ariaLabelRemove, disabled: this.disabled });
        }
        return nothing;
    }
    renderOutline() {
        if (this.elevated) {
            return html `<md-elevation></md-elevation>`;
        }
        return super.renderOutline();
    }
}
__decorate([
    property({ type: Boolean })
], FilterChip.prototype, "elevated", void 0);
__decorate([
    property({ type: Boolean })
], FilterChip.prototype, "removable", void 0);
__decorate([
    property({ type: Boolean })
], FilterChip.prototype, "selected", void 0);
__decorate([
    query('.primary.action')
], FilterChip.prototype, "primaryAction", void 0);
__decorate([
    query('.trailing.action')
], FilterChip.prototype, "trailingAction", void 0);
//# sourceMappingURL=filter-chip.js.map