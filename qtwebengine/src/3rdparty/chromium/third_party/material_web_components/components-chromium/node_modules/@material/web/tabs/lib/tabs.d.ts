/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { LitElement, PropertyValues } from 'lit';
import { Tab, Variant } from './tab.js';
/**
 * @fires change Fired when the selected tab changes. The target's selected or
 * selectedItem and previousSelected or previousSelectedItem provide information
 * about the selection change. The change event is fired when a user interaction
 * like a space/enter key or click cause a selection change. The tab selection
 * based on these actions can be cancelled by calling preventDefault on the
 * triggering `keydown` or `click` event.
 *
 * @example
 * // perform an action if a tab is clicked
 * tabs.addEventListener('change', (event: Event) => {
 *   if (event.target.selected === 2)
 *      takeAction();
 *   }
 * });
 *
 * // prevent a click from triggering tab selection under some condition
 * tabs.addEventListener('click', (event: Event) => {
 *   if (notReady)
 *      event.preventDefault();
 *   }
 * });
 *
 */
export declare class Tabs extends LitElement {
    /** @nocollapse */
    static readonly shadowRootOptions: {
        delegatesFocus: boolean;
        mode: ShadowRootMode;
        slotAssignment?: SlotAssignmentMode;
    };
    /**
     * Styling variant to display, 'primary' or 'secondary' and can also
     * include `vertical`.
     * Defaults to `primary`.
     */
    variant: Variant;
    /**
     * Whether or not the item is `disabled`.
     */
    disabled: boolean;
    /**
     * Index of the selected item.
     */
    selected: number;
    /**
     * Whether or not to select an item when focused.
     */
    selectOnFocus: boolean;
    private previousSelected;
    private orientation;
    private readonly scrollMargin;
    private readonly items;
    private itemsDirty;
    private readonly selectedAttribute;
    /**
     * The item currently selected.
     */
    get selectedItem(): Tab;
    /**
     * The item previously selected.
     */
    get previousSelectedItem(): Tab;
    /**
     * The item currently focused.
     */
    protected get focusedItem(): Tab;
    constructor();
    connectedCallback(): void;
    private readonly handleKeydown;
    private readonly handleKeyup;
    private readonly handleFocusout;
    private findFocusableItem;
    private wasEventPrevented;
    private dispatchInteraction;
    protected willUpdate(changed: PropertyValues): void;
    protected updated(changed: PropertyValues): Promise<void>;
    private updateFocusableItem;
    protected render(): import("lit-html").TemplateResult<1>;
    private handleItemClick;
    private handleSlotChange;
    private itemsUpdateComplete;
    private scrollItemIntoView;
}
