/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
var _a;
import { __decorate } from "tslib";
import '../../focus/focus-ring.js';
import '../../ripple/ripple.js';
import { html, LitElement, nothing } from 'lit';
import { property, state } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { requestUpdateOnAriaChange } from '../../internal/aria/delegate.js';
/**
 * A chip component.
 */
export class Chip extends LitElement {
    constructor() {
        super(...arguments);
        this.disabled = false;
        this.label = '';
        /**
         * The aria role of the container. Defaults to `row` for grid chip sets.
         * Listbox chip sets should remove this since they do not contain cells.
         */
        this.containerRole = 'row';
    }
    /**
     * Whether or not the primary ripple is disabled (defaults to `disabled`).
     * Some chip actions such as links cannot be disabled.
     */
    get rippleDisabled() {
        return this.disabled;
    }
    render() {
        return html `
      <div class="container ${classMap(this.getContainerClasses())}"
          role=${this.containerRole || nothing}>
        ${this.renderOutline()}
        <md-focus-ring for=${this.primaryId}></md-focus-ring>
        <md-ripple for=${this.primaryId}
          ?disabled=${this.rippleDisabled}></md-ripple>
        ${this.renderActions()}
      </div>
    `;
    }
    getContainerClasses() {
        return {
            disabled: this.disabled,
        };
    }
    renderActions() {
        return this.renderActionCell(this.renderAction());
    }
    renderActionCell(content) {
        if (content === nothing) {
            return content;
        }
        return html `<div class="cell" role="cell">${content}</div>`;
    }
    renderContent() {
        return html `
      <span class="leading icon" aria-hidden="true">
        ${this.renderLeadingIcon()}
      </span>
      <span class="label">${this.label}</span>
      <span class="touch"></span>
    `;
    }
    renderOutline() {
        return html `<span class="outline"></span>`;
    }
    renderLeadingIcon() {
        return html `<slot name="icon"></slot>`;
    }
}
_a = Chip;
(() => {
    requestUpdateOnAriaChange(_a);
})();
/** @nocollapse */
Chip.shadowRootOptions = {
    ...LitElement.shadowRootOptions,
    delegatesFocus: true
};
__decorate([
    property({ type: Boolean })
], Chip.prototype, "disabled", void 0);
__decorate([
    property()
], Chip.prototype, "label", void 0);
__decorate([
    state()
], Chip.prototype, "containerRole", void 0);
//# sourceMappingURL=chip.js.map