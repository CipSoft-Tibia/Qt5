{"version":3,"file":"markdown.js","sources":["../node_modules/@lezer/markdown/dist/index.js","../node_modules/@codemirror/lang-markdown/dist/index.js"],"sourcesContent":["import { NodeType, NodeProp, NodeSet, Tree, Parser, parseMixed } from '@lezer/common';\nimport { styleTags, tags, Tag } from '@lezer/highlight';\n\nclass CompositeBlock {\n    constructor(type, \n    // Used for indentation in list items, markup character in lists\n    value, from, hash, end, children, positions) {\n        this.type = type;\n        this.value = value;\n        this.from = from;\n        this.hash = hash;\n        this.end = end;\n        this.children = children;\n        this.positions = positions;\n        this.hashProp = [[NodeProp.contextHash, hash]];\n    }\n    static create(type, value, from, parentHash, end) {\n        let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;\n        return new CompositeBlock(type, value, from, hash, end, [], []);\n    }\n    addChild(child, pos) {\n        if (child.prop(NodeProp.contextHash) != this.hash)\n            child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);\n        this.children.push(child);\n        this.positions.push(pos);\n    }\n    toTree(nodeSet, end = this.end) {\n        let last = this.children.length - 1;\n        if (last >= 0)\n            end = Math.max(end, this.positions[last] + this.children[last].length + this.from);\n        let tree = new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({\n            makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)\n        });\n        return tree;\n    }\n}\nvar Type;\n(function (Type) {\n    Type[Type[\"Document\"] = 1] = \"Document\";\n    Type[Type[\"CodeBlock\"] = 2] = \"CodeBlock\";\n    Type[Type[\"FencedCode\"] = 3] = \"FencedCode\";\n    Type[Type[\"Blockquote\"] = 4] = \"Blockquote\";\n    Type[Type[\"HorizontalRule\"] = 5] = \"HorizontalRule\";\n    Type[Type[\"BulletList\"] = 6] = \"BulletList\";\n    Type[Type[\"OrderedList\"] = 7] = \"OrderedList\";\n    Type[Type[\"ListItem\"] = 8] = \"ListItem\";\n    Type[Type[\"ATXHeading1\"] = 9] = \"ATXHeading1\";\n    Type[Type[\"ATXHeading2\"] = 10] = \"ATXHeading2\";\n    Type[Type[\"ATXHeading3\"] = 11] = \"ATXHeading3\";\n    Type[Type[\"ATXHeading4\"] = 12] = \"ATXHeading4\";\n    Type[Type[\"ATXHeading5\"] = 13] = \"ATXHeading5\";\n    Type[Type[\"ATXHeading6\"] = 14] = \"ATXHeading6\";\n    Type[Type[\"SetextHeading1\"] = 15] = \"SetextHeading1\";\n    Type[Type[\"SetextHeading2\"] = 16] = \"SetextHeading2\";\n    Type[Type[\"HTMLBlock\"] = 17] = \"HTMLBlock\";\n    Type[Type[\"LinkReference\"] = 18] = \"LinkReference\";\n    Type[Type[\"Paragraph\"] = 19] = \"Paragraph\";\n    Type[Type[\"CommentBlock\"] = 20] = \"CommentBlock\";\n    Type[Type[\"ProcessingInstructionBlock\"] = 21] = \"ProcessingInstructionBlock\";\n    // Inline\n    Type[Type[\"Escape\"] = 22] = \"Escape\";\n    Type[Type[\"Entity\"] = 23] = \"Entity\";\n    Type[Type[\"HardBreak\"] = 24] = \"HardBreak\";\n    Type[Type[\"Emphasis\"] = 25] = \"Emphasis\";\n    Type[Type[\"StrongEmphasis\"] = 26] = \"StrongEmphasis\";\n    Type[Type[\"Link\"] = 27] = \"Link\";\n    Type[Type[\"Image\"] = 28] = \"Image\";\n    Type[Type[\"InlineCode\"] = 29] = \"InlineCode\";\n    Type[Type[\"HTMLTag\"] = 30] = \"HTMLTag\";\n    Type[Type[\"Comment\"] = 31] = \"Comment\";\n    Type[Type[\"ProcessingInstruction\"] = 32] = \"ProcessingInstruction\";\n    Type[Type[\"URL\"] = 33] = \"URL\";\n    // Smaller tokens\n    Type[Type[\"HeaderMark\"] = 34] = \"HeaderMark\";\n    Type[Type[\"QuoteMark\"] = 35] = \"QuoteMark\";\n    Type[Type[\"ListMark\"] = 36] = \"ListMark\";\n    Type[Type[\"LinkMark\"] = 37] = \"LinkMark\";\n    Type[Type[\"EmphasisMark\"] = 38] = \"EmphasisMark\";\n    Type[Type[\"CodeMark\"] = 39] = \"CodeMark\";\n    Type[Type[\"CodeText\"] = 40] = \"CodeText\";\n    Type[Type[\"CodeInfo\"] = 41] = \"CodeInfo\";\n    Type[Type[\"LinkTitle\"] = 42] = \"LinkTitle\";\n    Type[Type[\"LinkLabel\"] = 43] = \"LinkLabel\";\n})(Type || (Type = {}));\n/// Data structure used to accumulate a block's content during [leaf\n/// block parsing](#BlockParser.leaf).\nclass LeafBlock {\n    /// @internal\n    constructor(\n    /// The start position of the block.\n    start, \n    /// The block's text content.\n    content) {\n        this.start = start;\n        this.content = content;\n        /// @internal\n        this.marks = [];\n        /// The block parsers active for this block.\n        this.parsers = [];\n    }\n}\n/// Data structure used during block-level per-line parsing.\nclass Line {\n    constructor() {\n        /// The line's full text.\n        this.text = \"\";\n        /// The base indent provided by the composite contexts (that have\n        /// been handled so far).\n        this.baseIndent = 0;\n        /// The string position corresponding to the base indent.\n        this.basePos = 0;\n        /// The number of contexts handled @internal\n        this.depth = 0;\n        /// Any markers (i.e. block quote markers) parsed for the contexts. @internal\n        this.markers = [];\n        /// The position of the next non-whitespace character beyond any\n        /// list, blockquote, or other composite block markers.\n        this.pos = 0;\n        /// The column of the next non-whitespace character.\n        this.indent = 0;\n        /// The character code of the character after `pos`.\n        this.next = -1;\n    }\n    /// @internal\n    forward() {\n        if (this.basePos > this.pos)\n            this.forwardInner();\n    }\n    /// @internal\n    forwardInner() {\n        let newPos = this.skipSpace(this.basePos);\n        this.indent = this.countIndent(newPos, this.pos, this.indent);\n        this.pos = newPos;\n        this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);\n    }\n    /// Skip whitespace after the given position, return the position of\n    /// the next non-space character or the end of the line if there's\n    /// only space after `from`.\n    skipSpace(from) { return skipSpace(this.text, from); }\n    /// @internal\n    reset(text) {\n        this.text = text;\n        this.baseIndent = this.basePos = this.pos = this.indent = 0;\n        this.forwardInner();\n        this.depth = 1;\n        while (this.markers.length)\n            this.markers.pop();\n    }\n    /// Move the line's base position forward to the given position.\n    /// This should only be called by composite [block\n    /// parsers](#BlockParser.parse) or [markup skipping\n    /// functions](#NodeSpec.composite).\n    moveBase(to) {\n        this.basePos = to;\n        this.baseIndent = this.countIndent(to, this.pos, this.indent);\n    }\n    /// Move the line's base position forward to the given _column_.\n    moveBaseColumn(indent) {\n        this.baseIndent = indent;\n        this.basePos = this.findColumn(indent);\n    }\n    /// Store a composite-block-level marker. Should be called from\n    /// [markup skipping functions](#NodeSpec.composite) when they\n    /// consume any non-whitespace characters.\n    addMarker(elt) {\n        this.markers.push(elt);\n    }\n    /// Find the column position at `to`, optionally starting at a given\n    /// position and column.\n    countIndent(to, from = 0, indent = 0) {\n        for (let i = from; i < to; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return indent;\n    }\n    /// Find the position corresponding to the given column.\n    findColumn(goal) {\n        let i = 0;\n        for (let indent = 0; i < this.text.length && indent < goal; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return i;\n    }\n    /// @internal\n    scrub() {\n        if (!this.baseIndent)\n            return this.text;\n        let result = \"\";\n        for (let i = 0; i < this.basePos; i++)\n            result += \" \";\n        return result + this.text.slice(this.basePos);\n    }\n}\nfunction skipForList(bl, cx, line) {\n    if (line.pos == line.text.length ||\n        (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))\n        return true;\n    if (line.indent >= line.baseIndent + 4)\n        return false;\n    let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);\n    return size > 0 &&\n        (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&\n        line.text.charCodeAt(line.pos + size - 1) == bl.value;\n}\nconst DefaultSkipMarkup = {\n    [Type.Blockquote](bl, cx, line) {\n        if (line.next != 62 /* '>' */)\n            return false;\n        line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));\n        line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));\n        bl.end = cx.lineStart + line.text.length;\n        return true;\n    },\n    [Type.ListItem](bl, _cx, line) {\n        if (line.indent < line.baseIndent + bl.value && line.next > -1)\n            return false;\n        line.moveBaseColumn(line.baseIndent + bl.value);\n        return true;\n    },\n    [Type.OrderedList]: skipForList,\n    [Type.BulletList]: skipForList,\n    [Type.Document]() { return true; }\n};\nfunction space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }\nfunction skipSpace(line, i = 0) {\n    while (i < line.length && space(line.charCodeAt(i)))\n        i++;\n    return i;\n}\nfunction skipSpaceBack(line, i, to) {\n    while (i > to && space(line.charCodeAt(i - 1)))\n        i--;\n    return i;\n}\nfunction isFencedCode(line) {\n    if (line.next != 96 && line.next != 126 /* '`~' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    if (pos < line.pos + 3)\n        return -1;\n    if (line.next == 96)\n        for (let i = pos; i < line.text.length; i++)\n            if (line.text.charCodeAt(i) == 96)\n                return -1;\n    return pos;\n}\nfunction isBlockquote(line) {\n    return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;\n}\nfunction isHorizontalRule(line, cx, breaking) {\n    if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)\n        return -1;\n    let count = 1;\n    for (let pos = line.pos + 1; pos < line.text.length; pos++) {\n        let ch = line.text.charCodeAt(pos);\n        if (ch == line.next)\n            count++;\n        else if (!space(ch))\n            return -1;\n    }\n    // Setext headers take precedence\n    if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)\n        return -1;\n    return count < 3 ? -1 : 1;\n}\nfunction inList(cx, type) {\n    for (let i = cx.stack.length - 1; i >= 0; i--)\n        if (cx.stack[i].type == type)\n            return true;\n    return false;\n}\nfunction isBulletList(line, cx, breaking) {\n    return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&\n        (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&\n        (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;\n}\nfunction isOrderedList(line, cx, breaking) {\n    let pos = line.pos, next = line.next;\n    for (;;) {\n        if (next >= 48 && next <= 57 /* '0-9' */)\n            pos++;\n        else\n            break;\n        if (pos == line.text.length)\n            return -1;\n        next = line.text.charCodeAt(pos);\n    }\n    if (pos == line.pos || pos > line.pos + 9 ||\n        (next != 46 && next != 41 /* '.)' */) ||\n        (pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||\n        breaking && !inList(cx, Type.OrderedList) &&\n            (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))\n        return -1;\n    return pos + 1 - line.pos;\n}\nfunction isAtxHeading(line) {\n    if (line.next != 35 /* '#' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == 35)\n        pos++;\n    if (pos < line.text.length && line.text.charCodeAt(pos) != 32)\n        return -1;\n    let size = pos - line.pos;\n    return size > 6 ? -1 : size;\n}\nfunction isSetextUnderline(line) {\n    if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    let end = pos;\n    while (pos < line.text.length && space(line.text.charCodeAt(pos)))\n        pos++;\n    return pos == line.text.length ? end : -1;\n}\nconst EmptyLine = /^[ \\t]*$/, CommentEnd = /-->/, ProcessingEnd = /\\?>/;\nconst HTMLBlockStyle = [\n    [/^<(?:script|pre|style)(?:\\s|>|$)/i, /<\\/(?:script|pre|style)>/i],\n    [/^\\s*<!--/, CommentEnd],\n    [/^\\s*<\\?/, ProcessingEnd],\n    [/^\\s*<![A-Z]/, />/],\n    [/^\\s*<!\\[CDATA\\[/, /\\]\\]>/],\n    [/^\\s*<\\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|\\/?>|$)/i, EmptyLine],\n    [/^\\s*(?:<\\/[a-z][\\w-]*\\s*>|<[a-z][\\w-]*(\\s+[a-z:_][\\w-.]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*>)\\s*$/i, EmptyLine]\n];\nfunction isHTMLBlock(line, _cx, breaking) {\n    if (line.next != 60 /* '<' */)\n        return -1;\n    let rest = line.text.slice(line.pos);\n    for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)\n        if (HTMLBlockStyle[i][0].test(rest))\n            return i;\n    return -1;\n}\nfunction getListIndent(line, pos) {\n    let indentAfter = line.countIndent(pos, line.pos, line.indent);\n    let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);\n    return indented >= indentAfter + 5 ? indentAfter + 1 : indented;\n}\nfunction addCodeText(marks, from, to) {\n    let last = marks.length - 1;\n    if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)\n        marks[last].to = to;\n    else\n        marks.push(elt(Type.CodeText, from, to));\n}\n// Rules for parsing blocks. A return value of false means the rule\n// doesn't apply here, true means it does. When true is returned and\n// `p.line` has been updated, the rule is assumed to have consumed a\n// leaf block. Otherwise, it is assumed to have opened a context.\nconst DefaultBlockParsers = {\n    LinkReference: undefined,\n    IndentedCode(cx, line) {\n        let base = line.baseIndent + 4;\n        if (line.indent < base)\n            return false;\n        let start = line.findColumn(base);\n        let from = cx.lineStart + start, to = cx.lineStart + line.text.length;\n        let marks = [], pendingMarks = [];\n        addCodeText(marks, from, to);\n        while (cx.nextLine() && line.depth >= cx.stack.length) {\n            if (line.pos == line.text.length) { // Empty\n                addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    pendingMarks.push(m);\n            }\n            else if (line.indent < base) {\n                break;\n            }\n            else {\n                if (pendingMarks.length) {\n                    for (let m of pendingMarks) {\n                        if (m.type == Type.CodeText)\n                            addCodeText(marks, m.from, m.to);\n                        else\n                            marks.push(m);\n                    }\n                    pendingMarks = [];\n                }\n                addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                to = cx.lineStart + line.text.length;\n                let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);\n                if (codeStart < to)\n                    addCodeText(marks, codeStart, to);\n            }\n        }\n        if (pendingMarks.length) {\n            pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);\n            if (pendingMarks.length)\n                line.markers = pendingMarks.concat(line.markers);\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);\n        return true;\n    },\n    FencedCode(cx, line) {\n        let fenceEnd = isFencedCode(line);\n        if (fenceEnd < 0)\n            return false;\n        let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;\n        let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);\n        let marks = [elt(Type.CodeMark, from, from + len)];\n        if (infoFrom < infoTo)\n            marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));\n        for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {\n            let i = line.pos;\n            if (line.indent - line.baseIndent < 4)\n                while (i < line.text.length && line.text.charCodeAt(i) == ch)\n                    i++;\n            if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {\n                for (let m of line.markers)\n                    marks.push(m);\n                marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));\n                cx.nextLine();\n                break;\n            }\n            else {\n                if (!first)\n                    addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;\n                if (textStart < textEnd)\n                    addCodeText(marks, textStart, textEnd);\n            }\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from)\n            .finish(Type.FencedCode, cx.prevLineEnd() - from), from);\n        return true;\n    },\n    Blockquote(cx, line) {\n        let size = isBlockquote(line);\n        if (size < 0)\n            return false;\n        cx.startContext(Type.Blockquote, line.pos);\n        cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);\n        line.moveBase(line.pos + size);\n        return null;\n    },\n    HorizontalRule(cx, line) {\n        if (isHorizontalRule(line, cx, false) < 0)\n            return false;\n        let from = cx.lineStart + line.pos;\n        cx.nextLine();\n        cx.addNode(Type.HorizontalRule, from);\n        return true;\n    },\n    BulletList(cx, line) {\n        let size = isBulletList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.BulletList)\n            cx.startContext(Type.BulletList, line.basePos, line.next);\n        let newBase = getListIndent(line, line.pos + 1);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    OrderedList(cx, line) {\n        let size = isOrderedList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.OrderedList)\n            cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));\n        let newBase = getListIndent(line, line.pos + size);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    ATXHeading(cx, line) {\n        let size = isAtxHeading(line);\n        if (size < 0)\n            return false;\n        let off = line.pos, from = cx.lineStart + off;\n        let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;\n        while (after > off && line.text.charCodeAt(after - 1) == line.next)\n            after--;\n        if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))\n            after = line.text.length;\n        let buf = cx.buffer\n            .write(Type.HeaderMark, 0, size)\n            .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);\n        if (after < line.text.length)\n            buf.write(Type.HeaderMark, after - off, endOfSpace - off);\n        let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);\n        cx.nextLine();\n        cx.addNode(node, from);\n        return true;\n    },\n    HTMLBlock(cx, line) {\n        let type = isHTMLBlock(line, cx, false);\n        if (type < 0)\n            return false;\n        let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];\n        let marks = [], trailing = end != EmptyLine;\n        while (!end.test(line.text) && cx.nextLine()) {\n            if (line.depth < cx.stack.length) {\n                trailing = false;\n                break;\n            }\n            for (let m of line.markers)\n                marks.push(m);\n        }\n        if (trailing)\n            cx.nextLine();\n        let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;\n        let to = cx.prevLineEnd();\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);\n        return true;\n    },\n    SetextHeading: undefined // Specifies relative precedence for block-continue function\n};\n// This implements a state machine that incrementally parses link references. At each\n// next line, it looks ahead to see if the line continues the reference or not. If it\n// doesn't and a valid link is available ending before that line, it finishes that.\n// Similarly, on `finish` (when the leaf is terminated by external circumstances), it\n// creates a link reference if there's a valid reference up to the current point.\nclass LinkReferenceParser {\n    constructor(leaf) {\n        this.stage = 0 /* Start */;\n        this.elts = [];\n        this.pos = 0;\n        this.start = leaf.start;\n        this.advance(leaf.content);\n    }\n    nextLine(cx, line, leaf) {\n        if (this.stage == -1 /* Failed */)\n            return false;\n        let content = leaf.content + \"\\n\" + line.scrub();\n        let finish = this.advance(content);\n        if (finish > -1 && finish < content.length)\n            return this.complete(cx, leaf, finish);\n        return false;\n    }\n    finish(cx, leaf) {\n        if ((this.stage == 2 /* Link */ || this.stage == 3 /* Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)\n            return this.complete(cx, leaf, leaf.content.length);\n        return false;\n    }\n    complete(cx, leaf, len) {\n        cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));\n        return true;\n    }\n    nextStage(elt) {\n        if (elt) {\n            this.pos = elt.to - this.start;\n            this.elts.push(elt);\n            this.stage++;\n            return true;\n        }\n        if (elt === false)\n            this.stage = -1 /* Failed */;\n        return false;\n    }\n    advance(content) {\n        for (;;) {\n            if (this.stage == -1 /* Failed */) {\n                return -1;\n            }\n            else if (this.stage == 0 /* Start */) {\n                if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))\n                    return -1;\n                if (content.charCodeAt(this.pos) != 58 /* ':' */)\n                    return this.stage = -1 /* Failed */;\n                this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));\n                this.pos++;\n            }\n            else if (this.stage == 1 /* Label */) {\n                if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))\n                    return -1;\n            }\n            else if (this.stage == 2 /* Link */) {\n                let skip = skipSpace(content, this.pos), end = 0;\n                if (skip > this.pos) {\n                    let title = parseLinkTitle(content, skip, this.start);\n                    if (title) {\n                        let titleEnd = lineEnd(content, title.to - this.start);\n                        if (titleEnd > 0) {\n                            this.nextStage(title);\n                            end = titleEnd;\n                        }\n                    }\n                }\n                if (!end)\n                    end = lineEnd(content, this.pos);\n                return end > 0 && end < content.length ? end : -1;\n            }\n            else { // RefStage.Title\n                return lineEnd(content, this.pos);\n            }\n        }\n    }\n}\nfunction lineEnd(text, pos) {\n    for (; pos < text.length; pos++) {\n        let next = text.charCodeAt(pos);\n        if (next == 10)\n            break;\n        if (!space(next))\n            return -1;\n    }\n    return pos;\n}\nclass SetextHeadingParser {\n    nextLine(cx, line, leaf) {\n        let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);\n        let next = line.next;\n        if (underline < 0)\n            return false;\n        let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);\n        cx.nextLine();\n        cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [\n            ...cx.parser.parseInline(leaf.content, leaf.start),\n            underlineMark\n        ]));\n        return true;\n    }\n    finish() {\n        return false;\n    }\n}\nconst DefaultLeafBlocks = {\n    LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },\n    SetextHeading() { return new SetextHeadingParser; }\n};\nconst DefaultEndLeaf = [\n    (_, line) => isAtxHeading(line) >= 0,\n    (_, line) => isFencedCode(line) >= 0,\n    (_, line) => isBlockquote(line) >= 0,\n    (p, line) => isBulletList(line, p, true) >= 0,\n    (p, line) => isOrderedList(line, p, true) >= 0,\n    (p, line) => isHorizontalRule(line, p, true) >= 0,\n    (p, line) => isHTMLBlock(line, p, true) >= 0\n];\nconst scanLineResult = { text: \"\", end: 0 };\n/// Block-level parsing functions get access to this context object.\nclass BlockContext {\n    /// @internal\n    constructor(\n    /// The parser configuration used.\n    parser, \n    /// @internal\n    input, fragments, \n    /// @internal\n    ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.line = new Line();\n        this.atEnd = false;\n        /// @internal\n        this.dontInject = new Set;\n        this.stoppedAt = null;\n        /// The range index that absoluteLineStart points into @internal\n        this.rangeI = 0;\n        this.to = ranges[ranges.length - 1].to;\n        this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;\n        this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);\n        this.stack = [this.block];\n        this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;\n        this.readLine();\n    }\n    get parsedPos() {\n        return this.absoluteLineStart;\n    }\n    advance() {\n        if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)\n            return this.finish();\n        let { line } = this;\n        for (;;) {\n            while (line.depth < this.stack.length)\n                this.finishContext();\n            for (let mark of line.markers)\n                this.addNode(mark.type, mark.from, mark.to);\n            if (line.pos < line.text.length)\n                break;\n            // Empty line\n            if (!this.nextLine())\n                return this.finish();\n        }\n        if (this.fragments && this.reuseFragment(line.basePos))\n            return null;\n        start: for (;;) {\n            for (let type of this.parser.blockParsers)\n                if (type) {\n                    let result = type(this, line);\n                    if (result != false) {\n                        if (result == true)\n                            return null;\n                        line.forward();\n                        continue start;\n                    }\n                }\n            break;\n        }\n        let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));\n        for (let parse of this.parser.leafBlockParsers)\n            if (parse) {\n                let parser = parse(this, leaf);\n                if (parser)\n                    leaf.parsers.push(parser);\n            }\n        lines: while (this.nextLine()) {\n            if (line.pos == line.text.length)\n                break;\n            if (line.indent < line.baseIndent + 4) {\n                for (let stop of this.parser.endLeafBlock)\n                    if (stop(this, line, leaf))\n                        break lines;\n            }\n            for (let parser of leaf.parsers)\n                if (parser.nextLine(this, line, leaf))\n                    return null;\n            leaf.content += \"\\n\" + line.scrub();\n            for (let m of line.markers)\n                leaf.marks.push(m);\n        }\n        this.finishLeaf(leaf);\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    reuseFragment(start) {\n        if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||\n            !this.fragments.matches(this.block.hash))\n            return false;\n        let taken = this.fragments.takeNodes(this);\n        if (!taken)\n            return false;\n        let withoutGaps = taken, end = this.absoluteLineStart + taken;\n        for (let i = 1; i < this.ranges.length; i++) {\n            let gapFrom = this.ranges[i - 1].to, gapTo = this.ranges[i].from;\n            if (gapFrom >= this.lineStart && gapTo < end)\n                withoutGaps -= gapTo - gapFrom;\n        }\n        this.lineStart += withoutGaps;\n        this.absoluteLineStart += taken;\n        this.moveRangeI();\n        if (this.absoluteLineStart < this.to) {\n            this.lineStart++;\n            this.absoluteLineStart++;\n            this.readLine();\n        }\n        else {\n            this.atEnd = true;\n            this.readLine();\n        }\n        return true;\n    }\n    /// The number of parent blocks surrounding the current block.\n    get depth() {\n        return this.stack.length;\n    }\n    /// Get the type of the parent block at the given depth. When no\n    /// depth is passed, return the type of the innermost parent.\n    parentType(depth = this.depth - 1) {\n        return this.parser.nodeSet.types[this.stack[depth].type];\n    }\n    /// Move to the next input line. This should only be called by\n    /// (non-composite) [block parsers](#BlockParser.parse) that consume\n    /// the line directly, or leaf block parser\n    /// [`nextLine`](#LeafBlockParser.nextLine) methods when they\n    /// consume the current line (and return true).\n    nextLine() {\n        this.lineStart += this.line.text.length;\n        if (this.absoluteLineEnd >= this.to) {\n            this.absoluteLineStart = this.absoluteLineEnd;\n            this.atEnd = true;\n            this.readLine();\n            return false;\n        }\n        else {\n            this.lineStart++;\n            this.absoluteLineStart = this.absoluteLineEnd + 1;\n            this.moveRangeI();\n            this.readLine();\n            return true;\n        }\n    }\n    moveRangeI() {\n        while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {\n            this.rangeI++;\n            this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);\n        }\n    }\n    /// @internal\n    scanLine(start) {\n        let r = scanLineResult;\n        r.end = start;\n        if (start >= this.to) {\n            r.text = \"\";\n        }\n        else {\n            r.text = this.lineChunkAt(start);\n            r.end += r.text.length;\n            if (this.ranges.length > 1) {\n                let textOffset = this.absoluteLineStart, rangeI = this.rangeI;\n                while (this.ranges[rangeI].to < r.end) {\n                    rangeI++;\n                    let nextFrom = this.ranges[rangeI].from;\n                    let after = this.lineChunkAt(nextFrom);\n                    r.end = nextFrom + after.length;\n                    r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;\n                    textOffset = r.end - r.text.length;\n                }\n            }\n        }\n        return r;\n    }\n    /// @internal\n    readLine() {\n        let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);\n        this.absoluteLineEnd = end;\n        line.reset(text);\n        for (; line.depth < this.stack.length; line.depth++) {\n            let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];\n            if (!handler)\n                throw new Error(\"Unhandled block context \" + Type[cx.type]);\n            if (!handler(cx, this, line))\n                break;\n            line.forward();\n        }\n    }\n    lineChunkAt(pos) {\n        let next = this.input.chunk(pos), text;\n        if (!this.input.lineChunks) {\n            let eol = next.indexOf(\"\\n\");\n            text = eol < 0 ? next : next.slice(0, eol);\n        }\n        else {\n            text = next == \"\\n\" ? \"\" : next;\n        }\n        return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;\n    }\n    /// The end position of the previous line.\n    prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }\n    /// @internal\n    startContext(type, start, value = 0) {\n        this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);\n        this.stack.push(this.block);\n    }\n    /// Start a composite block. Should only be called from [block\n    /// parser functions](#BlockParser.parse) that return null.\n    startComposite(type, start, value = 0) {\n        this.startContext(this.parser.getNodeType(type), start, value);\n    }\n    /// @internal\n    addNode(block, from, to) {\n        if (typeof block == \"number\")\n            block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);\n        this.block.addChild(block, from - this.block.from);\n    }\n    /// Add a block element. Can be called by [block\n    /// parsers](#BlockParser.parse).\n    addElement(elt) {\n        this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);\n    }\n    /// Add a block element from a [leaf parser](#LeafBlockParser). This\n    /// makes sure any extra composite block markup (such as blockquote\n    /// markers) inside the block are also added to the syntax tree.\n    addLeafElement(leaf, elt) {\n        this.addNode(this.buffer\n            .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)\n            .finish(elt.type, elt.to - elt.from), elt.from);\n    }\n    /// @internal\n    finishContext() {\n        let cx = this.stack.pop();\n        let top = this.stack[this.stack.length - 1];\n        top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);\n        this.block = top;\n    }\n    finish() {\n        while (this.stack.length > 1)\n            this.finishContext();\n        return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));\n    }\n    addGaps(tree) {\n        return this.ranges.length > 1 ? injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.dontInject) : tree;\n    }\n    /// @internal\n    finishLeaf(leaf) {\n        for (let parser of leaf.parsers)\n            if (parser.finish(this, leaf))\n                return;\n        let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);\n        this.addNode(this.buffer\n            .writeElements(inline, -leaf.start)\n            .finish(Type.Paragraph, leaf.content.length), leaf.start);\n    }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n    /// @internal\n    get buffer() { return new Buffer(this.parser.nodeSet); }\n}\nfunction injectGaps(ranges, rangeI, tree, offset, dont) {\n    if (dont.has(tree.tree))\n        return tree.tree;\n    let rangeEnd = ranges[rangeI].to;\n    let children = [], positions = [], start = tree.from + offset;\n    function movePastNext(upto, inclusive) {\n        while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {\n            let size = ranges[rangeI + 1].from - rangeEnd;\n            offset += size;\n            upto += size;\n            rangeI++;\n            rangeEnd = ranges[rangeI].to;\n        }\n    }\n    for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {\n        movePastNext(ch.from + offset, true);\n        let from = ch.from + offset, node;\n        if (ch.to + offset > rangeEnd) {\n            node = injectGaps(ranges, rangeI, ch, offset, dont);\n            movePastNext(ch.to + offset, false);\n        }\n        else {\n            node = ch.toTree();\n        }\n        children.push(node);\n        positions.push(from - start);\n    }\n    movePastNext(tree.to + offset, false);\n    return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);\n}\n/// A Markdown parser configuration.\nclass MarkdownParser extends Parser {\n    /// @internal\n    constructor(\n    /// The parser's syntax [node\n    /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).\n    nodeSet, \n    /// @internal\n    blockParsers, \n    /// @internal\n    leafBlockParsers, \n    /// @internal\n    blockNames, \n    /// @internal\n    endLeafBlock, \n    /// @internal\n    skipContextMarkup, \n    /// @internal\n    inlineParsers, \n    /// @internal\n    inlineNames, \n    /// @internal\n    wrappers) {\n        super();\n        this.nodeSet = nodeSet;\n        this.blockParsers = blockParsers;\n        this.leafBlockParsers = leafBlockParsers;\n        this.blockNames = blockNames;\n        this.endLeafBlock = endLeafBlock;\n        this.skipContextMarkup = skipContextMarkup;\n        this.inlineParsers = inlineParsers;\n        this.inlineNames = inlineNames;\n        this.wrappers = wrappers;\n        /// @internal\n        this.nodeTypes = Object.create(null);\n        for (let t of nodeSet.types)\n            this.nodeTypes[t.name] = t.id;\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new BlockContext(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Reconfigure the parser.\n    configure(spec) {\n        let config = resolveConfig(spec);\n        if (!config)\n            return this;\n        let { nodeSet, skipContextMarkup } = this;\n        let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;\n        if (nonEmpty(config.defineNodes)) {\n            skipContextMarkup = Object.assign({}, skipContextMarkup);\n            let nodeTypes = nodeSet.types.slice(), styles;\n            for (let s of config.defineNodes) {\n                let { name, block, composite, style } = typeof s == \"string\" ? { name: s } : s;\n                if (nodeTypes.some(t => t.name == name))\n                    continue;\n                if (composite)\n                    skipContextMarkup[nodeTypes.length] =\n                        (bl, cx, line) => composite(cx, line, bl.value);\n                let id = nodeTypes.length;\n                let group = composite ? [\"Block\", \"BlockContext\"] : !block ? undefined\n                    : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? [\"Block\", \"LeafBlock\", \"Heading\"] : [\"Block\", \"LeafBlock\"];\n                nodeTypes.push(NodeType.define({\n                    id,\n                    name,\n                    props: group && [[NodeProp.group, group]]\n                }));\n                if (style) {\n                    if (!styles)\n                        styles = {};\n                    if (Array.isArray(style) || style instanceof Tag)\n                        styles[name] = style;\n                    else\n                        Object.assign(styles, style);\n                }\n            }\n            nodeSet = new NodeSet(nodeTypes);\n            if (styles)\n                nodeSet = nodeSet.extend(styleTags(styles));\n        }\n        if (nonEmpty(config.props))\n            nodeSet = nodeSet.extend(...config.props);\n        if (nonEmpty(config.remove)) {\n            for (let rm of config.remove) {\n                let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);\n                if (block > -1)\n                    blockParsers[block] = leafBlockParsers[block] = undefined;\n                if (inline > -1)\n                    inlineParsers[inline] = undefined;\n            }\n        }\n        if (nonEmpty(config.parseBlock)) {\n            for (let spec of config.parseBlock) {\n                let found = blockNames.indexOf(spec.name);\n                if (found > -1) {\n                    blockParsers[found] = spec.parse;\n                    leafBlockParsers[found] = spec.leaf;\n                }\n                else {\n                    let pos = spec.before ? findName(blockNames, spec.before)\n                        : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;\n                    blockParsers.splice(pos, 0, spec.parse);\n                    leafBlockParsers.splice(pos, 0, spec.leaf);\n                    blockNames.splice(pos, 0, spec.name);\n                }\n                if (spec.endLeaf)\n                    endLeafBlock.push(spec.endLeaf);\n            }\n        }\n        if (nonEmpty(config.parseInline)) {\n            for (let spec of config.parseInline) {\n                let found = inlineNames.indexOf(spec.name);\n                if (found > -1) {\n                    inlineParsers[found] = spec.parse;\n                }\n                else {\n                    let pos = spec.before ? findName(inlineNames, spec.before)\n                        : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;\n                    inlineParsers.splice(pos, 0, spec.parse);\n                    inlineNames.splice(pos, 0, spec.name);\n                }\n            }\n        }\n        if (config.wrap)\n            wrappers = wrappers.concat(config.wrap);\n        return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);\n    }\n    /// @internal\n    getNodeType(name) {\n        let found = this.nodeTypes[name];\n        if (found == null)\n            throw new RangeError(`Unknown node type '${name}'`);\n        return found;\n    }\n    /// Parse the given piece of inline text at the given offset,\n    /// returning an array of [`Element`](#Element) objects representing\n    /// the inline content.\n    parseInline(text, offset) {\n        let cx = new InlineContext(this, text, offset);\n        outer: for (let pos = offset; pos < cx.end;) {\n            let next = cx.char(pos);\n            for (let token of this.inlineParsers)\n                if (token) {\n                    let result = token(cx, next, pos);\n                    if (result >= 0) {\n                        pos = result;\n                        continue outer;\n                    }\n                }\n            pos++;\n        }\n        return cx.resolveMarkers(0);\n    }\n}\nfunction nonEmpty(a) {\n    return a != null && a.length > 0;\n}\nfunction resolveConfig(spec) {\n    if (!Array.isArray(spec))\n        return spec;\n    if (spec.length == 0)\n        return null;\n    let conf = resolveConfig(spec[0]);\n    if (spec.length == 1)\n        return conf;\n    let rest = resolveConfig(spec.slice(1));\n    if (!rest || !conf)\n        return conf || rest;\n    let conc = (a, b) => (a || none).concat(b || none);\n    let wrapA = conf.wrap, wrapB = rest.wrap;\n    return {\n        props: conc(conf.props, rest.props),\n        defineNodes: conc(conf.defineNodes, rest.defineNodes),\n        parseBlock: conc(conf.parseBlock, rest.parseBlock),\n        parseInline: conc(conf.parseInline, rest.parseInline),\n        remove: conc(conf.remove, rest.remove),\n        wrap: !wrapA ? wrapB : !wrapB ? wrapA :\n            (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)\n    };\n}\nfunction findName(names, name) {\n    let found = names.indexOf(name);\n    if (found < 0)\n        throw new RangeError(`Position specified relative to unknown parser ${name}`);\n    return found;\n}\nlet nodeTypes = [NodeType.none];\nfor (let i = 1, name; name = Type[i]; i++) {\n    nodeTypes[i] = NodeType.define({\n        id: i,\n        name,\n        props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? [\"Block\", \"BlockContext\"] : [\"Block\", \"LeafBlock\"]]]\n    });\n}\nconst none = [];\nclass Buffer {\n    constructor(nodeSet) {\n        this.nodeSet = nodeSet;\n        this.content = [];\n        this.nodes = [];\n    }\n    write(type, from, to, children = 0) {\n        this.content.push(type, from, to, 4 + children * 4);\n        return this;\n    }\n    writeElements(elts, offset = 0) {\n        for (let e of elts)\n            e.writeTo(this, offset);\n        return this;\n    }\n    finish(type, length) {\n        return Tree.build({\n            buffer: this.content,\n            nodeSet: this.nodeSet,\n            reused: this.nodes,\n            topID: type,\n            length\n        });\n    }\n}\n/// Elements are used to compose syntax nodes during parsing.\nclass Element {\n    /// @internal\n    constructor(\n    /// The node's\n    /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).\n    type, \n    /// The start of the node, as an offset from the start of the document.\n    from, \n    /// The end of the node.\n    to, \n    /// The node's child nodes @internal\n    children = none) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.children = children;\n    }\n    /// @internal\n    writeTo(buf, offset) {\n        let startOff = buf.content.length;\n        buf.writeElements(this.children, offset);\n        buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);\n    }\n    /// @internal\n    toTree(nodeSet) {\n        return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);\n    }\n}\nclass TreeElement {\n    constructor(tree, from) {\n        this.tree = tree;\n        this.from = from;\n    }\n    get to() { return this.from + this.tree.length; }\n    get type() { return this.tree.type.id; }\n    get children() { return none; }\n    writeTo(buf, offset) {\n        buf.nodes.push(this.tree);\n        buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);\n    }\n    toTree() { return this.tree; }\n}\nfunction elt(type, from, to, children) {\n    return new Element(type, from, to, children);\n}\nconst EmphasisUnderscore = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst EmphasisAsterisk = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst LinkStart = {}, ImageStart = {};\nclass InlineDelimiter {\n    constructor(type, from, to, side) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.side = side;\n    }\n}\nconst Escapable = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\nlet Punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\u2010-\\u2027]/;\ntry {\n    Punctuation = new RegExp(\"[\\\\p{Pc}|\\\\p{Pd}|\\\\p{Pe}|\\\\p{Pf}|\\\\p{Pi}|\\\\p{Po}|\\\\p{Ps}]\", \"u\");\n}\ncatch (_) { }\nconst DefaultInline = {\n    Escape(cx, next, start) {\n        if (next != 92 /* '\\\\' */ || start == cx.end - 1)\n            return -1;\n        let escaped = cx.char(start + 1);\n        for (let i = 0; i < Escapable.length; i++)\n            if (Escapable.charCodeAt(i) == escaped)\n                return cx.append(elt(Type.Escape, start, start + 2));\n        return -1;\n    },\n    Entity(cx, next, start) {\n        if (next != 38 /* '&' */)\n            return -1;\n        let m = /^(?:#\\d+|#x[a-f\\d]+|\\w+);/i.exec(cx.slice(start + 1, start + 31));\n        return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;\n    },\n    InlineCode(cx, next, start) {\n        if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)\n            return -1;\n        let pos = start + 1;\n        while (pos < cx.end && cx.char(pos) == 96)\n            pos++;\n        let size = pos - start, curSize = 0;\n        for (; pos < cx.end; pos++) {\n            if (cx.char(pos) == 96) {\n                curSize++;\n                if (curSize == size && cx.char(pos + 1) != 96)\n                    return cx.append(elt(Type.InlineCode, start, pos + 1, [\n                        elt(Type.CodeMark, start, start + size),\n                        elt(Type.CodeMark, pos + 1 - size, pos + 1)\n                    ]));\n            }\n            else {\n                curSize = 0;\n            }\n        }\n        return -1;\n    },\n    HTMLTag(cx, next, start) {\n        if (next != 60 /* '<' */ || start == cx.end - 1)\n            return -1;\n        let after = cx.slice(start + 1, cx.end);\n        let url = /^(?:[a-z][-\\w+.]+:[^\\s>]+|[a-z\\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?(?:\\.[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?)*)>/i.exec(after);\n        if (url)\n            return cx.append(elt(Type.URL, start, start + 1 + url[0].length));\n        let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);\n        if (comment)\n            return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));\n        let procInst = /^\\?[^]*?\\?>/.exec(after);\n        if (procInst)\n            return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));\n        let m = /^(?:![A-Z][^]*?>|!\\[CDATA\\[[^]*?\\]\\]>|\\/\\s*[a-zA-Z][\\w-]*\\s*>|\\s*[a-zA-Z][\\w-]*(\\s+[a-zA-Z:_][\\w-.:]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*(\\/\\s*)?>)/.exec(after);\n        if (!m)\n            return -1;\n        return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));\n    },\n    Emphasis(cx, next, start) {\n        if (next != 95 && next != 42)\n            return -1;\n        let pos = start + 1;\n        while (cx.char(pos) == next)\n            pos++;\n        let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);\n        let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n        let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n        let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);\n        let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);\n        let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);\n        let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);\n        return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Open */ : 0) | (canClose ? 2 /* Close */ : 0)));\n    },\n    HardBreak(cx, next, start) {\n        if (next == 92 /* '\\\\' */ && cx.char(start + 1) == 10 /* '\\n' */)\n            return cx.append(elt(Type.HardBreak, start, start + 2));\n        if (next == 32) {\n            let pos = start + 1;\n            while (cx.char(pos) == 32)\n                pos++;\n            if (cx.char(pos) == 10 && pos >= start + 2)\n                return cx.append(elt(Type.HardBreak, start, pos + 1));\n        }\n        return -1;\n    },\n    Link(cx, next, start) {\n        return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Open */)) : -1;\n    },\n    Image(cx, next, start) {\n        return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */\n            ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Open */)) : -1;\n    },\n    LinkEnd(cx, next, start) {\n        if (next != 93 /* ']' */)\n            return -1;\n        // Scanning back to the next link/image start marker\n        for (let i = cx.parts.length - 1; i >= 0; i--) {\n            let part = cx.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {\n                // If this one has been set invalid (because it would produce\n                // a nested link) or there's no valid link here ignore both.\n                if (!part.side || cx.skipSpace(part.to) == start && !/[(\\[]/.test(cx.slice(start + 1, start + 2))) {\n                    cx.parts[i] = null;\n                    return -1;\n                }\n                // Finish the content and replace the entire range in\n                // this.parts with the link/image node.\n                let content = cx.takeContent(i);\n                let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);\n                // Set any open-link markers before this link to invalid.\n                if (part.type == LinkStart)\n                    for (let j = 0; j < i; j++) {\n                        let p = cx.parts[j];\n                        if (p instanceof InlineDelimiter && p.type == LinkStart)\n                            p.side = 0;\n                    }\n                return link.to;\n            }\n        }\n        return -1;\n    }\n};\nfunction finishLink(cx, content, type, start, startPos) {\n    let { text } = cx, next = cx.char(startPos), endPos = startPos;\n    content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));\n    content.push(elt(Type.LinkMark, startPos - 1, startPos));\n    if (next == 40 /* '(' */) {\n        let pos = cx.skipSpace(startPos + 1);\n        let dest = parseURL(text, pos - cx.offset, cx.offset), title;\n        if (dest) {\n            pos = cx.skipSpace(dest.to);\n            title = parseLinkTitle(text, pos - cx.offset, cx.offset);\n            if (title)\n                pos = cx.skipSpace(title.to);\n        }\n        if (cx.char(pos) == 41 /* ')' */) {\n            content.push(elt(Type.LinkMark, startPos, startPos + 1));\n            endPos = pos + 1;\n            if (dest)\n                content.push(dest);\n            if (title)\n                content.push(title);\n            content.push(elt(Type.LinkMark, pos, endPos));\n        }\n    }\n    else if (next == 91 /* '[' */) {\n        let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);\n        if (label) {\n            content.push(label);\n            endPos = label.to;\n        }\n    }\n    return elt(type, start, endPos, content);\n}\n// These return `null` when falling off the end of the input, `false`\n// when parsing fails otherwise (for use in the incremental link\n// reference parser).\nfunction parseURL(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next == 60 /* '<' */) {\n        for (let pos = start + 1; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (ch == 62 /* '>' */)\n                return elt(Type.URL, start + offset, pos + 1 + offset);\n            if (ch == 60 || ch == 10 /* '<\\n' */)\n                return false;\n        }\n        return null;\n    }\n    else {\n        let depth = 0, pos = start;\n        for (let escaped = false; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (space(ch)) {\n                break;\n            }\n            else if (escaped) {\n                escaped = false;\n            }\n            else if (ch == 40 /* '(' */) {\n                depth++;\n            }\n            else if (ch == 41 /* ')' */) {\n                if (!depth)\n                    break;\n                depth--;\n            }\n            else if (ch == 92 /* '\\\\' */) {\n                escaped = true;\n            }\n        }\n        return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;\n    }\n}\nfunction parseLinkTitle(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next != 39 && next != 34 && next != 40 /* '\"\\'(' */)\n        return false;\n    let end = next == 40 ? 41 : next;\n    for (let pos = start + 1, escaped = false; pos < text.length; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == end)\n            return elt(Type.LinkTitle, start + offset, pos + 1 + offset);\n        else if (ch == 92 /* '\\\\' */)\n            escaped = true;\n    }\n    return null;\n}\nfunction parseLinkLabel(text, start, offset, requireNonWS) {\n    for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == 93 /* ']' */)\n            return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);\n        else {\n            if (requireNonWS && !space(ch))\n                requireNonWS = false;\n            if (ch == 91 /* '[' */)\n                return false;\n            else if (ch == 92 /* '\\\\' */)\n                escaped = true;\n        }\n    }\n    return null;\n}\n/// Inline parsing functions get access to this context, and use it to\n/// read the content and emit syntax nodes.\nclass InlineContext {\n    /// @internal\n    constructor(\n    /// The parser that is being used.\n    parser, \n    /// The text of this inline section.\n    text, \n    /// The starting offset of the section in the document.\n    offset) {\n        this.parser = parser;\n        this.text = text;\n        this.offset = offset;\n        /// @internal\n        this.parts = [];\n    }\n    /// Get the character code at the given (document-relative)\n    /// position.\n    char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }\n    /// The position of the end of this inline section.\n    get end() { return this.offset + this.text.length; }\n    /// Get a substring of this inline section. Again uses\n    /// document-relative positions.\n    slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }\n    /// @internal\n    append(elt) {\n        this.parts.push(elt);\n        return elt.to;\n    }\n    /// Add a [delimiter](#DelimiterType) at this given position. `open`\n    /// and `close` indicate whether this delimiter is opening, closing,\n    /// or both. Returns the end of the delimiter, for convenient\n    /// returning from [parse functions](#InlineParser.parse).\n    addDelimiter(type, from, to, open, close) {\n        return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Open */ : 0) | (close ? 2 /* Close */ : 0)));\n    }\n    /// Add an inline element. Returns the end of the element.\n    addElement(elt) {\n        return this.append(elt);\n    }\n    /// Resolve markers between this.parts.length and from, wrapping matched markers in the\n    /// appropriate node and updating the content of this.parts. @internal\n    resolveMarkers(from) {\n        // Scan forward, looking for closing tokens\n        for (let i = from; i < this.parts.length; i++) {\n            let close = this.parts[i];\n            if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Close */)))\n                continue;\n            let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;\n            let closeSize = close.to - close.from;\n            let open, j = i - 1;\n            // Continue scanning for a matching opening token\n            for (; j >= from; j--) {\n                let part = this.parts[j];\n                if (part instanceof InlineDelimiter && (part.side & 1 /* Open */) && part.type == close.type &&\n                    // Ignore emphasis delimiters where the character count doesn't match\n                    !(emp && ((close.side & 1 /* Open */) || (part.side & 2 /* Close */)) &&\n                        (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {\n                    open = part;\n                    break;\n                }\n            }\n            if (!open)\n                continue;\n            let type = close.type.resolve, content = [];\n            let start = open.from, end = close.to;\n            // Emphasis marker effect depends on the character count. Size consumed is minimum of the two\n            // markers.\n            if (emp) {\n                let size = Math.min(2, open.to - open.from, closeSize);\n                start = open.to - size;\n                end = close.from + size;\n                type = size == 1 ? \"Emphasis\" : \"StrongEmphasis\";\n            }\n            // Move the covered region into content, optionally adding marker nodes\n            if (open.type.mark)\n                content.push(this.elt(open.type.mark, start, open.to));\n            for (let k = j + 1; k < i; k++) {\n                if (this.parts[k] instanceof Element)\n                    content.push(this.parts[k]);\n                this.parts[k] = null;\n            }\n            if (close.type.mark)\n                content.push(this.elt(close.type.mark, close.from, end));\n            let element = this.elt(type, start, end, content);\n            // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.\n            this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;\n            let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;\n            // Insert the new element in this.parts\n            if (keep)\n                this.parts.splice(i, 0, element);\n            else\n                this.parts[i] = element;\n        }\n        // Collect the elements remaining in this.parts into an array.\n        let result = [];\n        for (let i = from; i < this.parts.length; i++) {\n            let part = this.parts[i];\n            if (part instanceof Element)\n                result.push(part);\n        }\n        return result;\n    }\n    /// Find an opening delimiter of the given type. Returns `null` if\n    /// no delimiter is found, or an index that can be passed to\n    /// [`takeContent`](#InlineContext.takeContent) otherwise.\n    findOpeningDelimiter(type) {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && part.type == type)\n                return i;\n        }\n        return null;\n    }\n    /// Remove all inline elements and delimiters starting from the\n    /// given index (which you should get from\n    /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),\n    /// resolve delimiters inside of them, and return them as an array\n    /// of elements.\n    takeContent(startIndex) {\n        let content = this.resolveMarkers(startIndex);\n        this.parts.length = startIndex;\n        return content;\n    }\n    /// Skip space after the given (document) position, returning either\n    /// the position of the next non-space character or the end of the\n    /// section.\n    skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n}\nfunction injectMarks(elements, marks) {\n    if (!marks.length)\n        return elements;\n    if (!elements.length)\n        return marks;\n    let elts = elements.slice(), eI = 0;\n    for (let mark of marks) {\n        while (eI < elts.length && elts[eI].to < mark.to)\n            eI++;\n        if (eI < elts.length && elts[eI].from < mark.from) {\n            let e = elts[eI];\n            if (e instanceof Element)\n                elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));\n        }\n        else {\n            elts.splice(eI++, 0, mark);\n        }\n    }\n    return elts;\n}\n// These are blocks that can span blank lines, and should thus only be\n// reused if their next sibling is also being reused.\nconst NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];\nclass FragmentCursor {\n    constructor(fragments, input) {\n        this.fragments = fragments;\n        this.input = input;\n        // Index into fragment array\n        this.i = 0;\n        // Active fragment\n        this.fragment = null;\n        this.fragmentEnd = -1;\n        // Cursor into the current fragment, if any. When `moveTo` returns\n        // true, this points at the first block after `pos`.\n        this.cursor = null;\n        if (fragments.length)\n            this.fragment = fragments[this.i++];\n    }\n    nextFragment() {\n        this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;\n        this.cursor = null;\n        this.fragmentEnd = -1;\n    }\n    moveTo(pos, lineStart) {\n        while (this.fragment && this.fragment.to <= pos)\n            this.nextFragment();\n        if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))\n            return false;\n        if (this.fragmentEnd < 0) {\n            let end = this.fragment.to;\n            while (end > 0 && this.input.read(end - 1, end) != \"\\n\")\n                end--;\n            this.fragmentEnd = end ? end - 1 : 0;\n        }\n        let c = this.cursor;\n        if (!c) {\n            c = this.cursor = this.fragment.tree.cursor();\n            c.firstChild();\n        }\n        let rPos = pos + this.fragment.offset;\n        while (c.to <= rPos)\n            if (!c.parent())\n                return false;\n        for (;;) {\n            if (c.from >= rPos)\n                return this.fragment.from <= lineStart;\n            if (!c.childAfter(rPos))\n                return false;\n        }\n    }\n    matches(hash) {\n        let tree = this.cursor.tree;\n        return tree && tree.prop(NodeProp.contextHash) == hash;\n    }\n    takeNodes(cx) {\n        let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);\n        let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;\n        let prevEnd = end, prevI = blockI;\n        for (;;) {\n            if (cur.to - off > fragEnd) {\n                if (cur.type.isAnonymous && cur.firstChild())\n                    continue;\n                break;\n            }\n            cx.dontInject.add(cur.tree);\n            cx.addNode(cur.tree, cur.from - off);\n            // Taken content must always end in a block, because incremental\n            // parsing happens on block boundaries. Never stop directly\n            // after an indented code block, since those can continue after\n            // any number of blank lines.\n            if (cur.type.is(\"Block\")) {\n                if (NotLast.indexOf(cur.type.id) < 0) {\n                    end = cur.to - off;\n                    blockI = cx.block.children.length;\n                }\n                else {\n                    end = prevEnd;\n                    blockI = prevI;\n                    prevEnd = cur.to - off;\n                    prevI = cx.block.children.length;\n                }\n            }\n            if (!cur.nextSibling())\n                break;\n        }\n        while (cx.block.children.length > blockI) {\n            cx.block.children.pop();\n            cx.block.positions.pop();\n        }\n        return end - start;\n    }\n}\nconst markdownHighlighting = styleTags({\n    \"Blockquote/...\": tags.quote,\n    HorizontalRule: tags.contentSeparator,\n    \"ATXHeading1/... SetextHeading1/...\": tags.heading1,\n    \"ATXHeading2/... SetextHeading2/...\": tags.heading2,\n    \"ATXHeading3/...\": tags.heading3,\n    \"ATXHeading4/...\": tags.heading4,\n    \"ATXHeading5/...\": tags.heading5,\n    \"ATXHeading6/...\": tags.heading6,\n    \"Comment CommentBlock\": tags.comment,\n    Escape: tags.escape,\n    Entity: tags.character,\n    \"Emphasis/...\": tags.emphasis,\n    \"StrongEmphasis/...\": tags.strong,\n    \"Link/... Image/...\": tags.link,\n    \"OrderedList/... BulletList/...\": tags.list,\n    \"BlockQuote/...\": tags.quote,\n    \"InlineCode CodeText\": tags.monospace,\n    URL: tags.url,\n    \"HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark\": tags.processingInstruction,\n    \"CodeInfo LinkLabel\": tags.labelName,\n    LinkTitle: tags.string,\n    Paragraph: tags.content\n});\n/// The default CommonMark parser.\nconst parser = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);\n\nfunction leftOverSpace(node, from, to) {\n    let ranges = [];\n    for (let n = node.firstChild, pos = from;; n = n.nextSibling) {\n        let nextPos = n ? n.from : to;\n        if (nextPos > pos)\n            ranges.push({ from: pos, to: nextPos });\n        if (!n)\n            break;\n        pos = n.to;\n    }\n    return ranges;\n}\n/// Create a Markdown extension to enable nested parsing on code\n/// blocks and/or embedded HTML.\nfunction parseCode(config) {\n    let { codeParser, htmlParser } = config;\n    let wrap = parseMixed((node, input) => {\n        let id = node.type.id;\n        if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {\n            let info = \"\";\n            if (id == Type.FencedCode) {\n                let infoNode = node.node.getChild(Type.CodeInfo);\n                if (infoNode)\n                    info = input.read(infoNode.from, infoNode.to);\n            }\n            let parser = codeParser(info);\n            if (parser)\n                return { parser, overlay: node => node.type.id == Type.CodeText };\n        }\n        else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {\n            return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };\n        }\n        return null;\n    });\n    return { wrap };\n}\n\nconst StrikethroughDelim = { resolve: \"Strikethrough\", mark: \"StrikethroughMark\" };\n/// An extension that implements\n/// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)\n/// Strikethrough syntax using `~~` delimiters.\nconst Strikethrough = {\n    defineNodes: [{\n            name: \"Strikethrough\",\n            style: { \"Strikethrough/...\": tags.strikethrough }\n        }, {\n            name: \"StrikethroughMark\",\n            style: tags.processingInstruction\n        }],\n    parseInline: [{\n            name: \"Strikethrough\",\n            parse(cx, next, pos) {\n                if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)\n                    return -1;\n                let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);\n                let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n                let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n                return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));\n            },\n            after: \"Emphasis\"\n        }]\n};\nfunction parseRow(cx, line, startI = 0, elts, offset = 0) {\n    let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;\n    let parseCell = () => {\n        elts.push(cx.elt(\"TableCell\", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));\n    };\n    for (let i = startI; i < line.length; i++) {\n        let next = line.charCodeAt(i);\n        if (next == 124 /* '|' */ && !esc) {\n            if (!first || cellStart > -1)\n                count++;\n            first = false;\n            if (elts) {\n                if (cellStart > -1)\n                    parseCell();\n                elts.push(cx.elt(\"TableDelimiter\", i + offset, i + offset + 1));\n            }\n            cellStart = cellEnd = -1;\n        }\n        else if (esc || next != 32 && next != 9) {\n            if (cellStart < 0)\n                cellStart = i;\n            cellEnd = i + 1;\n        }\n        esc = !esc && next == 92;\n    }\n    if (cellStart > -1) {\n        count++;\n        if (elts)\n            parseCell();\n    }\n    return count;\n}\nfunction hasPipe(str, start) {\n    for (let i = start; i < str.length; i++) {\n        let next = str.charCodeAt(i);\n        if (next == 124 /* '|' */)\n            return true;\n        if (next == 92 /* '\\\\' */)\n            i++;\n    }\n    return false;\n}\nconst delimiterLine = /^\\|?(\\s*:?-+:?\\s*\\|)+(\\s*:?-+:?\\s*)?$/;\nclass TableParser {\n    constructor() {\n        // Null means we haven't seen the second line yet, false means this\n        // isn't a table, and an array means this is a table and we've\n        // parsed the given rows so far.\n        this.rows = null;\n    }\n    nextLine(cx, line, leaf) {\n        if (this.rows == null) { // Second line\n            this.rows = false;\n            let lineText;\n            if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&\n                delimiterLine.test(lineText = line.text.slice(line.pos))) {\n                let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);\n                if (firstCount == parseRow(cx, lineText, line.pos))\n                    this.rows = [cx.elt(\"TableHeader\", leaf.start, leaf.start + leaf.content.length, firstRow),\n                        cx.elt(\"TableDelimiter\", cx.lineStart + line.pos, cx.lineStart + line.text.length)];\n            }\n        }\n        else if (this.rows) { // Line after the second\n            let content = [];\n            parseRow(cx, line.text, line.pos, content, cx.lineStart);\n            this.rows.push(cx.elt(\"TableRow\", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));\n        }\n        return false;\n    }\n    finish(cx, leaf) {\n        if (!this.rows)\n            return false;\n        cx.addLeafElement(leaf, cx.elt(\"Table\", leaf.start, leaf.start + leaf.content.length, this.rows));\n        return true;\n    }\n}\n/// This extension provides\n/// [GFM-style](https://github.github.com/gfm/#tables-extension-)\n/// tables, using syntax like this:\n///\n/// ```\n/// | head 1 | head 2 |\n/// | ---    | ---    |\n/// | cell 1 | cell 2 |\n/// ```\nconst Table = {\n    defineNodes: [\n        { name: \"Table\", block: true },\n        { name: \"TableHeader\", style: { \"TableHeader/...\": tags.heading } },\n        \"TableRow\",\n        { name: \"TableCell\", style: tags.content },\n        { name: \"TableDelimiter\", style: tags.processingInstruction },\n    ],\n    parseBlock: [{\n            name: \"Table\",\n            leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },\n            endLeaf(cx, line, leaf) {\n                if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))\n                    return false;\n                let next = cx.scanLine(cx.absoluteLineEnd + 1).text;\n                return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);\n            },\n            before: \"SetextHeading\"\n        }]\n};\nclass TaskParser {\n    nextLine() { return false; }\n    finish(cx, leaf) {\n        cx.addLeafElement(leaf, cx.elt(\"Task\", leaf.start, leaf.start + leaf.content.length, [\n            cx.elt(\"TaskMarker\", leaf.start, leaf.start + 3),\n            ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)\n        ]));\n        return true;\n    }\n}\n/// Extension providing\n/// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)\n/// task list items, where list items can be prefixed with `[ ]` or\n/// `[x]` to add a checkbox.\nconst TaskList = {\n    defineNodes: [\n        { name: \"Task\", block: true, style: tags.list },\n        { name: \"TaskMarker\", style: tags.atom }\n    ],\n    parseBlock: [{\n            name: \"TaskList\",\n            leaf(cx, leaf) {\n                return /^\\[[ xX]\\]/.test(leaf.content) && cx.parentType().name == \"ListItem\" ? new TaskParser : null;\n            },\n            after: \"SetextHeading\"\n        }]\n};\n/// Extension bundle containing [`Table`](#Table),\n/// [`TaskList`](#TaskList) and [`Strikethrough`](#Strikethrough).\nconst GFM = [Table, TaskList, Strikethrough];\nfunction parseSubSuper(ch, node, mark) {\n    return (cx, next, pos) => {\n        if (next != ch || cx.char(pos + 1) == ch)\n            return -1;\n        let elts = [cx.elt(mark, pos, pos + 1)];\n        for (let i = pos + 1; i < cx.end; i++) {\n            let next = cx.char(i);\n            if (next == ch)\n                return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));\n            if (next == 92 /* '\\\\' */)\n                elts.push(cx.elt(\"Escape\", i, i++ + 2));\n            if (space(next))\n                break;\n        }\n        return -1;\n    };\n}\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// superscript using `^` markers.\nconst Superscript = {\n    defineNodes: [\n        { name: \"Superscript\", style: tags.special(tags.content) },\n        { name: \"SuperscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Superscript\",\n            parse: parseSubSuper(94 /* '^' */, \"Superscript\", \"SuperscriptMark\")\n        }]\n};\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// subscript using `~` markers.\nconst Subscript = {\n    defineNodes: [\n        { name: \"Subscript\", style: tags.special(tags.content) },\n        { name: \"SubscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Subscript\",\n            parse: parseSubSuper(126 /* '~' */, \"Subscript\", \"SubscriptMark\")\n        }]\n};\n/// Extension that parses two colons with only letters, underscores,\n/// and numbers between them as `Emoji` nodes.\nconst Emoji = {\n    defineNodes: [{ name: \"Emoji\", style: tags.character }],\n    parseInline: [{\n            name: \"Emoji\",\n            parse(cx, next, pos) {\n                let match;\n                if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))\n                    return -1;\n                return cx.addElement(cx.elt(\"Emoji\", pos, pos + 1 + match[0].length));\n            }\n        }]\n};\n\nexport { BlockContext, Element, Emoji, GFM, InlineContext, LeafBlock, Line, MarkdownParser, Strikethrough, Subscript, Superscript, Table, TaskList, parseCode, parser };\n","import { EditorSelection, Prec } from '@codemirror/state';\nimport { keymap } from '@codemirror/view';\nimport { defineLanguageFacet, foldNodeProp, indentNodeProp, languageDataProp, Language, LanguageDescription, ParseContext, syntaxTree, LanguageSupport } from '@codemirror/language';\nimport { parser, GFM, Subscript, Superscript, Emoji, MarkdownParser, parseCode } from '@lezer/markdown';\nimport { html } from '@codemirror/lang-html';\n\nconst data = /*@__PURE__*/defineLanguageFacet({ block: { open: \"<!--\", close: \"-->\" } });\nconst commonmark = /*@__PURE__*/parser.configure({\n    props: [\n        /*@__PURE__*/foldNodeProp.add(type => {\n            if (!type.is(\"Block\") || type.is(\"Document\"))\n                return undefined;\n            return (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });\n        }),\n        /*@__PURE__*/indentNodeProp.add({\n            Document: () => null\n        }),\n        /*@__PURE__*/languageDataProp.add({\n            Document: data\n        })\n    ]\n});\nfunction mkLang(parser) {\n    return new Language(data, parser, [], \"markdown\");\n}\n/**\nLanguage support for strict CommonMark.\n*/\nconst commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);\nconst extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji]);\n/**\nLanguage support for [GFM](https://github.github.com/gfm/) plus\nsubscript, superscript, and emoji syntax.\n*/\nconst markdownLanguage = /*@__PURE__*/mkLang(extended);\nfunction getCodeParser(languages, defaultLanguage) {\n    return (info) => {\n        if (info && languages) {\n            let found = null;\n            // Strip anything after whitespace\n            info = /\\S*/.exec(info)[0];\n            if (typeof languages == \"function\")\n                found = languages(info);\n            else\n                found = LanguageDescription.matchLanguageName(languages, info, true);\n            if (found instanceof LanguageDescription)\n                return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());\n            else if (found)\n                return found.parser;\n        }\n        return defaultLanguage ? defaultLanguage.parser : null;\n    };\n}\n\nclass Context {\n    constructor(node, from, to, spaceBefore, spaceAfter, type, item) {\n        this.node = node;\n        this.from = from;\n        this.to = to;\n        this.spaceBefore = spaceBefore;\n        this.spaceAfter = spaceAfter;\n        this.type = type;\n        this.item = item;\n    }\n    blank(maxWidth, trailing = true) {\n        let result = this.spaceBefore + (this.node.name == \"Blockquote\" ? \">\" : \"\");\n        if (maxWidth != null) {\n            while (result.length < maxWidth)\n                result += \" \";\n            return result;\n        }\n        else {\n            for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)\n                result += \" \";\n            return result + (trailing ? this.spaceAfter : \"\");\n        }\n    }\n    marker(doc, add) {\n        let number = this.node.name == \"OrderedList\" ? String((+itemNumber(this.item, doc)[2] + add)) : \"\";\n        return this.spaceBefore + number + this.type + this.spaceAfter;\n    }\n}\nfunction getContext(node, doc) {\n    let nodes = [];\n    for (let cur = node; cur && cur.name != \"Document\"; cur = cur.parent) {\n        if (cur.name == \"ListItem\" || cur.name == \"Blockquote\" || cur.name == \"FencedCode\")\n            nodes.push(cur);\n    }\n    let context = [];\n    for (let i = nodes.length - 1; i >= 0; i--) {\n        let node = nodes[i], match;\n        let line = doc.lineAt(node.from), startPos = node.from - line.from;\n        if (node.name == \"FencedCode\") {\n            context.push(new Context(node, startPos, startPos, \"\", \"\", \"\", null));\n        }\n        else if (node.name == \"Blockquote\" && (match = /^[ \\t]*>( ?)/.exec(line.text.slice(startPos)))) {\n            context.push(new Context(node, startPos, startPos + match[0].length, \"\", match[1], \">\", null));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"OrderedList\" &&\n            (match = /^([ \\t]*)\\d+([.)])([ \\t]*)/.exec(line.text.slice(startPos)))) {\n            let after = match[3], len = match[0].length;\n            if (after.length >= 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, match[2], node));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"BulletList\" &&\n            (match = /^([ \\t]*)([-+*])([ \\t]{1,4}\\[[ xX]\\])?([ \\t]+)/.exec(line.text.slice(startPos)))) {\n            let after = match[4], len = match[0].length;\n            if (after.length > 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            let type = match[2];\n            if (match[3])\n                type += match[3].replace(/[xX]/, ' ');\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, type, node));\n        }\n    }\n    return context;\n}\nfunction itemNumber(item, doc) {\n    return /^(\\s*)(\\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));\n}\nfunction renumberList(after, doc, changes, offset = 0) {\n    for (let prev = -1, node = after;;) {\n        if (node.name == \"ListItem\") {\n            let m = itemNumber(node, doc);\n            let number = +m[2];\n            if (prev >= 0) {\n                if (number != prev + 1)\n                    return;\n                changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });\n            }\n            prev = number;\n        }\n        let next = node.nextSibling;\n        if (!next)\n            break;\n        node = next;\n    }\n}\n/**\nThis command, when invoked in Markdown context with cursor\nselection(s), will create a new line with the markup for\nblockquotes and lists that were active on the old line. If the\ncursor was directly after the end of the markup for the old line,\ntrailing whitespace and list markers are removed from that line.\n\nThe command does nothing in non-Markdown context, so it should\nnot be used as the only binding for Enter (even in a Markdown\ndocument, HTML and code regions might use a different language).\n*/\nconst insertNewlineContinueMarkup = ({ state, dispatch }) => {\n    let tree = syntaxTree(state), { doc } = state;\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty || !markdownLanguage.isActiveAt(state, range.from))\n            return dont = { range };\n        let pos = range.from, line = doc.lineAt(pos);\n        let context = getContext(tree.resolveInner(pos, -1), doc);\n        while (context.length && context[context.length - 1].from > pos - line.from)\n            context.pop();\n        if (!context.length)\n            return dont = { range };\n        let inner = context[context.length - 1];\n        if (inner.to - inner.spaceAfter.length > pos - line.from)\n            return dont = { range };\n        let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\\S/.test(line.text.slice(inner.to));\n        // Empty line in list\n        if (inner.item && emptyLine) {\n            // First list item or blank line before: delete a level of markup\n            if (inner.node.firstChild.to >= pos ||\n                line.from > 0 && !/[^\\s>]/.test(doc.lineAt(line.from - 1).text)) {\n                let next = context.length > 1 ? context[context.length - 2] : null;\n                let delTo, insert = \"\";\n                if (next && next.item) { // Re-add marker for the list at the next level\n                    delTo = line.from + next.from;\n                    insert = next.marker(doc, 1);\n                }\n                else {\n                    delTo = line.from + (next ? next.to : 0);\n                }\n                let changes = [{ from: delTo, to: pos, insert }];\n                if (inner.node.name == \"OrderedList\")\n                    renumberList(inner.item, doc, changes, -2);\n                if (next && next.node.name == \"OrderedList\")\n                    renumberList(next.item, doc, changes);\n                return { range: EditorSelection.cursor(delTo + insert.length), changes };\n            }\n            else { // Move this line down\n                let insert = \"\";\n                for (let i = 0, e = context.length - 2; i <= e; i++) {\n                    insert += context[i].blank(i < e ? context[i + 1].from - insert.length : null, i < e);\n                }\n                insert += state.lineBreak;\n                return { range: EditorSelection.cursor(pos + insert.length), changes: { from: line.from, insert } };\n            }\n        }\n        if (inner.node.name == \"Blockquote\" && emptyLine && line.from) {\n            let prevLine = doc.lineAt(line.from - 1), quoted = />\\s*$/.exec(prevLine.text);\n            // Two aligned empty quoted lines in a row\n            if (quoted && quoted.index == inner.from) {\n                let changes = state.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },\n                    { from: line.from + inner.from, to: line.to }]);\n                return { range: range.map(changes), changes };\n            }\n        }\n        let changes = [];\n        if (inner.node.name == \"OrderedList\")\n            renumberList(inner.item, doc, changes);\n        let continued = inner.item && inner.item.from < line.from;\n        let insert = \"\";\n        // If not dedented\n        if (!continued || /^[\\s\\d.)\\-+*>]*/.exec(line.text)[0].length >= inner.to) {\n            for (let i = 0, e = context.length - 1; i <= e; i++) {\n                insert += i == e && !continued ? context[i].marker(doc, 1)\n                    : context[i].blank(i < e ? context[i + 1].from - insert.length : null);\n            }\n        }\n        let from = pos;\n        while (from > line.from && /\\s/.test(line.text.charAt(from - line.from - 1)))\n            from--;\n        insert = state.lineBreak + insert;\n        changes.push({ from, to: pos, insert });\n        return { range: EditorSelection.cursor(from + insert.length), changes };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\nfunction isMark(node) {\n    return node.name == \"QuoteMark\" || node.name == \"ListMark\";\n}\nfunction contextNodeForDelete(tree, pos) {\n    let node = tree.resolveInner(pos, -1), scan = pos;\n    if (isMark(node)) {\n        scan = node.from;\n        node = node.parent;\n    }\n    for (let prev; prev = node.childBefore(scan);) {\n        if (isMark(prev)) {\n            scan = prev.from;\n        }\n        else if (prev.name == \"OrderedList\" || prev.name == \"BulletList\") {\n            node = prev.lastChild;\n            scan = node.to;\n        }\n        else {\n            break;\n        }\n    }\n    return node;\n}\n/**\nThis command will, when invoked in a Markdown context with the\ncursor directly after list or blockquote markup, delete one level\nof markup. When the markup is for a list, it will be replaced by\nspaces on the first invocation (a further invocation will delete\nthe spaces), to make it easy to continue a list.\n\nWhen not after Markdown block markup, this command will return\nfalse, so it is intended to be bound alongside other deletion\ncommands, with a higher precedence than the more generic commands.\n*/\nconst deleteMarkupBackward = ({ state, dispatch }) => {\n    let tree = syntaxTree(state);\n    let dont = null, changes = state.changeByRange(range => {\n        let pos = range.from, { doc } = state;\n        if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {\n            let line = doc.lineAt(pos);\n            let context = getContext(contextNodeForDelete(tree, pos), doc);\n            if (context.length) {\n                let inner = context[context.length - 1];\n                let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);\n                // Delete extra trailing space after markup\n                if (pos - line.from > spaceEnd && !/\\S/.test(line.text.slice(spaceEnd, pos - line.from)))\n                    return { range: EditorSelection.cursor(line.from + spaceEnd),\n                        changes: { from: line.from + spaceEnd, to: pos } };\n                if (pos - line.from == spaceEnd) {\n                    let start = line.from + inner.from;\n                    // Replace a list item marker with blank space\n                    if (inner.item && inner.node.from < inner.item.from && /\\S/.test(line.text.slice(inner.from, inner.to)))\n                        return { range, changes: { from: start, to: line.from + inner.to, insert: inner.blank(inner.to - inner.from) } };\n                    // Delete one level of indentation\n                    if (start < pos)\n                        return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };\n                }\n            }\n        }\n        return dont = { range };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"delete\" }));\n    return true;\n};\n\n/**\nA small keymap with Markdown-specific bindings. Binds Enter to\n[`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)\nand Backspace to\n[`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).\n*/\nconst markdownKeymap = [\n    { key: \"Enter\", run: insertNewlineContinueMarkup },\n    { key: \"Backspace\", run: deleteMarkupBackward }\n];\nconst htmlNoMatch = /*@__PURE__*/html({ matchClosingTags: false });\n/**\nMarkdown language support.\n*/\nfunction markdown(config = {}) {\n    let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage } = config;\n    if (!(parser instanceof MarkdownParser))\n        throw new RangeError(\"Base parser provided to `markdown` should be a Markdown parser\");\n    let extensions = config.extensions ? [config.extensions] : [];\n    let support = [htmlNoMatch.support], defaultCode;\n    if (defaultCodeLanguage instanceof LanguageSupport) {\n        support.push(defaultCodeLanguage.support);\n        defaultCode = defaultCodeLanguage.language;\n    }\n    else if (defaultCodeLanguage) {\n        defaultCode = defaultCodeLanguage;\n    }\n    let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;\n    extensions.push(parseCode({ codeParser, htmlParser: htmlNoMatch.language.parser }));\n    if (addKeymap)\n        support.push(Prec.high(keymap.of(markdownKeymap)));\n    return new LanguageSupport(mkLang(parser.configure(extensions)), support);\n}\n\nexport { commonmarkLanguage, deleteMarkupBackward, insertNewlineContinueMarkup, markdown, markdownKeymap, markdownLanguage };\n"],"names":["CompositeBlock","constructor","type","value","from","hash","end","children","positions","this","hashProp","NodeProp","contextHash","static","parentHash","addChild","child","pos","prop","Tree","length","push","toTree","nodeSet","last","Math","max","types","balance","makeTree","NodeType","none","Type","LeafBlock","start","content","marks","parsers","Line","text","baseIndent","basePos","depth","markers","indent","next","forward","forwardInner","newPos","skipSpace","countIndent","charCodeAt","reset","pop","moveBase","to","moveBaseColumn","findColumn","addMarker","elt","i","goal","scrub","result","slice","skipForList","bl","cx","line","block","stack","size","OrderedList","isOrderedList","isBulletList","BulletList","isHorizontalRule","DefaultSkipMarkup","Blockquote","QuoteMark","lineStart","space","ListItem","_cx","Document","ch","skipSpaceBack","isFencedCode","isBlockquote","breaking","count","isSetextUnderline","inList","isAtxHeading","EmptyLine","CommentEnd","ProcessingEnd","HTMLBlockStyle","isHTMLBlock","rest","e","test","getListIndent","indentAfter","indented","addCodeText","CodeText","DefaultBlockParsers","LinkReference","undefined","IndentedCode","base","pendingMarks","nextLine","m","codeStart","filter","concat","addNode","buffer","writeElements","finish","CodeBlock","FencedCode","fenceEnd","len","infoFrom","infoTo","CodeMark","CodeInfo","first","textStart","textEnd","prevLineEnd","startContext","HorizontalRule","newBase","ListMark","ATXHeading","off","endOfSpace","after","buf","write","HeaderMark","parser","parseInline","node","ATXHeading1","HTMLBlock","trailing","nodeType","CommentBlock","ProcessingInstructionBlock","SetextHeading","LinkReferenceParser","leaf","stage","elts","advance","complete","addLeafElement","nextStage","parseLinkLabel","LinkMark","skip","title","parseLinkTitle","titleEnd","lineEnd","parseURL","SetextHeadingParser","underline","underlineMark","SetextHeading1","SetextHeading2","DefaultLeafBlocks","_","DefaultEndLeaf","p","scanLineResult","BlockContext","input","fragments","ranges","atEnd","dontInject","Set","stoppedAt","rangeI","absoluteLineStart","absoluteLineEnd","create","FragmentCursor","readLine","parsedPos","finishContext","mark","reuseFragment","blockParsers","parse","leafBlockParsers","lines","stop","endLeafBlock","finishLeaf","stopAt","RangeError","moveTo","matches","taken","takeNodes","withoutGaps","gapFrom","gapTo","moveRangeI","parentType","scanLine","r","lineChunkAt","textOffset","nextFrom","handler","skipContextMarkup","Error","chunk","lineChunks","eol","indexOf","startComposite","getNodeType","addElement","injectMarks","top","addGaps","tree","injectGaps","topNode","inline","Paragraph","TreeElement","Buffer","offset","dont","has","rangeEnd","movePastNext","upto","inclusive","firstChild","nextSibling","propValues","MarkdownParser","Parser","blockNames","inlineParsers","inlineNames","wrappers","super","nodeTypes","Object","t","name","id","createParse","w","configure","spec","config","resolveConfig","nonEmpty","defineNodes","assign","styles","s","composite","style","some","group","define","props","Array","isArray","Tag","NodeSet","extend","styleTags","remove","rm","parseBlock","found","before","findName","splice","endLeaf","wrap","InlineContext","outer","char","token","resolveMarkers","a","conf","conc","b","wrapA","wrapB","inner","names","Escape","nodes","writeTo","build","reused","topID","Element","startOff","EmphasisUnderscore","resolve","EmphasisAsterisk","LinkStart","ImageStart","InlineDelimiter","side","Escapable","Punctuation","RegExp","DefaultInline","escaped","append","Entity","exec","InlineCode","curSize","HTMLTag","url","URL","comment","Comment","procInst","ProcessingInstruction","Emphasis","pBefore","pAfter","sBefore","sAfter","leftFlanking","rightFlanking","canOpen","canClose","HardBreak","Link","Image","LinkEnd","parts","part","takeContent","link","finishLink","j","startPos","endPos","unshift","dest","label","LinkTitle","requireNonWS","min","LinkLabel","addDelimiter","open","close","emp","closeSize","k","element","findOpeningDelimiter","startIndex","elements","eI","NotLast","fragment","fragmentEnd","cursor","nextFragment","read","c","rPos","parent","childAfter","cur","fragEnd","openEnd","blockI","prevEnd","prevI","isAnonymous","add","is","markdownHighlighting","tags","quote","contentSeparator","heading1","heading2","heading3","heading4","heading5","heading6","escape","character","emphasis","strong","list","monospace","processingInstruction","labelName","string","keys","map","n","leftOverSpace","nextPos","StrikethroughDelim","Strikethrough","strikethrough","parseRow","startI","cellStart","cellEnd","esc","parseCell","hasPipe","str","delimiterLine","TableParser","rows","lineText","firstRow","Table","heading","TaskParser","GFM","atom","parseSubSuper","Superscript","special","Subscript","Emoji","match","data","defineLanguageFacet","commonmark","foldNodeProp","state","doc","lineAt","indentNodeProp","languageDataProp","mkLang","Language","commonmarkLanguage","markdownLanguage","Context","spaceBefore","spaceAfter","item","blank","maxWidth","marker","number","String","itemNumber","getContext","context","replace","sliceString","renumberList","changes","prev","insert","insertNewlineContinueMarkup","dispatch","syntaxTree","changeByRange","range","empty","isActiveAt","resolveInner","emptyLine","delTo","EditorSelection","lineBreak","prevLine","quoted","index","continued","charAt","update","scrollIntoView","userEvent","isMark","deleteMarkupBackward","scan","childBefore","lastChild","contextNodeForDelete","spaceEnd","markdownKeymap","key","run","htmlNoMatch","html","matchClosingTags","markdown","codeLanguages","defaultCodeLanguage","addKeymap","defaultCode","extensions","support","LanguageSupport","language","codeParser","languages","defaultLanguage","info","LanguageDescription","matchLanguageName","ParseContext","getSkippingParser","load","htmlParser","parseMixed","overlay","infoNode","getChild","parseCode","Prec","high","keymap","of"],"mappings":"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"}