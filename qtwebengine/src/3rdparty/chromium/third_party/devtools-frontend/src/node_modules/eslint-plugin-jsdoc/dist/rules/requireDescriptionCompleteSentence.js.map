{"version":3,"file":"requireDescriptionCompleteSentence.js","names":["otherDescriptiveTags","Set","extractParagraphs","text","split","extractSentences","abbreviationsRegex","txt","replace","sentenceEndGrouping","puncts","matchAll","map","sentence","idx","test","isNewLinePrecededByAPeriod","lastLineEndsSentence","lines","some","line","isCapitalized","str","toUpperCase","isTable","charAt","capitalize","slice","validateDescription","description","reportOrig","jsdocNode","sourceCode","tag","newlineBeforeCapsAssumesBadSentenceEnd","paragraphs","paragraph","parIdx","sentences","fix","fixer","getText","pop","RegExp","escapeStringRegexp","filter","sentence_","beginning","reg","_$0","$1","replaceText","report","msg","tagObj","source","number","column","paragraphNoAbbreviations","iterateJsdoc","context","jsdoc","utils","options","abbreviations","length","abbreviation","join","getDescription","forEachPreferredTag","matchingJsdocTag","desc","name","getTagDescription","trim","tagsWithNames","getTagsByType","tags","tagsWithoutNames","filterTags","tagName","has","hasOptionTag","trimEnd","iterateAllJsdocs","meta","docs","url","fixable","schema","additionalProperties","properties","items","type"],"sources":["../../src/rules/requireDescriptionCompleteSentence.js"],"sourcesContent":["import escapeStringRegexp from 'escape-string-regexp';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst otherDescriptiveTags = new Set([\n  // 'copyright' and 'see' might be good addition, but as the former may be\n  //   sensitive text, and the latter may have just a link, they are not\n  //   included by default\n  'summary', 'file', 'fileoverview', 'overview', 'classdesc', 'todo',\n  'deprecated', 'throws', 'exception', 'yields', 'yield',\n]);\n\nconst extractParagraphs = (text) => {\n  return text.split(/(?<![;:])\\n\\n/u);\n};\n\nconst extractSentences = (text, abbreviationsRegex) => {\n  const txt = text\n\n    // Remove all {} tags.\n    .replace(/\\{[\\s\\S]*?\\}\\s*/gu, '')\n\n    // Remove custom abbreviations\n    .replace(abbreviationsRegex, '');\n\n  const sentenceEndGrouping = /([.?!])(?:\\s+|$)/ug;\n\n  const puncts = txt.matchAll(sentenceEndGrouping);\n\n  return txt\n\n    .split(/[.?!](?:\\s+|$)/u)\n\n    // Re-add the dot.\n    .map((sentence, idx) => {\n      return /^\\s*$/u.test(sentence) ? sentence : `${sentence}${puncts[idx] || ''}`;\n    });\n};\n\nconst isNewLinePrecededByAPeriod = (text) => {\n  let lastLineEndsSentence;\n\n  const lines = text.split('\\n');\n\n  return !lines.some((line) => {\n    if (lastLineEndsSentence === false && /^[A-Z][a-z]/u.test(line)) {\n      return true;\n    }\n\n    lastLineEndsSentence = /[.:?!|]$/u.test(line);\n\n    return false;\n  });\n};\n\nconst isCapitalized = (str) => {\n  return str[0] === str[0].toUpperCase();\n};\n\nconst isTable = (str) => {\n  return str.charAt() === '|';\n};\n\nconst capitalize = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nconst validateDescription = (\n  description, reportOrig, jsdocNode, abbreviationsRegex,\n  sourceCode, tag, newlineBeforeCapsAssumesBadSentenceEnd,\n) => {\n  if (!description || (/^\\n+$/u).test(description)) {\n    return false;\n  }\n\n  const paragraphs = extractParagraphs(description);\n\n  return paragraphs.some((paragraph, parIdx) => {\n    const sentences = extractSentences(paragraph, abbreviationsRegex);\n\n    const fix = (fixer) => {\n      let text = sourceCode.getText(jsdocNode);\n\n      if (!/[.:?!]$/u.test(paragraph)) {\n        const line = paragraph.split('\\n').pop();\n\n        text = text.replace(new RegExp(`${escapeStringRegexp(line)}$`, 'mu'), `${line}.`);\n      }\n\n      for (const sentence of sentences.filter((sentence_) => {\n        return !(/^\\s*$/u).test(sentence_) && !isCapitalized(sentence_) &&\n          !isTable(sentence_);\n      })) {\n        const beginning = sentence.split('\\n')[0];\n\n        if (tag.tag) {\n          const reg = new RegExp(`(@${escapeStringRegexp(tag.tag)}.*)${escapeStringRegexp(beginning)}`, 'u');\n\n          text = text.replace(reg, (_$0, $1) => {\n            return $1 + capitalize(beginning);\n          });\n        } else {\n          text = text.replace(new RegExp('((?:[.!?]|\\\\*|\\\\})\\\\s*)' + escapeStringRegexp(beginning), 'u'), '$1' + capitalize(beginning));\n        }\n      }\n\n      return fixer.replaceText(jsdocNode, text);\n    };\n\n    const report = (msg, fixer, tagObj) => {\n      if ('line' in tagObj) {\n        tagObj.line += parIdx * 2;\n      } else {\n        tagObj.source[0].number += parIdx * 2;\n      }\n\n      // Avoid errors if old column doesn't exist here\n      tagObj.column = 0;\n      reportOrig(msg, fixer, tagObj);\n    };\n\n    if (sentences.some((sentence) => {\n      return !(/^\\s*$/u).test(sentence) && !isCapitalized(sentence) && !isTable(sentence);\n    })) {\n      report('Sentence should start with an uppercase character.', fix, tag);\n    }\n\n    const paragraphNoAbbreviations = paragraph.replace(abbreviationsRegex, '');\n\n    if (!/[.!?|]\\s*$/u.test(paragraphNoAbbreviations)) {\n      report('Sentence must end with a period.', fix, tag);\n\n      return true;\n    }\n\n    if (newlineBeforeCapsAssumesBadSentenceEnd && !isNewLinePrecededByAPeriod(paragraphNoAbbreviations)) {\n      report('A line of text is started with an uppercase character, but preceding line does not end the sentence.', null, tag);\n\n      return true;\n    }\n\n    return false;\n  });\n};\n\nexport default iterateJsdoc(({\n  sourceCode,\n  context,\n  jsdoc,\n  report,\n  jsdocNode,\n  utils,\n}) => {\n  const options = context.options[0] || {};\n  const {\n    abbreviations = [],\n    newlineBeforeCapsAssumesBadSentenceEnd = false,\n  } = options;\n\n  const abbreviationsRegex = abbreviations.length ?\n    new RegExp('\\\\b' + abbreviations.map((abbreviation) => {\n      return escapeStringRegexp(abbreviation.replace(/\\.$/ug, '') + '.');\n    }).join('|') + '(?:$|\\\\s)', 'gu') :\n    '';\n\n  const {\n    description,\n  } = utils.getDescription();\n\n  if (validateDescription(description, report, jsdocNode, abbreviationsRegex, sourceCode, {\n    line: jsdoc.source[0].number + 1,\n  }, newlineBeforeCapsAssumesBadSentenceEnd)) {\n    return;\n  }\n\n  utils.forEachPreferredTag('description', (matchingJsdocTag) => {\n    const desc = `${matchingJsdocTag.name} ${utils.getTagDescription(matchingJsdocTag)}`.trim();\n    validateDescription(desc, report, jsdocNode, abbreviationsRegex, sourceCode, matchingJsdocTag, newlineBeforeCapsAssumesBadSentenceEnd);\n  }, true);\n\n  const {\n    tagsWithNames,\n  } = utils.getTagsByType(jsdoc.tags);\n  const tagsWithoutNames = utils.filterTags(({\n    tag: tagName,\n  }) => {\n    return otherDescriptiveTags.has(tagName) ||\n      utils.hasOptionTag(tagName) && !tagsWithNames.some(({\n        tag,\n      }) => {\n        // If user accidentally adds tags with names (or like `returns`\n        //  get parsed as having names), do not add to this list\n        return tag === tagName;\n      });\n  });\n\n  tagsWithNames.some((tag) => {\n    const desc = utils.getTagDescription(tag).replace(/^- /u, '').trimEnd();\n\n    return validateDescription(desc, report, jsdocNode, abbreviationsRegex, sourceCode, tag, newlineBeforeCapsAssumesBadSentenceEnd);\n  });\n\n  tagsWithoutNames.some((tag) => {\n    const desc = `${tag.name} ${utils.getTagDescription(tag)}`.trim();\n\n    return validateDescription(desc, report, jsdocNode, abbreviationsRegex, sourceCode, tag, newlineBeforeCapsAssumesBadSentenceEnd);\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Requires that block description, explicit `@description`, and `@param`/`@returns` tag descriptions are written in complete sentences.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-require-description-complete-sentence',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          abbreviations: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n          newlineBeforeCapsAssumesBadSentenceEnd: {\n            type: 'boolean',\n          },\n          tags: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"mappings":"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"}