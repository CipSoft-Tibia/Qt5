/**
 * Copyright 2023 Google LLC.
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import type Protocol from 'devtools-protocol';
import { Network } from '../../../protocol/protocol.js';
import { DefaultMap } from '../../../utils/DefaultMap.js';
import type { EventManager } from '../events/EventManager.js';
import { NetworkRequest } from './NetworkRequest.js';
/** Stores network and intercept maps. */
export declare class NetworkStorage {
    #private;
    constructor(eventManager: EventManager);
    get requestMap(): DefaultMap<string, NetworkRequest>;
    disposeRequestMap(): void;
    /**
     * Adds the given entry to the intercept map.
     * URL patterns are assumed to be parsed.
     *
     * @return The intercept ID.
     */
    addIntercept(value: {
        urlPatterns: Network.UrlPattern[];
        phases: Network.InterceptPhase[];
    }): Network.Intercept;
    /**
     * Removes the given intercept from the intercept map.
     * Throws NoSuchInterceptException if the intercept does not exist.
     */
    removeIntercept(intercept: Network.Intercept): void;
    /** Gets parameters for CDP 'Fetch.enable' command from the intercept map. */
    getFetchEnableParams(): Protocol.Fetch.EnableRequest;
    /** Converts a URL pattern from the spec to a CDP URL pattern. */
    static cdpFromSpecUrlPattern(urlPattern: Network.UrlPattern): string;
    static buildUrlPatternString({ protocol, hostname, port, pathname, search, }: Network.UrlPatternPattern): string;
    /**
     * Maps spec Network.InterceptPhase to CDP Fetch.RequestStage.
     * AuthRequired has no CDP equivalent..
     */
    static requestStageFromPhase(phase: Network.InterceptPhase): Protocol.Fetch.RequestStage;
    get blockedRequestMap(): Map<string, {
        request: string;
        phase: Network.InterceptPhase;
        response: Network.ResponseData;
    }>;
}
