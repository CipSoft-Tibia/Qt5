// Copyright 2020 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by 'tools/src/cmd/gen' using the template:
//   src/tint/lang/core/builtin_value.h.tmpl
//
// To regenerate run: './tools/run gen'
//
//                       Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#ifndef SRC_TINT_LANG_CORE_BUILTIN_VALUE_H_
#define SRC_TINT_LANG_CORE_BUILTIN_VALUE_H_

#include <cstdint>

#include "src/tint/utils/traits/traits.h"

namespace tint::core {

/// Builtin value defined with `@builtin(<name>)`.
enum class BuiltinValue : uint8_t {
    kUndefined,
    kPointSize,
    kFragDepth,
    kFrontFacing,
    kGlobalInvocationId,
    kInstanceIndex,
    kLocalInvocationId,
    kLocalInvocationIndex,
    kNumWorkgroups,
    kPosition,
    kSampleIndex,
    kSampleMask,
    kSubgroupInvocationId,
    kSubgroupSize,
    kVertexIndex,
    kWorkgroupId,
};

/// @param value the enum value
/// @returns the string for the given enum value
std::string_view ToString(BuiltinValue value);

/// @param out the stream to write to
/// @param value the BuiltinValue
/// @returns @p out so calls can be chained
template <typename STREAM, typename = traits::EnableIfIsOStream<STREAM>>
auto& operator<<(STREAM& out, BuiltinValue value) {
    return out << ToString(value);
}

/// ParseBuiltinValue parses a BuiltinValue from a string.
/// @param str the string to parse
/// @returns the parsed enum, or BuiltinValue::kUndefined if the string could not be parsed.
BuiltinValue ParseBuiltinValue(std::string_view str);

constexpr const char* kBuiltinValueStrings[] = {
    "__point_size",           "frag_depth",     "front_facing",
    "global_invocation_id",   "instance_index", "local_invocation_id",
    "local_invocation_index", "num_workgroups", "position",
    "sample_index",           "sample_mask",    "subgroup_invocation_id",
    "subgroup_size",          "vertex_index",   "workgroup_id",
};

}  // namespace tint::core

#endif  // SRC_TINT_LANG_CORE_BUILTIN_VALUE_H_
