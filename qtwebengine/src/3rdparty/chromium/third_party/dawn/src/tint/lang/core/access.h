// Copyright 2020 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by 'tools/src/cmd/gen' using the template:
//   src/tint/lang/core/access.h.tmpl
//
// To regenerate run: './tools/run gen'
//
//                       Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#ifndef SRC_TINT_LANG_CORE_ACCESS_H_
#define SRC_TINT_LANG_CORE_ACCESS_H_

#include <cstdint>

#include "src/tint/utils/traits/traits.h"

namespace tint::core {

/// Address space of a given pointer.
enum class Access : uint8_t {
    kUndefined,
    kRead,
    kReadWrite,
    kWrite,
};

/// @param value the enum value
/// @returns the string for the given enum value
std::string_view ToString(Access value);

/// @param out the stream to write to
/// @param value the Access
/// @returns @p out so calls can be chained
template <typename STREAM, typename = traits::EnableIfIsOStream<STREAM>>
auto& operator<<(STREAM& out, Access value) {
    return out << ToString(value);
}

/// ParseAccess parses a Access from a string.
/// @param str the string to parse
/// @returns the parsed enum, or Access::kUndefined if the string could not be parsed.
Access ParseAccess(std::string_view str);

constexpr const char* kAccessStrings[] = {
    "read",
    "read_write",
    "write",
};

}  // namespace tint::core

#endif  // SRC_TINT_LANG_CORE_ACCESS_H_
