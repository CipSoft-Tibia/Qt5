// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/connections_enums.proto

#include "proto/connections_enums.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace location {
namespace nearby {
namespace proto {
namespace connections {
}  // namespace connections
}  // namespace proto
}  // namespace nearby
}  // namespace location
namespace location {
namespace nearby {
namespace proto {
namespace connections {
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EventType_strings[7] = {};

static const char EventType_names[] =
  "CLIENT_SESSION"
  "ERROR_CODE"
  "START_CLIENT_SESSION"
  "START_STRATEGY_SESSION"
  "STOP_CLIENT_SESSION"
  "STOP_STRATEGY_SESSION"
  "UNKNOWN_EVENT_TYPE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EventType_entries[] = {
  { {EventType_names + 0, 14}, 1 },
  { {EventType_names + 14, 10}, 6 },
  { {EventType_names + 24, 20}, 2 },
  { {EventType_names + 44, 22}, 4 },
  { {EventType_names + 66, 19}, 3 },
  { {EventType_names + 85, 21}, 5 },
  { {EventType_names + 106, 18}, 0 },
};

static const int EventType_entries_by_number[] = {
  6, // 0 -> UNKNOWN_EVENT_TYPE
  0, // 1 -> CLIENT_SESSION
  2, // 2 -> START_CLIENT_SESSION
  4, // 3 -> STOP_CLIENT_SESSION
  3, // 4 -> START_STRATEGY_SESSION
  5, // 5 -> STOP_STRATEGY_SESSION
  1, // 6 -> ERROR_CODE
};

const std::string& EventType_Name(
    EventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EventType_entries,
          EventType_entries_by_number,
          7, EventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EventType_entries,
      EventType_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EventType_strings[idx].get();
}
bool EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EventType_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<EventType>(int_value);
  }
  return success;
}
bool ConnectionsStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ConnectionsStrategy_strings[6] = {};

static const char ConnectionsStrategy_names[] =
  "MDNS_LOCAL_WIFI"
  "P2P_CLUSTER"
  "P2P_POINT_TO_POINT"
  "P2P_STAR"
  "RADIO_P2P"
  "UNKNOWN_STRATEGY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ConnectionsStrategy_entries[] = {
  { {ConnectionsStrategy_names + 0, 15}, 1 },
  { {ConnectionsStrategy_names + 15, 11}, 3 },
  { {ConnectionsStrategy_names + 26, 18}, 5 },
  { {ConnectionsStrategy_names + 44, 8}, 4 },
  { {ConnectionsStrategy_names + 52, 9}, 2 },
  { {ConnectionsStrategy_names + 61, 16}, 0 },
};

static const int ConnectionsStrategy_entries_by_number[] = {
  5, // 0 -> UNKNOWN_STRATEGY
  0, // 1 -> MDNS_LOCAL_WIFI
  4, // 2 -> RADIO_P2P
  1, // 3 -> P2P_CLUSTER
  3, // 4 -> P2P_STAR
  2, // 5 -> P2P_POINT_TO_POINT
};

const std::string& ConnectionsStrategy_Name(
    ConnectionsStrategy value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ConnectionsStrategy_entries,
          ConnectionsStrategy_entries_by_number,
          6, ConnectionsStrategy_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ConnectionsStrategy_entries,
      ConnectionsStrategy_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ConnectionsStrategy_strings[idx].get();
}
bool ConnectionsStrategy_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectionsStrategy* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ConnectionsStrategy_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<ConnectionsStrategy>(int_value);
  }
  return success;
}
bool SessionRole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SessionRole_strings[3] = {};

static const char SessionRole_names[] =
  "ADVERTISER"
  "DISCOVERER"
  "UNKNOWN_SESSION_ROLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SessionRole_entries[] = {
  { {SessionRole_names + 0, 10}, 1 },
  { {SessionRole_names + 10, 10}, 2 },
  { {SessionRole_names + 20, 20}, 0 },
};

static const int SessionRole_entries_by_number[] = {
  2, // 0 -> UNKNOWN_SESSION_ROLE
  0, // 1 -> ADVERTISER
  1, // 2 -> DISCOVERER
};

const std::string& SessionRole_Name(
    SessionRole value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SessionRole_entries,
          SessionRole_entries_by_number,
          3, SessionRole_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SessionRole_entries,
      SessionRole_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SessionRole_strings[idx].get();
}
bool SessionRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SessionRole* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SessionRole_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SessionRole>(int_value);
  }
  return success;
}
bool Medium_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Medium_strings[12] = {};

static const char Medium_names[] =
  "BLE"
  "BLE_L2CAP"
  "BLUETOOTH"
  "MDNS"
  "NFC"
  "UNKNOWN_MEDIUM"
  "USB"
  "WEB_RTC"
  "WIFI_AWARE"
  "WIFI_DIRECT"
  "WIFI_HOTSPOT"
  "WIFI_LAN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Medium_entries[] = {
  { {Medium_names + 0, 3}, 4 },
  { {Medium_names + 3, 9}, 10 },
  { {Medium_names + 12, 9}, 2 },
  { {Medium_names + 21, 4}, 1 },
  { {Medium_names + 25, 3}, 7 },
  { {Medium_names + 28, 14}, 0 },
  { {Medium_names + 42, 3}, 11 },
  { {Medium_names + 45, 7}, 9 },
  { {Medium_names + 52, 10}, 6 },
  { {Medium_names + 62, 11}, 8 },
  { {Medium_names + 73, 12}, 3 },
  { {Medium_names + 85, 8}, 5 },
};

static const int Medium_entries_by_number[] = {
  5, // 0 -> UNKNOWN_MEDIUM
  3, // 1 -> MDNS
  2, // 2 -> BLUETOOTH
  10, // 3 -> WIFI_HOTSPOT
  0, // 4 -> BLE
  11, // 5 -> WIFI_LAN
  8, // 6 -> WIFI_AWARE
  4, // 7 -> NFC
  9, // 8 -> WIFI_DIRECT
  7, // 9 -> WEB_RTC
  1, // 10 -> BLE_L2CAP
  6, // 11 -> USB
};

const std::string& Medium_Name(
    Medium value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Medium_entries,
          Medium_entries_by_number,
          12, Medium_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Medium_entries,
      Medium_entries_by_number,
      12, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Medium_strings[idx].get();
}
bool Medium_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Medium* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Medium_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<Medium>(int_value);
  }
  return success;
}
bool ConnectionTechnology_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ConnectionTechnology_strings[12] = {};

static const char ConnectionTechnology_names[] =
  "CONNECTION_TECHNOLOGY_BLE_GATT"
  "CONNECTION_TECHNOLOGY_BLE_L2CAP"
  "CONNECTION_TECHNOLOGY_HOTSPOT_DIRECT"
  "CONNECTION_TECHNOLOGY_HOTSPOT_LOCALONLY"
  "CONNECTION_TECHNOLOGY_HOTSPOT_SOFTAP"
  "CONNECTION_TECHNOLOGY_UNKNOWN_TECHNOLOGY"
  "CONNECTION_TECHNOLOGY_WEBRTC_ADAPTER_TYPE_ANY"
  "CONNECTION_TECHNOLOGY_WEBRTC_ETHERNET"
  "CONNECTION_TECHNOLOGY_WEBRTC_LOOPBACK"
  "CONNECTION_TECHNOLOGY_WEBRTC_MOBILE"
  "CONNECTION_TECHNOLOGY_WEBRTC_VPN"
  "CONNECTION_TECHNOLOGY_WEBRTC_WIFI";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ConnectionTechnology_entries[] = {
  { {ConnectionTechnology_names + 0, 30}, 1 },
  { {ConnectionTechnology_names + 30, 31}, 2 },
  { {ConnectionTechnology_names + 61, 36}, 3 },
  { {ConnectionTechnology_names + 97, 39}, 4 },
  { {ConnectionTechnology_names + 136, 36}, 5 },
  { {ConnectionTechnology_names + 172, 40}, 0 },
  { {ConnectionTechnology_names + 212, 45}, 11 },
  { {ConnectionTechnology_names + 257, 37}, 8 },
  { {ConnectionTechnology_names + 294, 37}, 10 },
  { {ConnectionTechnology_names + 331, 35}, 7 },
  { {ConnectionTechnology_names + 366, 32}, 9 },
  { {ConnectionTechnology_names + 398, 33}, 6 },
};

static const int ConnectionTechnology_entries_by_number[] = {
  5, // 0 -> CONNECTION_TECHNOLOGY_UNKNOWN_TECHNOLOGY
  0, // 1 -> CONNECTION_TECHNOLOGY_BLE_GATT
  1, // 2 -> CONNECTION_TECHNOLOGY_BLE_L2CAP
  2, // 3 -> CONNECTION_TECHNOLOGY_HOTSPOT_DIRECT
  3, // 4 -> CONNECTION_TECHNOLOGY_HOTSPOT_LOCALONLY
  4, // 5 -> CONNECTION_TECHNOLOGY_HOTSPOT_SOFTAP
  11, // 6 -> CONNECTION_TECHNOLOGY_WEBRTC_WIFI
  9, // 7 -> CONNECTION_TECHNOLOGY_WEBRTC_MOBILE
  7, // 8 -> CONNECTION_TECHNOLOGY_WEBRTC_ETHERNET
  10, // 9 -> CONNECTION_TECHNOLOGY_WEBRTC_VPN
  8, // 10 -> CONNECTION_TECHNOLOGY_WEBRTC_LOOPBACK
  6, // 11 -> CONNECTION_TECHNOLOGY_WEBRTC_ADAPTER_TYPE_ANY
};

const std::string& ConnectionTechnology_Name(
    ConnectionTechnology value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ConnectionTechnology_entries,
          ConnectionTechnology_entries_by_number,
          12, ConnectionTechnology_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ConnectionTechnology_entries,
      ConnectionTechnology_entries_by_number,
      12, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ConnectionTechnology_strings[idx].get();
}
bool ConnectionTechnology_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectionTechnology* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ConnectionTechnology_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<ConnectionTechnology>(int_value);
  }
  return success;
}
bool ConnectionBand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ConnectionBand_strings[8] = {};

static const char ConnectionBand_names[] =
  "CONNECTION_BAND_CELLULAR_BAND_2G"
  "CONNECTION_BAND_CELLULAR_BAND_3G"
  "CONNECTION_BAND_CELLULAR_BAND_4G"
  "CONNECTION_BAND_CELLULAR_BAND_5G"
  "CONNECTION_BAND_UNKNOWN_BAND"
  "CONNECTION_BAND_WIFI_BAND_2GHZ"
  "CONNECTION_BAND_WIFI_BAND_5GHZ"
  "CONNECTION_BAND_WIFI_BAND_6GHZ";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ConnectionBand_entries[] = {
  { {ConnectionBand_names + 0, 32}, 4 },
  { {ConnectionBand_names + 32, 32}, 5 },
  { {ConnectionBand_names + 64, 32}, 6 },
  { {ConnectionBand_names + 96, 32}, 7 },
  { {ConnectionBand_names + 128, 28}, 0 },
  { {ConnectionBand_names + 156, 30}, 1 },
  { {ConnectionBand_names + 186, 30}, 2 },
  { {ConnectionBand_names + 216, 30}, 3 },
};

static const int ConnectionBand_entries_by_number[] = {
  4, // 0 -> CONNECTION_BAND_UNKNOWN_BAND
  5, // 1 -> CONNECTION_BAND_WIFI_BAND_2GHZ
  6, // 2 -> CONNECTION_BAND_WIFI_BAND_5GHZ
  7, // 3 -> CONNECTION_BAND_WIFI_BAND_6GHZ
  0, // 4 -> CONNECTION_BAND_CELLULAR_BAND_2G
  1, // 5 -> CONNECTION_BAND_CELLULAR_BAND_3G
  2, // 6 -> CONNECTION_BAND_CELLULAR_BAND_4G
  3, // 7 -> CONNECTION_BAND_CELLULAR_BAND_5G
};

const std::string& ConnectionBand_Name(
    ConnectionBand value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ConnectionBand_entries,
          ConnectionBand_entries_by_number,
          8, ConnectionBand_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ConnectionBand_entries,
      ConnectionBand_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ConnectionBand_strings[idx].get();
}
bool ConnectionBand_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectionBand* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ConnectionBand_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<ConnectionBand>(int_value);
  }
  return success;
}
bool ConnectionRequestResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ConnectionRequestResponse_strings[5] = {};

static const char ConnectionRequestResponse_names[] =
  "ACCEPTED"
  "IGNORED"
  "NOT_SENT"
  "REJECTED"
  "UNKNOWN_CONNECTION_REQUEST_RESPONSE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ConnectionRequestResponse_entries[] = {
  { {ConnectionRequestResponse_names + 0, 8}, 1 },
  { {ConnectionRequestResponse_names + 8, 7}, 3 },
  { {ConnectionRequestResponse_names + 15, 8}, 4 },
  { {ConnectionRequestResponse_names + 23, 8}, 2 },
  { {ConnectionRequestResponse_names + 31, 35}, 0 },
};

static const int ConnectionRequestResponse_entries_by_number[] = {
  4, // 0 -> UNKNOWN_CONNECTION_REQUEST_RESPONSE
  0, // 1 -> ACCEPTED
  3, // 2 -> REJECTED
  1, // 3 -> IGNORED
  2, // 4 -> NOT_SENT
};

const std::string& ConnectionRequestResponse_Name(
    ConnectionRequestResponse value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ConnectionRequestResponse_entries,
          ConnectionRequestResponse_entries_by_number,
          5, ConnectionRequestResponse_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ConnectionRequestResponse_entries,
      ConnectionRequestResponse_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ConnectionRequestResponse_strings[idx].get();
}
bool ConnectionRequestResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectionRequestResponse* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ConnectionRequestResponse_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ConnectionRequestResponse>(int_value);
  }
  return success;
}
bool ConnectionAttemptResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ConnectionAttemptResult_strings[4] = {};

static const char ConnectionAttemptResult_names[] =
  "RESULT_CANCELLED"
  "RESULT_ERROR"
  "RESULT_SUCCESS"
  "UNKNOWN_CONNECTION_ATTEMPT_RESULT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ConnectionAttemptResult_entries[] = {
  { {ConnectionAttemptResult_names + 0, 16}, 3 },
  { {ConnectionAttemptResult_names + 16, 12}, 2 },
  { {ConnectionAttemptResult_names + 28, 14}, 1 },
  { {ConnectionAttemptResult_names + 42, 33}, 0 },
};

static const int ConnectionAttemptResult_entries_by_number[] = {
  3, // 0 -> UNKNOWN_CONNECTION_ATTEMPT_RESULT
  2, // 1 -> RESULT_SUCCESS
  1, // 2 -> RESULT_ERROR
  0, // 3 -> RESULT_CANCELLED
};

const std::string& ConnectionAttemptResult_Name(
    ConnectionAttemptResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ConnectionAttemptResult_entries,
          ConnectionAttemptResult_entries_by_number,
          4, ConnectionAttemptResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ConnectionAttemptResult_entries,
      ConnectionAttemptResult_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ConnectionAttemptResult_strings[idx].get();
}
bool ConnectionAttemptResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectionAttemptResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ConnectionAttemptResult_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ConnectionAttemptResult>(int_value);
  }
  return success;
}
bool ConnectionAttemptDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ConnectionAttemptDirection_strings[3] = {};

static const char ConnectionAttemptDirection_names[] =
  "INCOMING"
  "OUTGOING"
  "UNKNOWN_CONNECTION_ATTEMPT_DIRECTION";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ConnectionAttemptDirection_entries[] = {
  { {ConnectionAttemptDirection_names + 0, 8}, 1 },
  { {ConnectionAttemptDirection_names + 8, 8}, 2 },
  { {ConnectionAttemptDirection_names + 16, 36}, 0 },
};

static const int ConnectionAttemptDirection_entries_by_number[] = {
  2, // 0 -> UNKNOWN_CONNECTION_ATTEMPT_DIRECTION
  0, // 1 -> INCOMING
  1, // 2 -> OUTGOING
};

const std::string& ConnectionAttemptDirection_Name(
    ConnectionAttemptDirection value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ConnectionAttemptDirection_entries,
          ConnectionAttemptDirection_entries_by_number,
          3, ConnectionAttemptDirection_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ConnectionAttemptDirection_entries,
      ConnectionAttemptDirection_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ConnectionAttemptDirection_strings[idx].get();
}
bool ConnectionAttemptDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectionAttemptDirection* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ConnectionAttemptDirection_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ConnectionAttemptDirection>(int_value);
  }
  return success;
}
bool ConnectionAttemptType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ConnectionAttemptType_strings[3] = {};

static const char ConnectionAttemptType_names[] =
  "INITIAL"
  "UNKNOWN_CONNECTION_ATTEMPT_TYPE"
  "UPGRADE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ConnectionAttemptType_entries[] = {
  { {ConnectionAttemptType_names + 0, 7}, 1 },
  { {ConnectionAttemptType_names + 7, 31}, 0 },
  { {ConnectionAttemptType_names + 38, 7}, 2 },
};

static const int ConnectionAttemptType_entries_by_number[] = {
  1, // 0 -> UNKNOWN_CONNECTION_ATTEMPT_TYPE
  0, // 1 -> INITIAL
  2, // 2 -> UPGRADE
};

const std::string& ConnectionAttemptType_Name(
    ConnectionAttemptType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ConnectionAttemptType_entries,
          ConnectionAttemptType_entries_by_number,
          3, ConnectionAttemptType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ConnectionAttemptType_entries,
      ConnectionAttemptType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ConnectionAttemptType_strings[idx].get();
}
bool ConnectionAttemptType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectionAttemptType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ConnectionAttemptType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ConnectionAttemptType>(int_value);
  }
  return success;
}
bool DisconnectionReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DisconnectionReason_strings[7] = {};

static const char DisconnectionReason_names[] =
  "IO_ERROR"
  "LOCAL_DISCONNECTION"
  "REMOTE_DISCONNECTION"
  "SHUTDOWN"
  "UNFINISHED"
  "UNKNOWN_DISCONNECTION_REASON"
  "UPGRADED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DisconnectionReason_entries[] = {
  { {DisconnectionReason_names + 0, 8}, 3 },
  { {DisconnectionReason_names + 8, 19}, 1 },
  { {DisconnectionReason_names + 27, 20}, 2 },
  { {DisconnectionReason_names + 47, 8}, 5 },
  { {DisconnectionReason_names + 55, 10}, 6 },
  { {DisconnectionReason_names + 65, 28}, 0 },
  { {DisconnectionReason_names + 93, 8}, 4 },
};

static const int DisconnectionReason_entries_by_number[] = {
  5, // 0 -> UNKNOWN_DISCONNECTION_REASON
  1, // 1 -> LOCAL_DISCONNECTION
  2, // 2 -> REMOTE_DISCONNECTION
  0, // 3 -> IO_ERROR
  6, // 4 -> UPGRADED
  3, // 5 -> SHUTDOWN
  4, // 6 -> UNFINISHED
};

const std::string& DisconnectionReason_Name(
    DisconnectionReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DisconnectionReason_entries,
          DisconnectionReason_entries_by_number,
          7, DisconnectionReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DisconnectionReason_entries,
      DisconnectionReason_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DisconnectionReason_strings[idx].get();
}
bool DisconnectionReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DisconnectionReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DisconnectionReason_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<DisconnectionReason>(int_value);
  }
  return success;
}
bool PayloadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PayloadType_strings[4] = {};

static const char PayloadType_names[] =
  "BYTES"
  "FILE"
  "STREAM"
  "UNKNOWN_PAYLOAD_TYPE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PayloadType_entries[] = {
  { {PayloadType_names + 0, 5}, 1 },
  { {PayloadType_names + 5, 4}, 2 },
  { {PayloadType_names + 9, 6}, 3 },
  { {PayloadType_names + 15, 20}, 0 },
};

static const int PayloadType_entries_by_number[] = {
  3, // 0 -> UNKNOWN_PAYLOAD_TYPE
  0, // 1 -> BYTES
  1, // 2 -> FILE
  2, // 3 -> STREAM
};

const std::string& PayloadType_Name(
    PayloadType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PayloadType_entries,
          PayloadType_entries_by_number,
          4, PayloadType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PayloadType_entries,
      PayloadType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PayloadType_strings[idx].get();
}
bool PayloadType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PayloadType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PayloadType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<PayloadType>(int_value);
  }
  return success;
}
bool PayloadStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PayloadStatus_strings[12] = {};

static const char PayloadStatus_names[] =
  "CONNECTION_CLOSED"
  "ENDPOINT_IO_ERROR"
  "ENDPOINT_UNENCRYPTED"
  "LOCAL_CANCELLATION"
  "LOCAL_CLIENT_DISCONNECTION"
  "LOCAL_ERROR"
  "MOVED_TO_NEW_MEDIUM"
  "REMOTE_CANCELLATION"
  "REMOTE_CLIENT_DISCONNECTION"
  "REMOTE_ERROR"
  "SUCCESS"
  "UNKNOWN_PAYLOAD_STATUS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PayloadStatus_entries[] = {
  { {PayloadStatus_names + 0, 17}, 6 },
  { {PayloadStatus_names + 17, 17}, 4 },
  { {PayloadStatus_names + 34, 20}, 9 },
  { {PayloadStatus_names + 54, 18}, 7 },
  { {PayloadStatus_names + 72, 26}, 10 },
  { {PayloadStatus_names + 98, 11}, 2 },
  { {PayloadStatus_names + 109, 19}, 5 },
  { {PayloadStatus_names + 128, 19}, 8 },
  { {PayloadStatus_names + 147, 27}, 11 },
  { {PayloadStatus_names + 174, 12}, 3 },
  { {PayloadStatus_names + 186, 7}, 1 },
  { {PayloadStatus_names + 193, 22}, 0 },
};

static const int PayloadStatus_entries_by_number[] = {
  11, // 0 -> UNKNOWN_PAYLOAD_STATUS
  10, // 1 -> SUCCESS
  5, // 2 -> LOCAL_ERROR
  9, // 3 -> REMOTE_ERROR
  1, // 4 -> ENDPOINT_IO_ERROR
  6, // 5 -> MOVED_TO_NEW_MEDIUM
  0, // 6 -> CONNECTION_CLOSED
  3, // 7 -> LOCAL_CANCELLATION
  7, // 8 -> REMOTE_CANCELLATION
  2, // 9 -> ENDPOINT_UNENCRYPTED
  4, // 10 -> LOCAL_CLIENT_DISCONNECTION
  8, // 11 -> REMOTE_CLIENT_DISCONNECTION
};

const std::string& PayloadStatus_Name(
    PayloadStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PayloadStatus_entries,
          PayloadStatus_entries_by_number,
          12, PayloadStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PayloadStatus_entries,
      PayloadStatus_entries_by_number,
      12, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PayloadStatus_strings[idx].get();
}
bool PayloadStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PayloadStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PayloadStatus_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<PayloadStatus>(int_value);
  }
  return success;
}
bool Bandwidth_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Bandwidth_strings[4] = {};

static const char Bandwidth_names[] =
  "BANDWIDTH_24_GHZ"
  "BANDWIDTH_5_GHZ"
  "BANDWIDTH_6_GHZ"
  "BANDWIDTH_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Bandwidth_entries[] = {
  { {Bandwidth_names + 0, 16}, 1 },
  { {Bandwidth_names + 16, 15}, 2 },
  { {Bandwidth_names + 31, 15}, 3 },
  { {Bandwidth_names + 46, 17}, 0 },
};

static const int Bandwidth_entries_by_number[] = {
  3, // 0 -> BANDWIDTH_UNKNOWN
  0, // 1 -> BANDWIDTH_24_GHZ
  1, // 2 -> BANDWIDTH_5_GHZ
  2, // 3 -> BANDWIDTH_6_GHZ
};

const std::string& Bandwidth_Name(
    Bandwidth value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Bandwidth_entries,
          Bandwidth_entries_by_number,
          4, Bandwidth_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Bandwidth_entries,
      Bandwidth_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Bandwidth_strings[idx].get();
}
bool Bandwidth_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bandwidth* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Bandwidth_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<Bandwidth>(int_value);
  }
  return success;
}
bool BandwidthUpgradeResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BandwidthUpgradeResult_strings[18] = {};

static const char BandwidthUpgradeResult_names[] =
  "ALREADY_ON_MEDIUM_ERROR"
  "ATTEMPT_SKIPPED"
  "BLUETOOTH_MEDIUM_ERROR"
  "CHANNEL_ERROR"
  "MEDIUM_ERROR"
  "PROTOCOL_ERROR"
  "REMOTE_CONNECTION_ERROR"
  "RESULT_IO_ERROR"
  "RESULT_REMOTE_ERROR"
  "UNFINISHED_ERROR"
  "UNKNOWN_BANDWIDTH_UPGRADE_RESULT"
  "UPGRADE_RESULT_ERROR"
  "UPGRADE_RESULT_SUCCESS"
  "WEB_RTC_MEDIUM_ERROR"
  "WIFI_AWARE_MEDIUM_ERROR"
  "WIFI_DIRECT_MEDIUM_ERROR"
  "WIFI_HOTSPOT_MEDIUM_ERROR"
  "WIFI_LAN_MEDIUM_ERROR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BandwidthUpgradeResult_entries[] = {
  { {BandwidthUpgradeResult_names + 0, 23}, 7 },
  { {BandwidthUpgradeResult_names + 23, 15}, 18 },
  { {BandwidthUpgradeResult_names + 38, 22}, 11 },
  { {BandwidthUpgradeResult_names + 60, 13}, 6 },
  { {BandwidthUpgradeResult_names + 73, 12}, 3 },
  { {BandwidthUpgradeResult_names + 85, 14}, 4 },
  { {BandwidthUpgradeResult_names + 99, 23}, 19 },
  { {BandwidthUpgradeResult_names + 122, 15}, 5 },
  { {BandwidthUpgradeResult_names + 137, 19}, 17 },
  { {BandwidthUpgradeResult_names + 156, 16}, 10 },
  { {BandwidthUpgradeResult_names + 172, 32}, 0 },
  { {BandwidthUpgradeResult_names + 204, 20}, 2 },
  { {BandwidthUpgradeResult_names + 224, 22}, 1 },
  { {BandwidthUpgradeResult_names + 246, 20}, 16 },
  { {BandwidthUpgradeResult_names + 266, 23}, 12 },
  { {BandwidthUpgradeResult_names + 289, 24}, 15 },
  { {BandwidthUpgradeResult_names + 313, 25}, 14 },
  { {BandwidthUpgradeResult_names + 338, 21}, 13 },
};

static const int BandwidthUpgradeResult_entries_by_number[] = {
  10, // 0 -> UNKNOWN_BANDWIDTH_UPGRADE_RESULT
  12, // 1 -> UPGRADE_RESULT_SUCCESS
  11, // 2 -> UPGRADE_RESULT_ERROR
  4, // 3 -> MEDIUM_ERROR
  5, // 4 -> PROTOCOL_ERROR
  7, // 5 -> RESULT_IO_ERROR
  3, // 6 -> CHANNEL_ERROR
  0, // 7 -> ALREADY_ON_MEDIUM_ERROR
  9, // 10 -> UNFINISHED_ERROR
  2, // 11 -> BLUETOOTH_MEDIUM_ERROR
  14, // 12 -> WIFI_AWARE_MEDIUM_ERROR
  17, // 13 -> WIFI_LAN_MEDIUM_ERROR
  16, // 14 -> WIFI_HOTSPOT_MEDIUM_ERROR
  15, // 15 -> WIFI_DIRECT_MEDIUM_ERROR
  13, // 16 -> WEB_RTC_MEDIUM_ERROR
  8, // 17 -> RESULT_REMOTE_ERROR
  1, // 18 -> ATTEMPT_SKIPPED
  6, // 19 -> REMOTE_CONNECTION_ERROR
};

const std::string& BandwidthUpgradeResult_Name(
    BandwidthUpgradeResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BandwidthUpgradeResult_entries,
          BandwidthUpgradeResult_entries_by_number,
          18, BandwidthUpgradeResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BandwidthUpgradeResult_entries,
      BandwidthUpgradeResult_entries_by_number,
      18, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BandwidthUpgradeResult_strings[idx].get();
}
bool BandwidthUpgradeResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BandwidthUpgradeResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BandwidthUpgradeResult_entries, 18, name, &int_value);
  if (success) {
    *value = static_cast<BandwidthUpgradeResult>(int_value);
  }
  return success;
}
bool BandwidthUpgradeErrorStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BandwidthUpgradeErrorStage_strings[35] = {};

static const char BandwidthUpgradeErrorStage_names[] =
  "BLUETOOTH_CONNECT_OUTGOING"
  "BLUETOOTH_LISTEN_INCOMING"
  "BLUETOOTH_OBTAIN_MAC_ADDRESS"
  "BLUETOOTH_PARSE_MAC_ADDRESS"
  "BLUETOOTH_SOCKET_CREATION"
  "CLIENT_INTRODUCTION"
  "LAST_WRITE_TO_PRIOR_CHANNEL"
  "NETWORK_AVAILABLE"
  "PRIOR_ENDPOINT_CHANNEL"
  "SAFE_TO_CLOSE_PRIOR_CHANNEL"
  "SOCKET_CREATION"
  "UNKNOWN_BANDWIDTH_UPGRADE_ERROR_STAGE"
  "UPGRADE_CANCEL"
  "UPGRADE_SUCCESS"
  "UPGRADE_UNFINISHED"
  "WEB_RTC_LISTEN_INCOMING"
  "WEB_RTC_SOCKET_CREATION"
  "WIFI_AWARE_CONNECT_TO_NETWORK"
  "WIFI_AWARE_LISTEN_INCOMING"
  "WIFI_AWARE_PUBLISH"
  "WIFI_AWARE_SOCKET_CREATION"
  "WIFI_AWARE_SUBSCRIBE"
  "WIFI_CONNECT_TO_HOTSPOT"
  "WIFI_DIRECT_CONNECT_OUTGOING"
  "WIFI_DIRECT_CREATE_GROUP"
  "WIFI_DIRECT_LISTEN_INCOMING"
  "WIFI_DIRECT_PARSE_DEVICE_ADDRESS"
  "WIFI_DIRECT_SOCKET_CREATION"
  "WIFI_HOTSPOT_SOCKET_CREATION"
  "WIFI_LAN_IP_ADDRESS"
  "WIFI_LAN_LISTEN_INCOMING"
  "WIFI_LAN_SOCKET_CONNECTION"
  "WIFI_LAN_SOCKET_CREATION"
  "WIFI_LISTEN_INCOMING"
  "WIFI_START_HOTSPOT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BandwidthUpgradeErrorStage_entries[] = {
  { {BandwidthUpgradeErrorStage_names + 0, 26}, 18 },
  { {BandwidthUpgradeErrorStage_names + 26, 25}, 16 },
  { {BandwidthUpgradeErrorStage_names + 51, 28}, 17 },
  { {BandwidthUpgradeErrorStage_names + 79, 27}, 19 },
  { {BandwidthUpgradeErrorStage_names + 106, 25}, 30 },
  { {BandwidthUpgradeErrorStage_names + 131, 19}, 1 },
  { {BandwidthUpgradeErrorStage_names + 150, 27}, 3 },
  { {BandwidthUpgradeErrorStage_names + 177, 17}, 2 },
  { {BandwidthUpgradeErrorStage_names + 194, 22}, 6 },
  { {BandwidthUpgradeErrorStage_names + 216, 27}, 4 },
  { {BandwidthUpgradeErrorStage_names + 243, 15}, 5 },
  { {BandwidthUpgradeErrorStage_names + 258, 37}, 0 },
  { {BandwidthUpgradeErrorStage_names + 295, 14}, 9 },
  { {BandwidthUpgradeErrorStage_names + 309, 15}, 8 },
  { {BandwidthUpgradeErrorStage_names + 324, 18}, 7 },
  { {BandwidthUpgradeErrorStage_names + 342, 23}, 34 },
  { {BandwidthUpgradeErrorStage_names + 365, 23}, 33 },
  { {BandwidthUpgradeErrorStage_names + 388, 29}, 23 },
  { {BandwidthUpgradeErrorStage_names + 417, 26}, 20 },
  { {BandwidthUpgradeErrorStage_names + 443, 18}, 21 },
  { {BandwidthUpgradeErrorStage_names + 461, 26}, 31 },
  { {BandwidthUpgradeErrorStage_names + 487, 20}, 22 },
  { {BandwidthUpgradeErrorStage_names + 507, 23}, 12 },
  { {BandwidthUpgradeErrorStage_names + 530, 28}, 26 },
  { {BandwidthUpgradeErrorStage_names + 558, 24}, 25 },
  { {BandwidthUpgradeErrorStage_names + 582, 27}, 24 },
  { {BandwidthUpgradeErrorStage_names + 609, 32}, 27 },
  { {BandwidthUpgradeErrorStage_names + 641, 27}, 32 },
  { {BandwidthUpgradeErrorStage_names + 668, 28}, 28 },
  { {BandwidthUpgradeErrorStage_names + 696, 19}, 14 },
  { {BandwidthUpgradeErrorStage_names + 715, 24}, 13 },
  { {BandwidthUpgradeErrorStage_names + 739, 26}, 15 },
  { {BandwidthUpgradeErrorStage_names + 765, 24}, 29 },
  { {BandwidthUpgradeErrorStage_names + 789, 20}, 11 },
  { {BandwidthUpgradeErrorStage_names + 809, 18}, 10 },
};

static const int BandwidthUpgradeErrorStage_entries_by_number[] = {
  11, // 0 -> UNKNOWN_BANDWIDTH_UPGRADE_ERROR_STAGE
  5, // 1 -> CLIENT_INTRODUCTION
  7, // 2 -> NETWORK_AVAILABLE
  6, // 3 -> LAST_WRITE_TO_PRIOR_CHANNEL
  9, // 4 -> SAFE_TO_CLOSE_PRIOR_CHANNEL
  10, // 5 -> SOCKET_CREATION
  8, // 6 -> PRIOR_ENDPOINT_CHANNEL
  14, // 7 -> UPGRADE_UNFINISHED
  13, // 8 -> UPGRADE_SUCCESS
  12, // 9 -> UPGRADE_CANCEL
  34, // 10 -> WIFI_START_HOTSPOT
  33, // 11 -> WIFI_LISTEN_INCOMING
  22, // 12 -> WIFI_CONNECT_TO_HOTSPOT
  30, // 13 -> WIFI_LAN_LISTEN_INCOMING
  29, // 14 -> WIFI_LAN_IP_ADDRESS
  31, // 15 -> WIFI_LAN_SOCKET_CONNECTION
  1, // 16 -> BLUETOOTH_LISTEN_INCOMING
  2, // 17 -> BLUETOOTH_OBTAIN_MAC_ADDRESS
  0, // 18 -> BLUETOOTH_CONNECT_OUTGOING
  3, // 19 -> BLUETOOTH_PARSE_MAC_ADDRESS
  18, // 20 -> WIFI_AWARE_LISTEN_INCOMING
  19, // 21 -> WIFI_AWARE_PUBLISH
  21, // 22 -> WIFI_AWARE_SUBSCRIBE
  17, // 23 -> WIFI_AWARE_CONNECT_TO_NETWORK
  25, // 24 -> WIFI_DIRECT_LISTEN_INCOMING
  24, // 25 -> WIFI_DIRECT_CREATE_GROUP
  23, // 26 -> WIFI_DIRECT_CONNECT_OUTGOING
  26, // 27 -> WIFI_DIRECT_PARSE_DEVICE_ADDRESS
  28, // 28 -> WIFI_HOTSPOT_SOCKET_CREATION
  32, // 29 -> WIFI_LAN_SOCKET_CREATION
  4, // 30 -> BLUETOOTH_SOCKET_CREATION
  20, // 31 -> WIFI_AWARE_SOCKET_CREATION
  27, // 32 -> WIFI_DIRECT_SOCKET_CREATION
  16, // 33 -> WEB_RTC_SOCKET_CREATION
  15, // 34 -> WEB_RTC_LISTEN_INCOMING
};

const std::string& BandwidthUpgradeErrorStage_Name(
    BandwidthUpgradeErrorStage value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BandwidthUpgradeErrorStage_entries,
          BandwidthUpgradeErrorStage_entries_by_number,
          35, BandwidthUpgradeErrorStage_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BandwidthUpgradeErrorStage_entries,
      BandwidthUpgradeErrorStage_entries_by_number,
      35, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BandwidthUpgradeErrorStage_strings[idx].get();
}
bool BandwidthUpgradeErrorStage_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BandwidthUpgradeErrorStage* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BandwidthUpgradeErrorStage_entries, 35, name, &int_value);
  if (success) {
    *value = static_cast<BandwidthUpgradeErrorStage>(int_value);
  }
  return success;
}
bool LogSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LogSource_strings[6] = {};

static const char LogSource_names[] =
  "BETA_TESTER_DEVICES"
  "DEBUG_DEVICES"
  "INTERNAL_DEVICES"
  "LAB_DEVICES"
  "OEM_DEVICES"
  "UNSPECIFIED_SOURCE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LogSource_entries[] = {
  { {LogSource_names + 0, 19}, 3 },
  { {LogSource_names + 19, 13}, 5 },
  { {LogSource_names + 32, 16}, 2 },
  { {LogSource_names + 48, 11}, 1 },
  { {LogSource_names + 59, 11}, 4 },
  { {LogSource_names + 70, 18}, 0 },
};

static const int LogSource_entries_by_number[] = {
  5, // 0 -> UNSPECIFIED_SOURCE
  3, // 1 -> LAB_DEVICES
  2, // 2 -> INTERNAL_DEVICES
  0, // 3 -> BETA_TESTER_DEVICES
  4, // 4 -> OEM_DEVICES
  1, // 5 -> DEBUG_DEVICES
};

const std::string& LogSource_Name(
    LogSource value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LogSource_entries,
          LogSource_entries_by_number,
          6, LogSource_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LogSource_entries,
      LogSource_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LogSource_strings[idx].get();
}
bool LogSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogSource* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LogSource_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<LogSource>(int_value);
  }
  return success;
}
bool PowerLevel_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PowerLevel_strings[5] = {};

static const char PowerLevel_names[] =
  "BALANCED_POWER"
  "HIGH_POWER"
  "LOW_POWER"
  "ULTRA_LOW_POWER"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PowerLevel_entries[] = {
  { {PowerLevel_names + 0, 14}, 2 },
  { {PowerLevel_names + 14, 10}, 3 },
  { {PowerLevel_names + 24, 9}, 1 },
  { {PowerLevel_names + 33, 15}, -1 },
  { {PowerLevel_names + 48, 11}, 0 },
};

static const int PowerLevel_entries_by_number[] = {
  3, // -1 -> ULTRA_LOW_POWER
  4, // 0 -> UNSPECIFIED
  2, // 1 -> LOW_POWER
  0, // 2 -> BALANCED_POWER
  1, // 3 -> HIGH_POWER
};

const std::string& PowerLevel_Name(
    PowerLevel value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PowerLevel_entries,
          PowerLevel_entries_by_number,
          5, PowerLevel_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PowerLevel_entries,
      PowerLevel_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PowerLevel_strings[idx].get();
}
bool PowerLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PowerLevel* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PowerLevel_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<PowerLevel>(int_value);
  }
  return success;
}
bool OperationResultCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OperationResultCategory_strings[10] = {};

static const char OperationResultCategory_names[] =
  "CATEGORY_CLIENT_CANCELLATION"
  "CATEGORY_CLIENT_ERROR"
  "CATEGORY_CONNECTIVITY_ERROR"
  "CATEGORY_DEVICE_STATE_ERROR"
  "CATEGORY_IO_ERROR"
  "CATEGORY_MEDIUM_UNAVAILABLE"
  "CATEGORY_MISCELLANEOUS"
  "CATEGORY_NEARBY_ERROR"
  "CATEGORY_SUCCESS"
  "CATEGORY_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OperationResultCategory_entries[] = {
  { {OperationResultCategory_names + 0, 28}, 2 },
  { {OperationResultCategory_names + 28, 21}, 5 },
  { {OperationResultCategory_names + 49, 27}, 7 },
  { {OperationResultCategory_names + 76, 27}, 4 },
  { {OperationResultCategory_names + 103, 17}, 9 },
  { {OperationResultCategory_names + 120, 27}, 3 },
  { {OperationResultCategory_names + 147, 22}, 8 },
  { {OperationResultCategory_names + 169, 21}, 6 },
  { {OperationResultCategory_names + 190, 16}, 1 },
  { {OperationResultCategory_names + 206, 16}, 0 },
};

static const int OperationResultCategory_entries_by_number[] = {
  9, // 0 -> CATEGORY_UNKNOWN
  8, // 1 -> CATEGORY_SUCCESS
  0, // 2 -> CATEGORY_CLIENT_CANCELLATION
  5, // 3 -> CATEGORY_MEDIUM_UNAVAILABLE
  3, // 4 -> CATEGORY_DEVICE_STATE_ERROR
  1, // 5 -> CATEGORY_CLIENT_ERROR
  7, // 6 -> CATEGORY_NEARBY_ERROR
  2, // 7 -> CATEGORY_CONNECTIVITY_ERROR
  6, // 8 -> CATEGORY_MISCELLANEOUS
  4, // 9 -> CATEGORY_IO_ERROR
};

const std::string& OperationResultCategory_Name(
    OperationResultCategory value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OperationResultCategory_entries,
          OperationResultCategory_entries_by_number,
          10, OperationResultCategory_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OperationResultCategory_entries,
      OperationResultCategory_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OperationResultCategory_strings[idx].get();
}
bool OperationResultCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OperationResultCategory* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OperationResultCategory_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<OperationResultCategory>(int_value);
  }
  return success;
}
bool OperationResultDetail_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1500:
    case 1501:
    case 1502:
    case 1503:
    case 1504:
    case 1505:
    case 1506:
    case 1507:
    case 1508:
    case 1509:
    case 1510:
    case 1511:
    case 1512:
    case 1513:
    case 1514:
    case 1515:
    case 1516:
    case 1517:
    case 1518:
    case 1519:
    case 1520:
    case 1521:
    case 1522:
    case 1523:
    case 1524:
    case 1525:
    case 1526:
    case 1527:
    case 1528:
    case 1529:
    case 1530:
    case 1531:
    case 1532:
    case 1533:
    case 1534:
    case 1535:
    case 1536:
    case 1537:
    case 1538:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2500:
    case 2501:
    case 2502:
    case 2503:
    case 2504:
    case 2505:
    case 2506:
    case 2507:
    case 2508:
    case 2509:
    case 2510:
    case 2511:
    case 2512:
    case 3000:
    case 3001:
    case 3002:
    case 3003:
    case 3004:
    case 3005:
    case 3006:
    case 3007:
    case 3008:
    case 3009:
    case 3010:
    case 3011:
    case 3012:
    case 3013:
    case 3014:
    case 3500:
    case 3501:
    case 3502:
    case 3503:
    case 3504:
    case 3505:
    case 3506:
    case 3507:
    case 3508:
    case 3509:
    case 3510:
    case 3511:
    case 3512:
    case 3513:
    case 3514:
    case 3515:
    case 3516:
    case 3517:
    case 3518:
    case 3519:
    case 3520:
    case 3521:
    case 3522:
    case 3523:
    case 3524:
    case 3525:
    case 3526:
    case 3527:
    case 3528:
    case 3529:
    case 3530:
    case 3531:
    case 3532:
    case 3533:
    case 3534:
    case 3535:
    case 3536:
    case 3537:
    case 3538:
    case 3539:
    case 3540:
    case 3541:
    case 3542:
    case 3543:
    case 3544:
    case 3545:
    case 3546:
    case 3547:
    case 3548:
    case 3549:
    case 3550:
    case 3551:
    case 3552:
    case 3553:
    case 3554:
    case 3555:
    case 4500:
    case 4501:
    case 4502:
    case 4503:
    case 4504:
    case 4505:
    case 4506:
    case 4507:
    case 4508:
    case 4509:
    case 4510:
    case 4511:
    case 4512:
    case 4513:
    case 4514:
    case 4515:
    case 4516:
    case 4517:
    case 4518:
    case 4519:
    case 4520:
    case 4521:
    case 4522:
    case 4523:
    case 4524:
    case 4525:
    case 4526:
    case 4527:
    case 4528:
    case 4529:
    case 4530:
    case 4531:
    case 4532:
    case 4533:
    case 4534:
    case 4535:
    case 4536:
    case 4537:
    case 4538:
    case 4539:
    case 4540:
    case 4541:
    case 4542:
    case 4543:
    case 4544:
    case 4545:
    case 4546:
    case 4547:
    case 4548:
    case 4549:
    case 4550:
    case 4551:
    case 4552:
    case 4553:
    case 4554:
    case 4555:
    case 4556:
    case 4557:
    case 4558:
    case 4559:
    case 4560:
    case 4561:
    case 4562:
    case 4563:
    case 4564:
    case 4565:
    case 4566:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OperationResultDetail_strings[238] = {};

static const char OperationResultDetail_names[] =
  "CLIENT_CANCELLATION_BT_SERVER_SOCKET_CREATION"
  "CLIENT_CANCELLATION_CANCEL_BLE_OUTGOING_CONNECTION"
  "CLIENT_CANCELLATION_CANCEL_BT_OUTGOING_CONNECTION"
  "CLIENT_CANCELLATION_CANCEL_INCOMING_CONNECTION"
  "CLIENT_CANCELLATION_CANCEL_L2CAP_OUTGOING_CONNECTION"
  "CLIENT_CANCELLATION_CANCEL_LAN_OUTGOING_CONNECTION"
  "CLIENT_CANCELLATION_CANCEL_NFC_OUTGOING_CONNECTION"
  "CLIENT_CANCELLATION_CANCEL_OUTGOING_CONNECTION"
  "CLIENT_CANCELLATION_CANCEL_USB_OUTGOING_CONNECTION"
  "CLIENT_CANCELLATION_CANCEL_WEB_RTC_OUTGOING_CONNECTION"
  "CLIENT_CANCELLATION_CANCEL_WIFI_AWARE_OUTGOING_CONNECTION"
  "CLIENT_CANCELLATION_CANCEL_WIFI_DIRECT_OUTGOING_CONNECTION"
  "CLIENT_CANCELLATION_CANCEL_WIFI_HOTSPOT_OUTGOING_CONNECTION"
  "CLIENT_CANCELLATION_LOCAL_CANCEL_PAYLOAD"
  "CLIENT_CANCELLATION_LOCAL_DISCONNECT"
  "CLIENT_CANCELLATION_REMOTE_CANCEL_PAYLOAD"
  "CLIENT_CANCELLATION_REMOTE_DISCONNECT"
  "CLIENT_CANCELLATION_REMOTE_IN_CANCELED_STATE"
  "CLIENT_CANCELLATION_UPGRADE_CANCELED_BY_REMOTE"
  "CLIENT_CANCELLATION_WEB_RTC_SERVER_SOCKET_CREATION"
  "CLIENT_CANCELLATION_WIFI_AWARE_SERVER_SOCKET_CREATION"
  "CLIENT_CANCELLATION_WIFI_DIRECT_SERVER_SOCKET_CREATION"
  "CLIENT_CANCELLATION_WIFI_HOTSPOT_SERVER_SOCKET_CREATION"
  "CLIENT_CANCELLATION_WIFI_LAN_SERVER_SOCKET_CREATION"
  "CLIENT_DUPLICATE_ACCEPTING_BLE_CONNECTION_REQUEST"
  "CLIENT_DUPLICATE_ACCEPTING_BT_CONNECTION_REQUEST"
  "CLIENT_DUPLICATE_ACCEPTING_L2CAP_CONNECTION_REQUEST"
  "CLIENT_DUPLICATE_ACCEPTING_LAN_CONNECTION_REQUEST"
  "CLIENT_DUPLICATE_ACCEPTING_NFC_CONNECTION_REQUEST"
  "CLIENT_DUPLICATE_ACCEPTING_USB_CONNECTION_REQUEST"
  "CLIENT_DUPLICATE_ACCEPTING_WEB_RTC_CONNECTION_REQUEST"
  "CLIENT_DUPLICATE_ACCEPTING_WIFI_AWARE_CONNECTION_REQUEST"
  "CLIENT_DUPLICATE_ACCEPTING_WIFI_DIRECT_CONNECTION_REQUEST"
  "CLIENT_DUPLICATE_ACCEPTING_WIFI_HOTSPOT_CONNECTION_REQUEST"
  "CLIENT_DUPLICATE_WIFI_AWARE_CONNECTION_REQUEST"
  "CLIENT_DUPLICATE_WIFI_AWARE_SUBSCRIBING_REQUEST"
  "CLIENT_DUPLICATE_WIFI_DIRECT_CONNECTION_REQUEST"
  "CLIENT_DUPLICATE_WIFI_HOTSPOT_CONNECTION_REQUEST"
  "CLIENT_UNSUPPORTED_USB_TO_BE_UPGRADE_MEDIUM"
  "CLIENT_WIFI_DIRECT_ALREADY_HOSTING_DIRECT_GROUP_FOR_THIS_CLIENT"
  "CLIENT_WIFI_HOTSPOT_ALREADY_HOSTING_HOTSPOT_FOR_THIS_CLIENT"
  "CONNECTIVITY_BLE_CLIENT_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_BLE_CREATE_GATT_CONNECTION_FAILURE"
  "CONNECTIVITY_BLE_SERVER_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_BLUETOOTH_DEVICE_OBTAIN_FAILURE"
  "CONNECTIVITY_BLUETOOTH_INVALID_CREDENTIAL"
  "CONNECTIVITY_BT_CLIENT_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_BT_SERVER_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_BT_SERVER_SOCKET_CREATION_SECURITY_EXCEPTION_FAILURE"
  "CONNECTIVITY_GATT_SERVER_OPEN_FAILURE"
  "CONNECTIVITY_GENERIC_PAYLOAD_SENT_ERROR"
  "CONNECTIVITY_GENERIC_WRITE_CLIENT_INTRODUCTION_ACK_IO_ERROR"
  "CONNECTIVITY_GENERIC_WRITING_CHANNEL_IO_ERROR"
  "CONNECTIVITY_L2CAP_CLIENT_OBTAIN_FAIURE"
  "CONNECTIVITY_L2CAP_CLIENT_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_L2CAP_DATA_CONNECTION_FAILURE"
  "CONNECTIVITY_L2CAP_SERVER_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_L2CAP_SERVER_SOCKET_CREATION_SECURITY_EXCEPTION_FAILURE"
  "CONNECTIVITY_LAN_CLIENT_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_LAN_GET_NETWORK_INTERFACES_FAILURE"
  "CONNECTIVITY_LAN_SERVER_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_LAN_UNREACHABLE"
  "CONNECTIVITY_NFC_CLIENT_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_NFC_SERVER_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_USB_CLIENT_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_WEB_RTC_CLIENT_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_WEB_RTC_CONNECT_TO_TACHYON_FAILURE"
  "CONNECTIVITY_WEB_RTC_INVALID_CREDENTIAL"
  "CONNECTIVITY_WEB_RTC_SERVER_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_WIFI_AWARE_ATTACH_FAILURE"
  "CONNECTIVITY_WIFI_AWARE_CLIENT_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_WIFI_AWARE_DISCOVERED_PEER_NULL"
  "CONNECTIVITY_WIFI_AWARE_GET_REMOTE_IP_ADDRESS_FAILURE"
  "CONNECTIVITY_WIFI_AWARE_GET_REMOTE_IP_FRAME_FAILURE"
  "CONNECTIVITY_WIFI_AWARE_INVALID_CREDENTIAL"
  "CONNECTIVITY_WIFI_AWARE_L2MESSAGE_NETWORK_AVAILABLE_FRAME_NULL"
  "CONNECTIVITY_WIFI_AWARE_L2MESSAGE_SEND_HOST_NETWORK_FRAME_FAILURE"
  "CONNECTIVITY_WIFI_AWARE_SERVER_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_WIFI_AWARE_UPDATE_PUBLISH_FAILURE"
  "CONNECTIVITY_WIFI_DIRECT_CLIENT_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_WIFI_DIRECT_GET_NETWORK_INTERFACES_FAILURE"
  "CONNECTIVITY_WIFI_DIRECT_INCONSISTENT_HOSTED_WIFI_BAND"
  "CONNECTIVITY_WIFI_DIRECT_INVALID_CREDENTIAL"
  "CONNECTIVITY_WIFI_DIRECT_P2P_CHANNEL_INITIALIZE_FAILURE"
  "CONNECTIVITY_WIFI_DIRECT_P2P_GROUP_CREATION_FAILURE"
  "CONNECTIVITY_WIFI_DIRECT_SERVER_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_WIFI_HOTSPOT_CLIENT_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_WIFI_HOTSPOT_GET_NETWORK_INTERFACES_FAILURE"
  "CONNECTIVITY_WIFI_HOTSPOT_INCONSISTENT_HOSTED_WIFI_BAND"
  "CONNECTIVITY_WIFI_HOTSPOT_INVALID_CREDENTIAL"
  "CONNECTIVITY_WIFI_HOTSPOT_LOHS_CREATION_FAILURE"
  "CONNECTIVITY_WIFI_HOTSPOT_P2P_CHANNEL_INITIALIZE_FAILURE"
  "CONNECTIVITY_WIFI_HOTSPOT_P2P_GROUP_CREATION_FAILURE"
  "CONNECTIVITY_WIFI_HOTSPOT_SERVER_SOCKET_CREATION_FAILURE"
  "CONNECTIVITY_WIFI_HOTSPOT_SOFT_AP_CREATION_FAILURE"
  "CONNECTIVITY_WIFI_LAN_INVALID_CREDENTIAL"
  "CONNECTIVITY_WIFI_LAN_IP_ADDRESS_ERROR"
  "DETAIL_SUCCESS"
  "DETAIL_UNKNOWN"
  "DEVICE_STATE_ERROR_UNFINISHED_UPGRADE_ATTEMPTS"
  "DEVICE_STATE_ERROR_USER_HOTSPOT_ENABLED"
  "DEVICE_STATE_LOCATION_DISABLED"
  "DEVICE_STATE_RADIO_DISABLING_FAILURE"
  "DEVICE_STATE_RADIO_ENABLING_FAILURE"
  "IO_ENDPOINT_IO_ERROR_ON_BLE"
  "IO_ENDPOINT_IO_ERROR_ON_BT"
  "IO_ENDPOINT_IO_ERROR_ON_L2CAP"
  "IO_ENDPOINT_IO_ERROR_ON_LAN"
  "IO_ENDPOINT_IO_ERROR_ON_NFC"
  "IO_ENDPOINT_IO_ERROR_ON_USB"
  "IO_ENDPOINT_IO_ERROR_ON_WEB_RTC"
  "IO_ENDPOINT_IO_ERROR_ON_WIFI_AWARE"
  "IO_ENDPOINT_IO_ERROR_ON_WIFI_DIRECT"
  "IO_ENDPOINT_IO_ERROR_ON_WIFI_HOTSPOT"
  "IO_FILE_OPENING_ERROR"
  "IO_FILE_READING_ERROR"
  "IO_FILE_WRITING_ERROR"
  "IO_FOLDER_CREATION_ERROR"
  "IO_STREAM_CREATE_PIPE_FAILURE"
  "MEDIUM_UNAVAILABLE_ALREADY_HAVE_A_WIFI_DIRECT_GROUP"
  "MEDIUM_UNAVAILABLE_ALREADY_HOSTING_HOTSPOT_FOR_OTHER_CLIENTS"
  "MEDIUM_UNAVAILABLE_BLE_NC_LOGICAL_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_BLE_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_BLUETOOTH_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_BT_NC_LOGICAL_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_DIRECT_HOTSPOT_NOT_SUPPORT"
  "MEDIUM_UNAVAILABLE_L2CAP_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_LAN_NC_LOGICAL_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_LAN_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_LOCAL_ONLY_HOTSPOT_DISRUPTIVE_FALSE"
  "MEDIUM_UNAVAILABLE_LOCAL_ONLY_HOTSPOT_NOT_SUPPORT"
  "MEDIUM_UNAVAILABLE_LOCAL_ONLY_HOTSPOT_NOT_SUPPORT_5G"
  "MEDIUM_UNAVAILABLE_NFC_NC_LOGICAL_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_NFC_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_REJECT_L2CAP_ON_GATT_MULTIPLEX_CONNECTION"
  "MEDIUM_UNAVAILABLE_SOFT_AP_DISRUPTIVE_FALSE"
  "MEDIUM_UNAVAILABLE_SOFT_AP_NOT_SUPPORT"
  "MEDIUM_UNAVAILABLE_UPGRADE_ON_SAME_MEDIUM"
  "MEDIUM_UNAVAILABLE_UPGRADE_SKIP_BLE_LOW_QUALITY_MEDIUMS"
  "MEDIUM_UNAVAILABLE_UPGRADE_SKIP_BT_LOW_QUALITY_MEDIUMS"
  "MEDIUM_UNAVAILABLE_UPGRADE_SKIP_L2CAP_LOW_QUALITY_MEDIUMS"
  "MEDIUM_UNAVAILABLE_UPGRADE_SKIP_LAN_LOW_QUALITY_MEDIUMS"
  "MEDIUM_UNAVAILABLE_UPGRADE_SKIP_USB_LOW_QUALITY_MEDIUMS"
  "MEDIUM_UNAVAILABLE_UPGRADE_SKIP_WEB_RTC_LOW_QUALITY_MEDIUMS"
  "MEDIUM_UNAVAILABLE_USB_NC_LOGICAL_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_USB_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_WEB_RTC_NC_LOGICAL_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_WEB_RTC_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_WEB_RTC_NO_INTERNET"
  "MEDIUM_UNAVAILABLE_WIFI_AWARE_NC_LOGICAL_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_WIFI_AWARE_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_WIFI_AWARE_RESOURCE_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_WIFI_DIRECT_NC_LOGICAL_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_WIFI_DIRECT_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_WIFI_DIRECT_P2P_RESOURCE_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_WIFI_HOTSPOT_NC_LOGICAL_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_WIFI_HOTSPOT_NOT_AVAILABLE"
  "MEDIUM_UNAVAILABLE_WIFI_HOTSPOT_P2P_RESOURCE_NOT_AVAILABLE"
  "MISCELLEANEOUS_BLE_SYSTEM_SERVICE_NULL"
  "MISCELLEANEOUS_BLUETOOTH_MAC_ADDRESS_NULL"
  "MISCELLEANEOUS_BT_NOT_ACCEPTING_CONNECTION_FOR_WORK_PROFILE"
  "MISCELLEANEOUS_BT_SYSTEM_SERVICE_NULL"
  "MISCELLEANEOUS_L2CAP_SYSTEM_SERVICE_NULL"
  "MISCELLEANEOUS_MOVE_TO_NEW_MEDIUM"
  "MISCELLEANEOUS_WEB_RTC_GET_DROIDGUARD_RESULT_FAILURE"
  "MISCELLEANEOUS_WEB_RTC_TACHYON_SIGNALING_MESSENGER_NULL"
  "MISCELLEANEOUS_WIFI_AWARE_SYSTEM_SERVICE_NULL"
  "MISCELLEANEOUS_WIFI_DIRECT_SYSTEM_SERVICE_NULL"
  "MISCELLEANEOUS_WIFI_HOTSPOT_SOFT_AP_BLOCKED_BY_PROVISION"
  "MISCELLEANEOUS_WIFI_HOTSPOT_SYSTEM_SERVICE_NULL"
  "MISCELLEANEOUS_WIFI_LAN_SYSTEM_SERVICE_NULL"
  "NEARBY_BLE_ADVERTISEMENT_MAPPING_TO_MAC_ERROR"
  "NEARBY_BLE_ENDPOINT_CHANNEL_CREATION_FAILURE"
  "NEARBY_BLE_GATT_ADVERTISEMENT_NULL_FOR_CONNECTION"
  "NEARBY_BLE_GATT_NULL_CALLBACK"
  "NEARBY_BLE_OPERATION_REGISTERED_FAILED"
  "NEARBY_BLUETOOTH_MAC_ADDRESS_INVALID_FOR_CONNECT"
  "NEARBY_BT_ENDPOINT_CHANNEL_CREATION_FAILURE"
  "NEARBY_BT_MULTIPLEX_SOCKET_DISABLED"
  "NEARBY_BT_NULL_CALLBACK"
  "NEARBY_BT_OPERATION_REGISTERED_FAILED"
  "NEARBY_BT_VIRTUAL_SOCKET_CREATION_FAILURE"
  "NEARBY_GENERIC_CONNECTION_CLOSED"
  "NEARBY_GENERIC_ENDPOINT_UNENCRYPTED"
  "NEARBY_GENERIC_INCOMING_PAYLOAD_NOT_DATA_TYPE"
  "NEARBY_GENERIC_NEW_ENDPOINT_CHANNEL_NULL"
  "NEARBY_GENERIC_OLD_ENDPOINT_CHANNEL_NULL"
  "NEARBY_GENERIC_OUTGOING_PAYLOAD_CREATION_FAILURE"
  "NEARBY_GENERIC_READ_CLIENT_INTRODUCTION_ACK_EVENT_TYPE_ERROR"
  "NEARBY_GENERIC_READ_CLIENT_INTRODUCTION_ACK_FORMAT_ERROR"
  "NEARBY_GENERIC_READ_CLIENT_INTRODUCTION_ACK_FRAME_TYPE_ERROR"
  "NEARBY_GENERIC_READ_CLIENT_INTRODUCTION_EVENT_TYPE_ERROR"
  "NEARBY_GENERIC_READ_CLIENT_INTRODUCTION_FORMAT_ERROR"
  "NEARBY_GENERIC_READ_CLIENT_INTRODUCTION_FRAME_TYPE_ERROR"
  "NEARBY_GENERIC_REMOTE_ENDPOINT_STATUS_ERROR"
  "NEARBY_GENERIC_REMOTE_REPORT_PAYLOADS_ERROR"
  "NEARBY_GENERIC_REMOTE_UPGRADE_FAILURE"
  "NEARBY_GENERIC_SEND_PAYLOAD_EXECUTOR_NULL"
  "NEARBY_L2CAP_ENDPOINT_CHANNEL_CREATION_FAILURE"
  "NEARBY_L2CAP_NULL_CALLBACK"
  "NEARBY_L2CAP_OPERATION_REGISTERED_FAILED"
  "NEARBY_L2CAP_PSM_NOT_POSITIVE"
  "NEARBY_LAN_ENDPOINT_CHANNEL_CREATION_FAILURE"
  "NEARBY_LAN_MULTIPLEX_SOCKET_DISABLED"
  "NEARBY_LAN_NULL_CALLBACK"
  "NEARBY_LAN_OPERATION_REGISTERED_FAILED"
  "NEARBY_LAN_VIRTUAL_SOCKET_CREATION_FAILURE"
  "NEARBY_NFC_ENDPOINT_CHANNEL_CREATION_FAILURE"
  "NEARBY_NFC_NULL_CALLBACK"
  "NEARBY_USB_ENDPOINT_CHANNEL_CREATION_FAILURE"
  "NEARBY_USB_NULL_CALLBACK"
  "NEARBY_WEB_RTC_CONNECTION_FLOW_NULL"
  "NEARBY_WEB_RTC_ENDPOINT_CHANNEL_CREATION_FAILURE"
  "NEARBY_WEB_RTC_NULL_CALLBACK"
  "NEARBY_WEB_RTC_OPERATION_REGISTERED_FAILED"
  "NEARBY_WIFI_AWARE_ENDPOINT_CHANNEL_CREATION_FAILURE"
  "NEARBY_WIFI_AWARE_NULL_CALLBACK"
  "NEARBY_WIFI_AWARE_OPERATION_REGISTERED_FAILED"
  "NEARBY_WIFI_DIRECT_ENDPOINT_CHANNEL_CREATION_FAILURE"
  "NEARBY_WIFI_DIRECT_HOST_ON_SRD_CHANNELS"
  "NEARBY_WIFI_DIRECT_NO_GROUP_FOR_LISTENING"
  "NEARBY_WIFI_DIRECT_NULL_CALLBACK"
  "NEARBY_WIFI_DIRECT_NULL_PASSWORD"
  "NEARBY_WIFI_DIRECT_NULL_SSID"
  "NEARBY_WIFI_DIRECT_OPERATION_REGISTERED_FAILED"
  "NEARBY_WIFI_DIRECT_P2P_NON_DBS_WANT_2G_BUT_AP_5G"
  "NEARBY_WIFI_DIRECT_P2P_NON_DBS_WANT_5G_BUT_AP_2G"
  "NEARBY_WIFI_HOTSPOT_CLIENT_OPERATION_REGISTERED_FAILED"
  "NEARBY_WIFI_HOTSPOT_DIRECT_OPERATION_REGISTERED_FAILED"
  "NEARBY_WIFI_HOTSPOT_ENDPOINT_CHANNEL_CREATION_FAILURE"
  "NEARBY_WIFI_HOTSPOT_HOST_ON_SRD_CHANNELS"
  "NEARBY_WIFI_HOTSPOT_LOHS_OPERATION_REGISTERED_FAILED"
  "NEARBY_WIFI_HOTSPOT_NO_HOTSPOT_FOR_LISTENING"
  "NEARBY_WIFI_HOTSPOT_NULL_CALLBACK"
  "NEARBY_WIFI_HOTSPOT_P2P_NON_DBS_WANT_2G_BUT_AP_5G"
  "NEARBY_WIFI_HOTSPOT_P2P_NON_DBS_WANT_5G_BUT_AP_2G"
  "NEARBY_WIFI_HOTSPOT_SOFT_AP_OPERATION_REGISTERED_FAILED"
  "NEARBY_WIFI_LAN_IP_ADDRESS_ERROR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OperationResultDetail_entries[] = {
  { {OperationResultDetail_names + 0, 45}, 519 },
  { {OperationResultDetail_names + 45, 50}, 504 },
  { {OperationResultDetail_names + 95, 49}, 505 },
  { {OperationResultDetail_names + 144, 46}, 515 },
  { {OperationResultDetail_names + 190, 52}, 506 },
  { {OperationResultDetail_names + 242, 50}, 507 },
  { {OperationResultDetail_names + 292, 50}, 508 },
  { {OperationResultDetail_names + 342, 46}, 514 },
  { {OperationResultDetail_names + 388, 50}, 509 },
  { {OperationResultDetail_names + 438, 54}, 513 },
  { {OperationResultDetail_names + 492, 57}, 510 },
  { {OperationResultDetail_names + 549, 58}, 511 },
  { {OperationResultDetail_names + 607, 59}, 512 },
  { {OperationResultDetail_names + 666, 40}, 501 },
  { {OperationResultDetail_names + 706, 36}, 522 },
  { {OperationResultDetail_names + 742, 41}, 502 },
  { {OperationResultDetail_names + 783, 37}, 523 },
  { {OperationResultDetail_names + 820, 44}, 500 },
  { {OperationResultDetail_names + 864, 46}, 503 },
  { {OperationResultDetail_names + 910, 50}, 520 },
  { {OperationResultDetail_names + 960, 53}, 516 },
  { {OperationResultDetail_names + 1013, 54}, 517 },
  { {OperationResultDetail_names + 1067, 55}, 518 },
  { {OperationResultDetail_names + 1122, 51}, 521 },
  { {OperationResultDetail_names + 1173, 49}, 2002 },
  { {OperationResultDetail_names + 1222, 48}, 2004 },
  { {OperationResultDetail_names + 1270, 51}, 2003 },
  { {OperationResultDetail_names + 1321, 49}, 2005 },
  { {OperationResultDetail_names + 1370, 49}, 2006 },
  { {OperationResultDetail_names + 1419, 49}, 2011 },
  { {OperationResultDetail_names + 1468, 53}, 2007 },
  { {OperationResultDetail_names + 1521, 56}, 2008 },
  { {OperationResultDetail_names + 1577, 57}, 2010 },
  { {OperationResultDetail_names + 1634, 58}, 2009 },
  { {OperationResultDetail_names + 1692, 46}, 2012 },
  { {OperationResultDetail_names + 1738, 47}, 2015 },
  { {OperationResultDetail_names + 1785, 47}, 2013 },
  { {OperationResultDetail_names + 1832, 48}, 2014 },
  { {OperationResultDetail_names + 1880, 43}, 2016 },
  { {OperationResultDetail_names + 1923, 63}, 2000 },
  { {OperationResultDetail_names + 1986, 59}, 2001 },
  { {OperationResultDetail_names + 2045, 47}, 3502 },
  { {OperationResultDetail_names + 2092, 47}, 3513 },
  { {OperationResultDetail_names + 2139, 47}, 3539 },
  { {OperationResultDetail_names + 2186, 44}, 3501 },
  { {OperationResultDetail_names + 2230, 41}, 3518 },
  { {OperationResultDetail_names + 2271, 46}, 3504 },
  { {OperationResultDetail_names + 2317, 46}, 3541 },
  { {OperationResultDetail_names + 2363, 65}, 3555 },
  { {OperationResultDetail_names + 2428, 37}, 3538 },
  { {OperationResultDetail_names + 2465, 39}, 3553 },
  { {OperationResultDetail_names + 2504, 59}, 3551 },
  { {OperationResultDetail_names + 2563, 45}, 3550 },
  { {OperationResultDetail_names + 2608, 39}, 3525 },
  { {OperationResultDetail_names + 2647, 49}, 3503 },
  { {OperationResultDetail_names + 2696, 42}, 3526 },
  { {OperationResultDetail_names + 2738, 49}, 3540 },
  { {OperationResultDetail_names + 2787, 68}, 3554 },
  { {OperationResultDetail_names + 2855, 47}, 3505 },
  { {OperationResultDetail_names + 2902, 47}, 3531 },
  { {OperationResultDetail_names + 2949, 47}, 3542 },
  { {OperationResultDetail_names + 2996, 28}, 3529 },
  { {OperationResultDetail_names + 3024, 47}, 3506 },
  { {OperationResultDetail_names + 3071, 47}, 3547 },
  { {OperationResultDetail_names + 3118, 47}, 3511 },
  { {OperationResultDetail_names + 3165, 51}, 3507 },
  { {OperationResultDetail_names + 3216, 47}, 3512 },
  { {OperationResultDetail_names + 3263, 39}, 3523 },
  { {OperationResultDetail_names + 3302, 51}, 3543 },
  { {OperationResultDetail_names + 3353, 38}, 3500 },
  { {OperationResultDetail_names + 3391, 54}, 3508 },
  { {OperationResultDetail_names + 3445, 44}, 3552 },
  { {OperationResultDetail_names + 3489, 53}, 3515 },
  { {OperationResultDetail_names + 3542, 51}, 3514 },
  { {OperationResultDetail_names + 3593, 42}, 3522 },
  { {OperationResultDetail_names + 3635, 62}, 3527 },
  { {OperationResultDetail_names + 3697, 65}, 3528 },
  { {OperationResultDetail_names + 3762, 54}, 3544 },
  { {OperationResultDetail_names + 3816, 46}, 3549 },
  { {OperationResultDetail_names + 3862, 55}, 3510 },
  { {OperationResultDetail_names + 3917, 55}, 3532 },
  { {OperationResultDetail_names + 3972, 54}, 3516 },
  { {OperationResultDetail_names + 4026, 43}, 3520 },
  { {OperationResultDetail_names + 4069, 55}, 3535 },
  { {OperationResultDetail_names + 4124, 51}, 3537 },
  { {OperationResultDetail_names + 4175, 55}, 3546 },
  { {OperationResultDetail_names + 4230, 56}, 3509 },
  { {OperationResultDetail_names + 4286, 56}, 3533 },
  { {OperationResultDetail_names + 4342, 55}, 3517 },
  { {OperationResultDetail_names + 4397, 44}, 3521 },
  { {OperationResultDetail_names + 4441, 47}, 3530 },
  { {OperationResultDetail_names + 4488, 56}, 3534 },
  { {OperationResultDetail_names + 4544, 52}, 3536 },
  { {OperationResultDetail_names + 4596, 56}, 3545 },
  { {OperationResultDetail_names + 4652, 50}, 3548 },
  { {OperationResultDetail_names + 4702, 40}, 3519 },
  { {OperationResultDetail_names + 4742, 38}, 3524 },
  { {OperationResultDetail_names + 4780, 14}, 1 },
  { {OperationResultDetail_names + 4794, 14}, 0 },
  { {OperationResultDetail_names + 4808, 46}, 1000 },
  { {OperationResultDetail_names + 4854, 39}, 1001 },
  { {OperationResultDetail_names + 4893, 30}, 1002 },
  { {OperationResultDetail_names + 4923, 36}, 1003 },
  { {OperationResultDetail_names + 4959, 35}, 1004 },
  { {OperationResultDetail_names + 4994, 27}, 3005 },
  { {OperationResultDetail_names + 5021, 26}, 3007 },
  { {OperationResultDetail_names + 5047, 29}, 3006 },
  { {OperationResultDetail_names + 5076, 27}, 3009 },
  { {OperationResultDetail_names + 5103, 27}, 3013 },
  { {OperationResultDetail_names + 5130, 27}, 3014 },
  { {OperationResultDetail_names + 5157, 31}, 3008 },
  { {OperationResultDetail_names + 5188, 34}, 3012 },
  { {OperationResultDetail_names + 5222, 35}, 3010 },
  { {OperationResultDetail_names + 5257, 36}, 3011 },
  { {OperationResultDetail_names + 5293, 21}, 3000 },
  { {OperationResultDetail_names + 5314, 21}, 3001 },
  { {OperationResultDetail_names + 5335, 21}, 3002 },
  { {OperationResultDetail_names + 5356, 24}, 3003 },
  { {OperationResultDetail_names + 5380, 29}, 3004 },
  { {OperationResultDetail_names + 5409, 51}, 1534 },
  { {OperationResultDetail_names + 5460, 60}, 1535 },
  { {OperationResultDetail_names + 5520, 47}, 1515 },
  { {OperationResultDetail_names + 5567, 36}, 1505 },
  { {OperationResultDetail_names + 5603, 42}, 1507 },
  { {OperationResultDetail_names + 5645, 46}, 1516 },
  { {OperationResultDetail_names + 5691, 45}, 1501 },
  { {OperationResultDetail_names + 5736, 38}, 1506 },
  { {OperationResultDetail_names + 5774, 47}, 1517 },
  { {OperationResultDetail_names + 5821, 36}, 1513 },
  { {OperationResultDetail_names + 5857, 54}, 1532 },
  { {OperationResultDetail_names + 5911, 49}, 1503 },
  { {OperationResultDetail_names + 5960, 52}, 1504 },
  { {OperationResultDetail_names + 6012, 47}, 1518 },
  { {OperationResultDetail_names + 6059, 36}, 1512 },
  { {OperationResultDetail_names + 6095, 60}, 1536 },
  { {OperationResultDetail_names + 6155, 43}, 1533 },
  { {OperationResultDetail_names + 6198, 38}, 1502 },
  { {OperationResultDetail_names + 6236, 41}, 1537 },
  { {OperationResultDetail_names + 6277, 55}, 1526 },
  { {OperationResultDetail_names + 6332, 54}, 1530 },
  { {OperationResultDetail_names + 6386, 57}, 1527 },
  { {OperationResultDetail_names + 6443, 55}, 1529 },
  { {OperationResultDetail_names + 6498, 55}, 1531 },
  { {OperationResultDetail_names + 6553, 59}, 1528 },
  { {OperationResultDetail_names + 6612, 47}, 1519 },
  { {OperationResultDetail_names + 6659, 36}, 1514 },
  { {OperationResultDetail_names + 6695, 51}, 1520 },
  { {OperationResultDetail_names + 6746, 40}, 1508 },
  { {OperationResultDetail_names + 6786, 38}, 1538 },
  { {OperationResultDetail_names + 6824, 54}, 1521 },
  { {OperationResultDetail_names + 6878, 43}, 1509 },
  { {OperationResultDetail_names + 6921, 52}, 1500 },
  { {OperationResultDetail_names + 6973, 55}, 1523 },
  { {OperationResultDetail_names + 7028, 44}, 1511 },
  { {OperationResultDetail_names + 7072, 57}, 1525 },
  { {OperationResultDetail_names + 7129, 56}, 1522 },
  { {OperationResultDetail_names + 7185, 45}, 1510 },
  { {OperationResultDetail_names + 7230, 58}, 1524 },
  { {OperationResultDetail_names + 7288, 38}, 2503 },
  { {OperationResultDetail_names + 7326, 41}, 2500 },
  { {OperationResultDetail_names + 7367, 59}, 2510 },
  { {OperationResultDetail_names + 7426, 37}, 2505 },
  { {OperationResultDetail_names + 7463, 40}, 2504 },
  { {OperationResultDetail_names + 7503, 33}, 2501 },
  { {OperationResultDetail_names + 7536, 52}, 2511 },
  { {OperationResultDetail_names + 7588, 55}, 2512 },
  { {OperationResultDetail_names + 7643, 45}, 2506 },
  { {OperationResultDetail_names + 7688, 46}, 2507 },
  { {OperationResultDetail_names + 7734, 56}, 2502 },
  { {OperationResultDetail_names + 7790, 47}, 2509 },
  { {OperationResultDetail_names + 7837, 43}, 2508 },
  { {OperationResultDetail_names + 7880, 45}, 4500 },
  { {OperationResultDetail_names + 7925, 44}, 4504 },
  { {OperationResultDetail_names + 7969, 49}, 4515 },
  { {OperationResultDetail_names + 8018, 29}, 4518 },
  { {OperationResultDetail_names + 8047, 38}, 4536 },
  { {OperationResultDetail_names + 8085, 48}, 4501 },
  { {OperationResultDetail_names + 8133, 43}, 4506 },
  { {OperationResultDetail_names + 8176, 35}, 4530 },
  { {OperationResultDetail_names + 8211, 23}, 4520 },
  { {OperationResultDetail_names + 8234, 37}, 4538 },
  { {OperationResultDetail_names + 8271, 41}, 4563 },
  { {OperationResultDetail_names + 8312, 32}, 4503 },
  { {OperationResultDetail_names + 8344, 35}, 4514 },
  { {OperationResultDetail_names + 8379, 45}, 4552 },
  { {OperationResultDetail_names + 8424, 40}, 4532 },
  { {OperationResultDetail_names + 8464, 40}, 4535 },
  { {OperationResultDetail_names + 8504, 48}, 4547 },
  { {OperationResultDetail_names + 8552, 60}, 4556 },
  { {OperationResultDetail_names + 8612, 56}, 4558 },
  { {OperationResultDetail_names + 8668, 60}, 4557 },
  { {OperationResultDetail_names + 8728, 56}, 4553 },
  { {OperationResultDetail_names + 8784, 52}, 4555 },
  { {OperationResultDetail_names + 8836, 56}, 4554 },
  { {OperationResultDetail_names + 8892, 43}, 4559 },
  { {OperationResultDetail_names + 8935, 43}, 4560 },
  { {OperationResultDetail_names + 8978, 37}, 4561 },
  { {OperationResultDetail_names + 9015, 41}, 4562 },
  { {OperationResultDetail_names + 9056, 46}, 4505 },
  { {OperationResultDetail_names + 9102, 26}, 4519 },
  { {OperationResultDetail_names + 9128, 40}, 4537 },
  { {OperationResultDetail_names + 9168, 29}, 4566 },
  { {OperationResultDetail_names + 9197, 44}, 4507 },
  { {OperationResultDetail_names + 9241, 36}, 4531 },
  { {OperationResultDetail_names + 9277, 24}, 4525 },
  { {OperationResultDetail_names + 9301, 38}, 4539 },
  { {OperationResultDetail_names + 9339, 42}, 4564 },
  { {OperationResultDetail_names + 9381, 44}, 4508 },
  { {OperationResultDetail_names + 9425, 24}, 4522 },
  { {OperationResultDetail_names + 9449, 44}, 4513 },
  { {OperationResultDetail_names + 9493, 24}, 4521 },
  { {OperationResultDetail_names + 9517, 35}, 4502 },
  { {OperationResultDetail_names + 9552, 48}, 4512 },
  { {OperationResultDetail_names + 9600, 28}, 4524 },
  { {OperationResultDetail_names + 9628, 42}, 4540 },
  { {OperationResultDetail_names + 9670, 51}, 4509 },
  { {OperationResultDetail_names + 9721, 31}, 4523 },
  { {OperationResultDetail_names + 9752, 45}, 4541 },
  { {OperationResultDetail_names + 9797, 52}, 4511 },
  { {OperationResultDetail_names + 9849, 39}, 4516 },
  { {OperationResultDetail_names + 9888, 41}, 4533 },
  { {OperationResultDetail_names + 9929, 32}, 4527 },
  { {OperationResultDetail_names + 9961, 32}, 4529 },
  { {OperationResultDetail_names + 9993, 28}, 4528 },
  { {OperationResultDetail_names + 10021, 46}, 4546 },
  { {OperationResultDetail_names + 10067, 48}, 4549 },
  { {OperationResultDetail_names + 10115, 48}, 4551 },
  { {OperationResultDetail_names + 10163, 54}, 4545 },
  { {OperationResultDetail_names + 10217, 54}, 4542 },
  { {OperationResultDetail_names + 10271, 53}, 4510 },
  { {OperationResultDetail_names + 10324, 40}, 4517 },
  { {OperationResultDetail_names + 10364, 52}, 4544 },
  { {OperationResultDetail_names + 10416, 44}, 4534 },
  { {OperationResultDetail_names + 10460, 33}, 4526 },
  { {OperationResultDetail_names + 10493, 49}, 4548 },
  { {OperationResultDetail_names + 10542, 49}, 4550 },
  { {OperationResultDetail_names + 10591, 55}, 4543 },
  { {OperationResultDetail_names + 10646, 32}, 4565 },
};

static const int OperationResultDetail_entries_by_number[] = {
  98, // 0 -> DETAIL_UNKNOWN
  97, // 1 -> DETAIL_SUCCESS
  17, // 500 -> CLIENT_CANCELLATION_REMOTE_IN_CANCELED_STATE
  13, // 501 -> CLIENT_CANCELLATION_LOCAL_CANCEL_PAYLOAD
  15, // 502 -> CLIENT_CANCELLATION_REMOTE_CANCEL_PAYLOAD
  18, // 503 -> CLIENT_CANCELLATION_UPGRADE_CANCELED_BY_REMOTE
  1, // 504 -> CLIENT_CANCELLATION_CANCEL_BLE_OUTGOING_CONNECTION
  2, // 505 -> CLIENT_CANCELLATION_CANCEL_BT_OUTGOING_CONNECTION
  4, // 506 -> CLIENT_CANCELLATION_CANCEL_L2CAP_OUTGOING_CONNECTION
  5, // 507 -> CLIENT_CANCELLATION_CANCEL_LAN_OUTGOING_CONNECTION
  6, // 508 -> CLIENT_CANCELLATION_CANCEL_NFC_OUTGOING_CONNECTION
  8, // 509 -> CLIENT_CANCELLATION_CANCEL_USB_OUTGOING_CONNECTION
  10, // 510 -> CLIENT_CANCELLATION_CANCEL_WIFI_AWARE_OUTGOING_CONNECTION
  11, // 511 -> CLIENT_CANCELLATION_CANCEL_WIFI_DIRECT_OUTGOING_CONNECTION
  12, // 512 -> CLIENT_CANCELLATION_CANCEL_WIFI_HOTSPOT_OUTGOING_CONNECTION
  9, // 513 -> CLIENT_CANCELLATION_CANCEL_WEB_RTC_OUTGOING_CONNECTION
  7, // 514 -> CLIENT_CANCELLATION_CANCEL_OUTGOING_CONNECTION
  3, // 515 -> CLIENT_CANCELLATION_CANCEL_INCOMING_CONNECTION
  20, // 516 -> CLIENT_CANCELLATION_WIFI_AWARE_SERVER_SOCKET_CREATION
  21, // 517 -> CLIENT_CANCELLATION_WIFI_DIRECT_SERVER_SOCKET_CREATION
  22, // 518 -> CLIENT_CANCELLATION_WIFI_HOTSPOT_SERVER_SOCKET_CREATION
  0, // 519 -> CLIENT_CANCELLATION_BT_SERVER_SOCKET_CREATION
  19, // 520 -> CLIENT_CANCELLATION_WEB_RTC_SERVER_SOCKET_CREATION
  23, // 521 -> CLIENT_CANCELLATION_WIFI_LAN_SERVER_SOCKET_CREATION
  14, // 522 -> CLIENT_CANCELLATION_LOCAL_DISCONNECT
  16, // 523 -> CLIENT_CANCELLATION_REMOTE_DISCONNECT
  99, // 1000 -> DEVICE_STATE_ERROR_UNFINISHED_UPGRADE_ATTEMPTS
  100, // 1001 -> DEVICE_STATE_ERROR_USER_HOTSPOT_ENABLED
  101, // 1002 -> DEVICE_STATE_LOCATION_DISABLED
  102, // 1003 -> DEVICE_STATE_RADIO_DISABLING_FAILURE
  103, // 1004 -> DEVICE_STATE_RADIO_ENABLING_FAILURE
  151, // 1500 -> MEDIUM_UNAVAILABLE_WIFI_AWARE_RESOURCE_NOT_AVAILABLE
  125, // 1501 -> MEDIUM_UNAVAILABLE_DIRECT_HOTSPOT_NOT_SUPPORT
  136, // 1502 -> MEDIUM_UNAVAILABLE_SOFT_AP_NOT_SUPPORT
  130, // 1503 -> MEDIUM_UNAVAILABLE_LOCAL_ONLY_HOTSPOT_NOT_SUPPORT
  131, // 1504 -> MEDIUM_UNAVAILABLE_LOCAL_ONLY_HOTSPOT_NOT_SUPPORT_5G
  122, // 1505 -> MEDIUM_UNAVAILABLE_BLE_NOT_AVAILABLE
  126, // 1506 -> MEDIUM_UNAVAILABLE_L2CAP_NOT_AVAILABLE
  123, // 1507 -> MEDIUM_UNAVAILABLE_BLUETOOTH_NOT_AVAILABLE
  147, // 1508 -> MEDIUM_UNAVAILABLE_WEB_RTC_NOT_AVAILABLE
  150, // 1509 -> MEDIUM_UNAVAILABLE_WIFI_AWARE_NOT_AVAILABLE
  156, // 1510 -> MEDIUM_UNAVAILABLE_WIFI_HOTSPOT_NOT_AVAILABLE
  153, // 1511 -> MEDIUM_UNAVAILABLE_WIFI_DIRECT_NOT_AVAILABLE
  133, // 1512 -> MEDIUM_UNAVAILABLE_NFC_NOT_AVAILABLE
  128, // 1513 -> MEDIUM_UNAVAILABLE_LAN_NOT_AVAILABLE
  145, // 1514 -> MEDIUM_UNAVAILABLE_USB_NOT_AVAILABLE
  121, // 1515 -> MEDIUM_UNAVAILABLE_BLE_NC_LOGICAL_NOT_AVAILABLE
  124, // 1516 -> MEDIUM_UNAVAILABLE_BT_NC_LOGICAL_NOT_AVAILABLE
  127, // 1517 -> MEDIUM_UNAVAILABLE_LAN_NC_LOGICAL_NOT_AVAILABLE
  132, // 1518 -> MEDIUM_UNAVAILABLE_NFC_NC_LOGICAL_NOT_AVAILABLE
  144, // 1519 -> MEDIUM_UNAVAILABLE_USB_NC_LOGICAL_NOT_AVAILABLE
  146, // 1520 -> MEDIUM_UNAVAILABLE_WEB_RTC_NC_LOGICAL_NOT_AVAILABLE
  149, // 1521 -> MEDIUM_UNAVAILABLE_WIFI_AWARE_NC_LOGICAL_NOT_AVAILABLE
  155, // 1522 -> MEDIUM_UNAVAILABLE_WIFI_HOTSPOT_NC_LOGICAL_NOT_AVAILABLE
  152, // 1523 -> MEDIUM_UNAVAILABLE_WIFI_DIRECT_NC_LOGICAL_NOT_AVAILABLE
  157, // 1524 -> MEDIUM_UNAVAILABLE_WIFI_HOTSPOT_P2P_RESOURCE_NOT_AVAILABLE
  154, // 1525 -> MEDIUM_UNAVAILABLE_WIFI_DIRECT_P2P_RESOURCE_NOT_AVAILABLE
  138, // 1526 -> MEDIUM_UNAVAILABLE_UPGRADE_SKIP_BLE_LOW_QUALITY_MEDIUMS
  140, // 1527 -> MEDIUM_UNAVAILABLE_UPGRADE_SKIP_L2CAP_LOW_QUALITY_MEDIUMS
  143, // 1528 -> MEDIUM_UNAVAILABLE_UPGRADE_SKIP_WEB_RTC_LOW_QUALITY_MEDIUMS
  141, // 1529 -> MEDIUM_UNAVAILABLE_UPGRADE_SKIP_LAN_LOW_QUALITY_MEDIUMS
  139, // 1530 -> MEDIUM_UNAVAILABLE_UPGRADE_SKIP_BT_LOW_QUALITY_MEDIUMS
  142, // 1531 -> MEDIUM_UNAVAILABLE_UPGRADE_SKIP_USB_LOW_QUALITY_MEDIUMS
  129, // 1532 -> MEDIUM_UNAVAILABLE_LOCAL_ONLY_HOTSPOT_DISRUPTIVE_FALSE
  135, // 1533 -> MEDIUM_UNAVAILABLE_SOFT_AP_DISRUPTIVE_FALSE
  119, // 1534 -> MEDIUM_UNAVAILABLE_ALREADY_HAVE_A_WIFI_DIRECT_GROUP
  120, // 1535 -> MEDIUM_UNAVAILABLE_ALREADY_HOSTING_HOTSPOT_FOR_OTHER_CLIENTS
  134, // 1536 -> MEDIUM_UNAVAILABLE_REJECT_L2CAP_ON_GATT_MULTIPLEX_CONNECTION
  137, // 1537 -> MEDIUM_UNAVAILABLE_UPGRADE_ON_SAME_MEDIUM
  148, // 1538 -> MEDIUM_UNAVAILABLE_WEB_RTC_NO_INTERNET
  39, // 2000 -> CLIENT_WIFI_DIRECT_ALREADY_HOSTING_DIRECT_GROUP_FOR_THIS_CLIENT
  40, // 2001 -> CLIENT_WIFI_HOTSPOT_ALREADY_HOSTING_HOTSPOT_FOR_THIS_CLIENT
  24, // 2002 -> CLIENT_DUPLICATE_ACCEPTING_BLE_CONNECTION_REQUEST
  26, // 2003 -> CLIENT_DUPLICATE_ACCEPTING_L2CAP_CONNECTION_REQUEST
  25, // 2004 -> CLIENT_DUPLICATE_ACCEPTING_BT_CONNECTION_REQUEST
  27, // 2005 -> CLIENT_DUPLICATE_ACCEPTING_LAN_CONNECTION_REQUEST
  28, // 2006 -> CLIENT_DUPLICATE_ACCEPTING_NFC_CONNECTION_REQUEST
  30, // 2007 -> CLIENT_DUPLICATE_ACCEPTING_WEB_RTC_CONNECTION_REQUEST
  31, // 2008 -> CLIENT_DUPLICATE_ACCEPTING_WIFI_AWARE_CONNECTION_REQUEST
  33, // 2009 -> CLIENT_DUPLICATE_ACCEPTING_WIFI_HOTSPOT_CONNECTION_REQUEST
  32, // 2010 -> CLIENT_DUPLICATE_ACCEPTING_WIFI_DIRECT_CONNECTION_REQUEST
  29, // 2011 -> CLIENT_DUPLICATE_ACCEPTING_USB_CONNECTION_REQUEST
  34, // 2012 -> CLIENT_DUPLICATE_WIFI_AWARE_CONNECTION_REQUEST
  36, // 2013 -> CLIENT_DUPLICATE_WIFI_DIRECT_CONNECTION_REQUEST
  37, // 2014 -> CLIENT_DUPLICATE_WIFI_HOTSPOT_CONNECTION_REQUEST
  35, // 2015 -> CLIENT_DUPLICATE_WIFI_AWARE_SUBSCRIBING_REQUEST
  38, // 2016 -> CLIENT_UNSUPPORTED_USB_TO_BE_UPGRADE_MEDIUM
  159, // 2500 -> MISCELLEANEOUS_BLUETOOTH_MAC_ADDRESS_NULL
  163, // 2501 -> MISCELLEANEOUS_MOVE_TO_NEW_MEDIUM
  168, // 2502 -> MISCELLEANEOUS_WIFI_HOTSPOT_SOFT_AP_BLOCKED_BY_PROVISION
  158, // 2503 -> MISCELLEANEOUS_BLE_SYSTEM_SERVICE_NULL
  162, // 2504 -> MISCELLEANEOUS_L2CAP_SYSTEM_SERVICE_NULL
  161, // 2505 -> MISCELLEANEOUS_BT_SYSTEM_SERVICE_NULL
  166, // 2506 -> MISCELLEANEOUS_WIFI_AWARE_SYSTEM_SERVICE_NULL
  167, // 2507 -> MISCELLEANEOUS_WIFI_DIRECT_SYSTEM_SERVICE_NULL
  170, // 2508 -> MISCELLEANEOUS_WIFI_LAN_SYSTEM_SERVICE_NULL
  169, // 2509 -> MISCELLEANEOUS_WIFI_HOTSPOT_SYSTEM_SERVICE_NULL
  160, // 2510 -> MISCELLEANEOUS_BT_NOT_ACCEPTING_CONNECTION_FOR_WORK_PROFILE
  164, // 2511 -> MISCELLEANEOUS_WEB_RTC_GET_DROIDGUARD_RESULT_FAILURE
  165, // 2512 -> MISCELLEANEOUS_WEB_RTC_TACHYON_SIGNALING_MESSENGER_NULL
  114, // 3000 -> IO_FILE_OPENING_ERROR
  115, // 3001 -> IO_FILE_READING_ERROR
  116, // 3002 -> IO_FILE_WRITING_ERROR
  117, // 3003 -> IO_FOLDER_CREATION_ERROR
  118, // 3004 -> IO_STREAM_CREATE_PIPE_FAILURE
  104, // 3005 -> IO_ENDPOINT_IO_ERROR_ON_BLE
  106, // 3006 -> IO_ENDPOINT_IO_ERROR_ON_L2CAP
  105, // 3007 -> IO_ENDPOINT_IO_ERROR_ON_BT
  110, // 3008 -> IO_ENDPOINT_IO_ERROR_ON_WEB_RTC
  107, // 3009 -> IO_ENDPOINT_IO_ERROR_ON_LAN
  112, // 3010 -> IO_ENDPOINT_IO_ERROR_ON_WIFI_DIRECT
  113, // 3011 -> IO_ENDPOINT_IO_ERROR_ON_WIFI_HOTSPOT
  111, // 3012 -> IO_ENDPOINT_IO_ERROR_ON_WIFI_AWARE
  108, // 3013 -> IO_ENDPOINT_IO_ERROR_ON_NFC
  109, // 3014 -> IO_ENDPOINT_IO_ERROR_ON_USB
  69, // 3500 -> CONNECTIVITY_WIFI_AWARE_ATTACH_FAILURE
  44, // 3501 -> CONNECTIVITY_BLUETOOTH_DEVICE_OBTAIN_FAILURE
  41, // 3502 -> CONNECTIVITY_BLE_CLIENT_SOCKET_CREATION_FAILURE
  54, // 3503 -> CONNECTIVITY_L2CAP_CLIENT_SOCKET_CREATION_FAILURE
  46, // 3504 -> CONNECTIVITY_BT_CLIENT_SOCKET_CREATION_FAILURE
  58, // 3505 -> CONNECTIVITY_LAN_CLIENT_SOCKET_CREATION_FAILURE
  62, // 3506 -> CONNECTIVITY_NFC_CLIENT_SOCKET_CREATION_FAILURE
  65, // 3507 -> CONNECTIVITY_WEB_RTC_CLIENT_SOCKET_CREATION_FAILURE
  70, // 3508 -> CONNECTIVITY_WIFI_AWARE_CLIENT_SOCKET_CREATION_FAILURE
  86, // 3509 -> CONNECTIVITY_WIFI_HOTSPOT_CLIENT_SOCKET_CREATION_FAILURE
  79, // 3510 -> CONNECTIVITY_WIFI_DIRECT_CLIENT_SOCKET_CREATION_FAILURE
  64, // 3511 -> CONNECTIVITY_USB_CLIENT_SOCKET_CREATION_FAILURE
  66, // 3512 -> CONNECTIVITY_WEB_RTC_CONNECT_TO_TACHYON_FAILURE
  42, // 3513 -> CONNECTIVITY_BLE_CREATE_GATT_CONNECTION_FAILURE
  73, // 3514 -> CONNECTIVITY_WIFI_AWARE_GET_REMOTE_IP_FRAME_FAILURE
  72, // 3515 -> CONNECTIVITY_WIFI_AWARE_GET_REMOTE_IP_ADDRESS_FAILURE
  81, // 3516 -> CONNECTIVITY_WIFI_DIRECT_INCONSISTENT_HOSTED_WIFI_BAND
  88, // 3517 -> CONNECTIVITY_WIFI_HOTSPOT_INCONSISTENT_HOSTED_WIFI_BAND
  45, // 3518 -> CONNECTIVITY_BLUETOOTH_INVALID_CREDENTIAL
  95, // 3519 -> CONNECTIVITY_WIFI_LAN_INVALID_CREDENTIAL
  82, // 3520 -> CONNECTIVITY_WIFI_DIRECT_INVALID_CREDENTIAL
  89, // 3521 -> CONNECTIVITY_WIFI_HOTSPOT_INVALID_CREDENTIAL
  74, // 3522 -> CONNECTIVITY_WIFI_AWARE_INVALID_CREDENTIAL
  67, // 3523 -> CONNECTIVITY_WEB_RTC_INVALID_CREDENTIAL
  96, // 3524 -> CONNECTIVITY_WIFI_LAN_IP_ADDRESS_ERROR
  53, // 3525 -> CONNECTIVITY_L2CAP_CLIENT_OBTAIN_FAIURE
  55, // 3526 -> CONNECTIVITY_L2CAP_DATA_CONNECTION_FAILURE
  75, // 3527 -> CONNECTIVITY_WIFI_AWARE_L2MESSAGE_NETWORK_AVAILABLE_FRAME_NULL
  76, // 3528 -> CONNECTIVITY_WIFI_AWARE_L2MESSAGE_SEND_HOST_NETWORK_FRAME_FAILURE
  61, // 3529 -> CONNECTIVITY_LAN_UNREACHABLE
  90, // 3530 -> CONNECTIVITY_WIFI_HOTSPOT_LOHS_CREATION_FAILURE
  59, // 3531 -> CONNECTIVITY_LAN_GET_NETWORK_INTERFACES_FAILURE
  80, // 3532 -> CONNECTIVITY_WIFI_DIRECT_GET_NETWORK_INTERFACES_FAILURE
  87, // 3533 -> CONNECTIVITY_WIFI_HOTSPOT_GET_NETWORK_INTERFACES_FAILURE
  91, // 3534 -> CONNECTIVITY_WIFI_HOTSPOT_P2P_CHANNEL_INITIALIZE_FAILURE
  83, // 3535 -> CONNECTIVITY_WIFI_DIRECT_P2P_CHANNEL_INITIALIZE_FAILURE
  92, // 3536 -> CONNECTIVITY_WIFI_HOTSPOT_P2P_GROUP_CREATION_FAILURE
  84, // 3537 -> CONNECTIVITY_WIFI_DIRECT_P2P_GROUP_CREATION_FAILURE
  49, // 3538 -> CONNECTIVITY_GATT_SERVER_OPEN_FAILURE
  43, // 3539 -> CONNECTIVITY_BLE_SERVER_SOCKET_CREATION_FAILURE
  56, // 3540 -> CONNECTIVITY_L2CAP_SERVER_SOCKET_CREATION_FAILURE
  47, // 3541 -> CONNECTIVITY_BT_SERVER_SOCKET_CREATION_FAILURE
  60, // 3542 -> CONNECTIVITY_LAN_SERVER_SOCKET_CREATION_FAILURE
  68, // 3543 -> CONNECTIVITY_WEB_RTC_SERVER_SOCKET_CREATION_FAILURE
  77, // 3544 -> CONNECTIVITY_WIFI_AWARE_SERVER_SOCKET_CREATION_FAILURE
  93, // 3545 -> CONNECTIVITY_WIFI_HOTSPOT_SERVER_SOCKET_CREATION_FAILURE
  85, // 3546 -> CONNECTIVITY_WIFI_DIRECT_SERVER_SOCKET_CREATION_FAILURE
  63, // 3547 -> CONNECTIVITY_NFC_SERVER_SOCKET_CREATION_FAILURE
  94, // 3548 -> CONNECTIVITY_WIFI_HOTSPOT_SOFT_AP_CREATION_FAILURE
  78, // 3549 -> CONNECTIVITY_WIFI_AWARE_UPDATE_PUBLISH_FAILURE
  52, // 3550 -> CONNECTIVITY_GENERIC_WRITING_CHANNEL_IO_ERROR
  51, // 3551 -> CONNECTIVITY_GENERIC_WRITE_CLIENT_INTRODUCTION_ACK_IO_ERROR
  71, // 3552 -> CONNECTIVITY_WIFI_AWARE_DISCOVERED_PEER_NULL
  50, // 3553 -> CONNECTIVITY_GENERIC_PAYLOAD_SENT_ERROR
  57, // 3554 -> CONNECTIVITY_L2CAP_SERVER_SOCKET_CREATION_SECURITY_EXCEPTION_FAILURE
  48, // 3555 -> CONNECTIVITY_BT_SERVER_SOCKET_CREATION_SECURITY_EXCEPTION_FAILURE
  171, // 4500 -> NEARBY_BLE_ADVERTISEMENT_MAPPING_TO_MAC_ERROR
  176, // 4501 -> NEARBY_BLUETOOTH_MAC_ADDRESS_INVALID_FOR_CONNECT
  211, // 4502 -> NEARBY_WEB_RTC_CONNECTION_FLOW_NULL
  182, // 4503 -> NEARBY_GENERIC_CONNECTION_CLOSED
  172, // 4504 -> NEARBY_BLE_ENDPOINT_CHANNEL_CREATION_FAILURE
  198, // 4505 -> NEARBY_L2CAP_ENDPOINT_CHANNEL_CREATION_FAILURE
  177, // 4506 -> NEARBY_BT_ENDPOINT_CHANNEL_CREATION_FAILURE
  202, // 4507 -> NEARBY_LAN_ENDPOINT_CHANNEL_CREATION_FAILURE
  207, // 4508 -> NEARBY_NFC_ENDPOINT_CHANNEL_CREATION_FAILURE
  215, // 4509 -> NEARBY_WIFI_AWARE_ENDPOINT_CHANNEL_CREATION_FAILURE
  229, // 4510 -> NEARBY_WIFI_HOTSPOT_ENDPOINT_CHANNEL_CREATION_FAILURE
  218, // 4511 -> NEARBY_WIFI_DIRECT_ENDPOINT_CHANNEL_CREATION_FAILURE
  212, // 4512 -> NEARBY_WEB_RTC_ENDPOINT_CHANNEL_CREATION_FAILURE
  209, // 4513 -> NEARBY_USB_ENDPOINT_CHANNEL_CREATION_FAILURE
  183, // 4514 -> NEARBY_GENERIC_ENDPOINT_UNENCRYPTED
  173, // 4515 -> NEARBY_BLE_GATT_ADVERTISEMENT_NULL_FOR_CONNECTION
  219, // 4516 -> NEARBY_WIFI_DIRECT_HOST_ON_SRD_CHANNELS
  230, // 4517 -> NEARBY_WIFI_HOTSPOT_HOST_ON_SRD_CHANNELS
  174, // 4518 -> NEARBY_BLE_GATT_NULL_CALLBACK
  199, // 4519 -> NEARBY_L2CAP_NULL_CALLBACK
  179, // 4520 -> NEARBY_BT_NULL_CALLBACK
  210, // 4521 -> NEARBY_USB_NULL_CALLBACK
  208, // 4522 -> NEARBY_NFC_NULL_CALLBACK
  216, // 4523 -> NEARBY_WIFI_AWARE_NULL_CALLBACK
  213, // 4524 -> NEARBY_WEB_RTC_NULL_CALLBACK
  204, // 4525 -> NEARBY_LAN_NULL_CALLBACK
  233, // 4526 -> NEARBY_WIFI_HOTSPOT_NULL_CALLBACK
  221, // 4527 -> NEARBY_WIFI_DIRECT_NULL_CALLBACK
  223, // 4528 -> NEARBY_WIFI_DIRECT_NULL_SSID
  222, // 4529 -> NEARBY_WIFI_DIRECT_NULL_PASSWORD
  178, // 4530 -> NEARBY_BT_MULTIPLEX_SOCKET_DISABLED
  203, // 4531 -> NEARBY_LAN_MULTIPLEX_SOCKET_DISABLED
  185, // 4532 -> NEARBY_GENERIC_NEW_ENDPOINT_CHANNEL_NULL
  220, // 4533 -> NEARBY_WIFI_DIRECT_NO_GROUP_FOR_LISTENING
  232, // 4534 -> NEARBY_WIFI_HOTSPOT_NO_HOTSPOT_FOR_LISTENING
  186, // 4535 -> NEARBY_GENERIC_OLD_ENDPOINT_CHANNEL_NULL
  175, // 4536 -> NEARBY_BLE_OPERATION_REGISTERED_FAILED
  200, // 4537 -> NEARBY_L2CAP_OPERATION_REGISTERED_FAILED
  180, // 4538 -> NEARBY_BT_OPERATION_REGISTERED_FAILED
  205, // 4539 -> NEARBY_LAN_OPERATION_REGISTERED_FAILED
  214, // 4540 -> NEARBY_WEB_RTC_OPERATION_REGISTERED_FAILED
  217, // 4541 -> NEARBY_WIFI_AWARE_OPERATION_REGISTERED_FAILED
  228, // 4542 -> NEARBY_WIFI_HOTSPOT_DIRECT_OPERATION_REGISTERED_FAILED
  236, // 4543 -> NEARBY_WIFI_HOTSPOT_SOFT_AP_OPERATION_REGISTERED_FAILED
  231, // 4544 -> NEARBY_WIFI_HOTSPOT_LOHS_OPERATION_REGISTERED_FAILED
  227, // 4545 -> NEARBY_WIFI_HOTSPOT_CLIENT_OPERATION_REGISTERED_FAILED
  224, // 4546 -> NEARBY_WIFI_DIRECT_OPERATION_REGISTERED_FAILED
  187, // 4547 -> NEARBY_GENERIC_OUTGOING_PAYLOAD_CREATION_FAILURE
  234, // 4548 -> NEARBY_WIFI_HOTSPOT_P2P_NON_DBS_WANT_2G_BUT_AP_5G
  225, // 4549 -> NEARBY_WIFI_DIRECT_P2P_NON_DBS_WANT_2G_BUT_AP_5G
  235, // 4550 -> NEARBY_WIFI_HOTSPOT_P2P_NON_DBS_WANT_5G_BUT_AP_2G
  226, // 4551 -> NEARBY_WIFI_DIRECT_P2P_NON_DBS_WANT_5G_BUT_AP_2G
  184, // 4552 -> NEARBY_GENERIC_INCOMING_PAYLOAD_NOT_DATA_TYPE
  191, // 4553 -> NEARBY_GENERIC_READ_CLIENT_INTRODUCTION_EVENT_TYPE_ERROR
  193, // 4554 -> NEARBY_GENERIC_READ_CLIENT_INTRODUCTION_FRAME_TYPE_ERROR
  192, // 4555 -> NEARBY_GENERIC_READ_CLIENT_INTRODUCTION_FORMAT_ERROR
  188, // 4556 -> NEARBY_GENERIC_READ_CLIENT_INTRODUCTION_ACK_EVENT_TYPE_ERROR
  190, // 4557 -> NEARBY_GENERIC_READ_CLIENT_INTRODUCTION_ACK_FRAME_TYPE_ERROR
  189, // 4558 -> NEARBY_GENERIC_READ_CLIENT_INTRODUCTION_ACK_FORMAT_ERROR
  194, // 4559 -> NEARBY_GENERIC_REMOTE_ENDPOINT_STATUS_ERROR
  195, // 4560 -> NEARBY_GENERIC_REMOTE_REPORT_PAYLOADS_ERROR
  196, // 4561 -> NEARBY_GENERIC_REMOTE_UPGRADE_FAILURE
  197, // 4562 -> NEARBY_GENERIC_SEND_PAYLOAD_EXECUTOR_NULL
  181, // 4563 -> NEARBY_BT_VIRTUAL_SOCKET_CREATION_FAILURE
  206, // 4564 -> NEARBY_LAN_VIRTUAL_SOCKET_CREATION_FAILURE
  237, // 4565 -> NEARBY_WIFI_LAN_IP_ADDRESS_ERROR
  201, // 4566 -> NEARBY_L2CAP_PSM_NOT_POSITIVE
};

const std::string& OperationResultDetail_Name(
    OperationResultDetail value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OperationResultDetail_entries,
          OperationResultDetail_entries_by_number,
          238, OperationResultDetail_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OperationResultDetail_entries,
      OperationResultDetail_entries_by_number,
      238, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OperationResultDetail_strings[idx].get();
}
bool OperationResultDetail_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OperationResultDetail* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OperationResultDetail_entries, 238, name, &int_value);
  if (success) {
    *value = static_cast<OperationResultDetail>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace connections
}  // namespace proto
}  // namespace nearby
}  // namespace location
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
