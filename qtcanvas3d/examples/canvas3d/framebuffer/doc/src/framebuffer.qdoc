/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtCanvas3D module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** "Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example framebuffer
    \since QtCanvas3D 1.0
    \title Framebuffer Example
    \ingroup qtcanvas3d-examples
    \brief Render into a framebuffer and use it as a texture.

    The Framebuffer Example shows how to render into a framebuffer, create a
    texture of it, and apply the texture to an object in normal on-screen
    rendering.

    The example has a moving and rotating cube, which has another textured
    cube drawn into it via the framebuffer object. The cube in the framebuffer
    can be rotated using \l [QML] {Slider}s from \l {Qt Quick Controls}.

    \image framebuffer-example.png

    \section1 Preparing the Framebuffer

    We first define the variables we need for the render-to-texture
    framebuffer:

    \snippet framebuffer/qml/framebuffer/framebuffer.js 0

    Then, in the \c initializeGL function, we create the framebuffer object:

    \snippet framebuffer/qml/framebuffer/framebuffer.js 1

    \section1 Creating the Texture

    After the creation of the framebuffer, we create the texture:

    \snippet framebuffer/qml/framebuffer/framebuffer.js 2

    Then we need to bind the texture as a color attachment, create and bind
    a render buffer, and bind the depth attachment:

    \snippet framebuffer/qml/framebuffer/framebuffer.js 3

    \section1 Rendering into the Framebuffer

    In \c paintGL function, we first need to draw the scene into the
    framebuffer. We start by binding the framebuffer object and setting a
    viewport:

    \snippet framebuffer/qml/framebuffer/framebuffer.js 4

    Then, we need to bind the loaded texture we want to use in rendering
    into the framebuffer object:

    \snippet framebuffer/qml/framebuffer/framebuffer.js 5

    And then we can draw the textured cube into the framebuffer:

    \snippet framebuffer/qml/framebuffer/framebuffer.js 6

    \section1 Using the Framebuffer as a Texture

    First, we bind the render-to-texture right after drawing, and generate
    mipmaps:

    \snippet framebuffer/qml/framebuffer/framebuffer.js 7

    Then we need to bind the default framebuffer (screen), and set up the
    viewport:

    \snippet framebuffer/qml/framebuffer/framebuffer.js 8

    And finally, we draw the on-screen view:

    \snippet framebuffer/qml/framebuffer/framebuffer.js 9
 */
