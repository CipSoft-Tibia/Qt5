/****************************************************************************
**
** Copyright (C) 2014 NVIDIA Corporation.
** Copyright (C) 2019 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qt 3D Studio.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

vec3 evalEnvironmentMap( in vec3 R, float roughness )
{
     // convert R to spherical texture coordinates
     vec2 tc = vec2( ( atan( R.x, -R.z ) + PI ) / ( PI_TWO ), acos( -R.y ) / PI );

    vec2 envMapSize = vec2( textureSize( uEnvironmentTexture, 0 ) );
    float envMapLevels = log2( max( envMapSize.x, envMapSize.y ) );

    // simulate textureQueryLod
    vec2 dx = dFdx( tc * envMapSize.x );
    vec2 dy = dFdy( tc * envMapSize.y );

    float px = dot( dx, dx );
    float py = dot( dy, dy );

    float maxlod = 0.5 * log2( max( px, py ) ); // log2(sqrt()) = 0.5*log2()
    float minlod = 0.5 * log2( min( px, py ) );

    //float lod = max(0.0, maxlod - min( maxlod - minlod, envMapLevels ));
    float lod = max(0.0, min( minlod, envMapLevels ));

    float roughLevel = mix( lod , envMapLevels, roughness );

    return( textureLod( uEnvironmentTexture, tc, roughLevel ).rgb );
}
