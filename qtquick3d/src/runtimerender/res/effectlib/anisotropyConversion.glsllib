/****************************************************************************
**
** Copyright (C) 2014-2015 NVIDIA Corporation.
** Copyright (C) 2019 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qt 3D Studio.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/


// TODO: real implementation
anisotropy_return anisotropyConversion( in float roughness, in float anisotropy, in float anisotropyRotation, in vec3 tangentU, bool miaAnisotropySemantic )
{
  anisotropy_return aniso;
  float angle = 2.0 * PI * anisotropyRotation;
  float cos_angle = cos(angle);
  float sin_angle = sin(angle);
  aniso.tangent_u = normalize( cos_angle * tangentU + sin_angle * binormal );
  // roughness
  float anisoFac = 1.0 - clamp(anisotropy, 0.0, 0.999);
  aniso.roughness_v = clamp( roughness / anisoFac, 0.0001, 1.0);
  aniso.roughness_u = clamp( aniso.roughness_v * anisoFac, 0.0001, 1.0);
  return( aniso );
}

