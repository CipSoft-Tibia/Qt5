/****************************************************************************
**
** Copyright (C) 2014 NVIDIA Corporation.
** Copyright (C) 2019 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qt 3D Studio.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#ifndef CUSTOM_MATERIAL_FRAG_BODY_GLSLLIB
#define CUSTOM_MATERIAL_FRAG_BODY_GLSLLIB

  bool twoSided = false;
  vec3 materialEmissive = vec3( 0.0, 0.0, 0.0 );

  float materialIOR = computeIOR();

  if ( gl_FrontFacing )
  {
    materialEmissive = computeFrontMaterialEmissive() * computeMaterialEmissiveMask();
  }
  else
  {
    materialIOR = 1.0 / materialIOR;
    twoSided = evalTwoSided();
    if ( twoSided )
    {
      normal = -normal;
      materialEmissive = computeBackMaterialEmissive() * computeMaterialEmissiveMask();
    }
  }

  vec4 rgba = vec4( materialEmissive, 0.0 );

  vec3 lightAmbient, lightDiffuse, lightSpecular, L;
  for ( int i=0 ; i<lightCount ; i++ )
  {
    sampleLight( lights[i], varWorldPos, L, lightAmbient, lightDiffuse, lightSpecular);
    //evalTemporariesPerLightSource( normal, L, lightDiffuse, lightSpecular, materialIOR );
    if (gl_FrontFacing)
      computeFrontLayerColor( normal, L, viewDir, lightDiffuse, lightSpecular, materialIOR, 1.0 );
    else
      computeBackLayerColor( normal, L, viewDir, lightDiffuse, lightSpecular, materialIOR, 1.0 );
  }
  for ( int i=0 ; i < areaLightCount; ++i )
  {
    if (gl_FrontFacing)
      computeFrontAreaColor( i, arealights[i].diffuse, arealights[i].specular );
    else
      computeBackAreaColor( i, arealights[i].diffuse, arealights[i].specular );
  }

  if ( 0.0 < alpha )
  {
    if (gl_FrontFacing)
      computeFrontLayerEnvironment( normal, viewDir, 1.0 );
    else
      computeBackLayerEnvironment( normal, viewDir, 1.0 );
  }

  rgba += computeLayerWeights( alpha );

#endif
