/****************************************************************************
**
** Copyright (C) 2014 NVIDIA Corporation.
** Copyright (C) 2019 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qt 3D Studio.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#ifndef DEFAULT_MATERIAL_FRESNEL_GLSLLIB
#define DEFAULT_MATERIAL_FRESNEL_GLSLLIB

float dielectricSpecular(in float ior)
{
    return ((1.0-ior) * (1.0-ior)) / ((1.0+ior) * (1.0+ior));
}

vec3 defaultMaterialSimpleFresnel(in vec3 baseColor, in float metalness, in vec3 N, in vec3 viewDir,
                                  in float ds, float fresnelPower)
{
    vec3 dielectricColor = vec3(ds);
    vec3 F = mix(dielectricColor, baseColor, metalness);
    float VdotN = max(dot(viewDir, N), 0.0);
    return F + (vec3(1.0) - F) * pow(1.0 - VdotN, fresnelPower);
}

vec3 defaultMaterialSimpleFresnelNoMetalness(in vec3 N, in vec3 viewDir,
                                             in float ds, float fresnelPower)
{
    vec3 F = vec3(ds);
    float VdotN = max(dot(viewDir, N), 0.0);
    return F + (vec3(1.0) - F) * pow(1.0 - VdotN, fresnelPower);
}

#endif
