/****************************************************************************
**
** Copyright (C) 2014 NVIDIA Corporation.
** Copyright (C) 2019 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qt 3D Studio.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include "funcdiffuseReflectionBSDF.glsllib"
#include "funcdiffuseReflectionWrapBSDF.glsllib"

vec4 lambertReflectionBSDF( in vec3 N, in vec3 L, in vec3 lightDiffuse )
{
  // If we're not going to use the roughness on the diffuse, there's no point
  // in wasting the cycles for the branching.
  float cosThetaI = max( 0.0, dot( N, L ) );
  return vec4( cosThetaI * lightDiffuse, 1.0 );
}


vec4 diffuseReflectionBSDFEnvironment( in vec3 N, in float roughness )
{
  return( vec4( 0.0, 0.0, 0.0, 1.0 ) );
}

// RNM radiosity normal maps
vec4 diffuseRNM( in vec3 N, in vec3 rnmX, in vec3 rnmY, in vec3 rnmZ )
{
  // we use a fixed basis like Half Life
  vec3 B0 = vec3( -0.40825, 0.70711, 0.57735);
  vec3 B1 = vec3( -0.40825, -0.70711, 0.57735);
  vec3 B2 = vec3( 0.8165, 0.0, 0.57735);

  vec3 dp;
  dp.x = clamp( dot ( N , B0 ), 0.0, 1.0);
  dp.y = clamp( dot ( N , B1 ), 0.0, 1.0);
  dp.z = clamp( dot ( N , B2 ), 0.0, 1.0);

  float sum = 1.0 / dot( dp, vec3(1.0, 1.0, 1.0) );
  vec3 diffuseLight = dp.x * rnmX + dp.y * rnmY + dp.z * rnmZ;
  //vec3 diffuseLight = N.x * rnmX + N.y * rnmY + N.z * rnmZ;

  return (vec4(diffuseLight, 1.0) * sum);
}
