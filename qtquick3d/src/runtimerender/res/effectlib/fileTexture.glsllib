/****************************************************************************
**
** Copyright (C) 2014 NVIDIA Corporation.
** Copyright (C) 2019 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qt 3D Studio.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

texture_return fileTexture( in sampler2D sampler, in vec3 colorOffset, in vec3 colorScale, in int monoSource, in texture_coordinate_info uvw
                          , in vec2 cropU, in vec2 cropV, in int wrapU, in int wrapV, in int gammaMode )
{
  vec4 t4 = texture( sampler, uvw.position.xy );
  vec3 t3 = colorOffset + colorScale * t4.xyz;

  // When we want to operate in linear color space uncomment the lines
  if ( gammaMode == gamma_srgb )
  {
    t3 = pow( t3, vec3( 2.2 ) );
  }

  texture_return tr;
  tr.tint = t3;
  tr.mono = monoChannel( vec4( t3, t4.w ), monoSource );
  return( tr );
}

