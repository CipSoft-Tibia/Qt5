/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!

\page videooverview.html
\title Video Overview
\brief Video playback

\section1 Video Features

Qt Multimedia offers both high and low level C++ classes for playing and
manipulating video data, and QML types for playback and control.  Some
of these classes also overlap with both \l {Camera Overview}{camera} and
\l {Audio Overview}{audio} classes, which can be useful.

\section1 Video Implementation Details

\target multimedia-playing-video
\section2 Playing Video in C++

You can use the \l QMediaPlayer class to decode a video file, and display
it using \l QVideoWidget, \l QGraphicsVideoItem, or a custom class.

Here's an example of using QVideoWidget:
    \snippet multimedia-snippets/video.cpp Video widget

And an example with QGraphicsVideoItem:
    \snippet multimedia-snippets/video.cpp Video graphics item

\section2 Playing Video in QML

You can use \l VideoOutput to render content that is
provided by either a \l MediaPlayer or a \l Camera.
The VideoOutput is a visual component that can be transformed
or acted upon by shaders (as the \l {QML Video Shader Effects Example} shows), while
all media decoding and playback control is handled by the \l MediaPlayer.

Alternatively there is also a higher level \l Video type that
acts as a single, visual element to play video and control playback.

\section2 Working with Low Level Video Frames

Qt Multimedia offers a number of low level classes to make handling
video frames a bit easier.  These classes are primarily used when
writing code that processes video or camera frames (for example,
detecting barcodes, or applying a fancy vignette effect), or needs
to display video in a special way that is otherwise unsupported.

The \l QVideoFrame class encapsulates a video frame and allows the
contents to be mapped into system memory for manipulation or
processing, while deriving a class from \l QAbstractVideoSurface
allows you to receive these frames from \l QMediaPlayer and
\l QCamera.

\snippet multimedia-snippets/video.cpp Derived Surface

and with an instance of this surface, \c myVideoSurface, you can set
the surface as the \l {QMediaPlayer::setVideoOutput()}{video output} for QMediaPlayer.

\snippet multimedia-snippets/video.cpp Setting surface in player

Several of the built-in Qt classes offer this functionality
as well, so if you decode video in your application, you can present
it to classes that offer a \l QVideoRendererControl class, and in QML
you can set a custom object for the source of a \l VideoOutput
with either a writable \c videoSurface property (that the instance will
set it's internal video surface to) or a readable \c mediaObject property
with a QMediaObject derived class that implements the \l QVideoRendererControl
interface.

The following snippet shows a class that has a writable \c videoSurface property
and receives frames through a public slot \c onNewVideoContentReceived(). These
frames are then presented on the surface set in \c setVideoSurface().

\snippet multimedia-snippets/video.cpp Video producer

\section2 Recording Video
You can use the \l QMediaRecorder class in conjunction with other
classes to record video to disk.  Primarily this is used with
the camera, so consult the \l {Camera Overview} for more information.

\section2 Monitoring Video Frames
You can use the \l QVideoProbe class to access video frames as they
flow through different parts of a media pipeline when using other
classes like \l QMediaPlayer, \l QMediaRecorder or \l QCamera.  After
creating the high level media class, you can set the source of the
video probe to that instance.  This can be useful for performing
some video processing tasks (like barcode recognition, or object
detection) while the video is rendered normally.  You can not affect
the video frames using this class, and they may arrive at a slightly
different time than they are being rendered.

Here's an example of installing a video probe while recording the camera:
    \snippet multimedia-snippets/media.cpp Video probe

\section1 Examples

There are both C++ and QML examples available.

\section2 C++ Examples

\annotatedlist video_examples

\section2 QML Examples

\annotatedlist video_examples_qml

\section1 Reference Documentation

\section2 C++ Classes

\annotatedlist multimedia_video

\section2 QML Types

\annotatedlist multimedia_video_qml

*/
