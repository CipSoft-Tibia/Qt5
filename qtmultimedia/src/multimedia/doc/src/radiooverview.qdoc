/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!

\page radiooverview.html
\title Radio Overview
\brief An API to control system radio tuner

The Qt Multimedia API provides a number of radio related classes for control
over the radio tuner of the system, and gives access to Radio Data System
(RDS) information for radio stations that broadcasts it.

\section1 Radio Features

The Radio API consists of two separate components. The radio tuner,
\l QRadioTuner or the \l Radio QML type, which handles control of
the radio hardware as well as tuning. The other is the radio data
component, either \l QRadioData or the \l RadioData QML type, which
gives access to RDS information.

\section1 Radio Implementation Details

The actual level of support depends on the underlying system support. It should
be noted that only analog radio is supported, and the properties of the radio
data component will only be populated if the system radio tuner supports RDS.

\section1 Examples

There are two examples showing the usage of the Radio API. One shows how to use
the QRadioTuner class from C++. The other shows how to implement a similar
application using QML and \l Radio.

\section2 Radio Example

This image shows the example using the QRadioTuner API.

\image radio-example.png

The example reads the frequency from the radio tuner, and sets the "Got Signal"
text based on the signal strength. The buttons allow the user to tune and scan
up and down the frequency band, while the slider to the side allows volume
adjustments.

Only the FM frequency band is used in this example.

\section2 Declarative Radio Example

\image declarative-radio-example.png

This example has the same functionality of the regular radio example mentioned
above, but it includes a nice horizontal dial showing the position of the
current frequency inside the band.

\section1 Reference documentation

\section2 C++ Classes

\annotatedlist multimedia_radio

\section2 QML Types

\annotatedlist multimedia_radio_qml

*/
