import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable QtWayland.Compositor.QtShell 6.2'
//
// qmlplugindump is deprecated! You should use qmltyperegistrar instead.

Module {
    Component {
        name: "QQuickAnchors"
        prototype: "QObject"
        Enum {
            name: "Anchors"
            values: {
                "InvalidAnchor": 0,
                "LeftAnchor": 1,
                "RightAnchor": 2,
                "TopAnchor": 4,
                "BottomAnchor": 8,
                "HCenterAnchor": 16,
                "VCenterAnchor": 32,
                "BaselineAnchor": 64,
                "Horizontal_Mask": 19,
                "Vertical_Mask": 108
            }
        }
        Property { name: "left"; type: "QQuickAnchorLine" }
        Property { name: "right"; type: "QQuickAnchorLine" }
        Property { name: "horizontalCenter"; type: "QQuickAnchorLine" }
        Property { name: "top"; type: "QQuickAnchorLine" }
        Property { name: "bottom"; type: "QQuickAnchorLine" }
        Property { name: "verticalCenter"; type: "QQuickAnchorLine" }
        Property { name: "baseline"; type: "QQuickAnchorLine" }
        Property { name: "margins"; type: "double" }
        Property { name: "leftMargin"; type: "double" }
        Property { name: "rightMargin"; type: "double" }
        Property { name: "horizontalCenterOffset"; type: "double" }
        Property { name: "topMargin"; type: "double" }
        Property { name: "bottomMargin"; type: "double" }
        Property { name: "verticalCenterOffset"; type: "double" }
        Property { name: "baselineOffset"; type: "double" }
        Property { name: "fill"; type: "QQuickItem"; isPointer: true }
        Property { name: "centerIn"; type: "QQuickItem"; isPointer: true }
        Property { name: "alignWhenCentered"; type: "bool" }
        Signal { name: "centerAlignedChanged" }
    }
    Component {
        name: "QQuickColorGroup"
        prototype: "QObject"
        Property { name: "alternateBase"; type: "QColor" }
        Property { name: "base"; type: "QColor" }
        Property { name: "brightText"; type: "QColor" }
        Property { name: "button"; type: "QColor" }
        Property { name: "buttonText"; type: "QColor" }
        Property { name: "dark"; type: "QColor" }
        Property { name: "highlight"; type: "QColor" }
        Property { name: "highlightedText"; type: "QColor" }
        Property { name: "light"; type: "QColor" }
        Property { name: "link"; type: "QColor" }
        Property { name: "linkVisited"; type: "QColor" }
        Property { name: "mid"; type: "QColor" }
        Property { name: "midlight"; type: "QColor" }
        Property { name: "shadow"; type: "QColor" }
        Property { name: "text"; type: "QColor" }
        Property { name: "toolTipBase"; type: "QColor" }
        Property { name: "toolTipText"; type: "QColor" }
        Property { name: "window"; type: "QColor" }
        Property { name: "windowText"; type: "QColor" }
        Property { name: "placeholderText"; revision: 1538; type: "QColor" }
        Signal { name: "placeholderTextChanged"; revision: 1538 }
        Signal { name: "changed" }
    }
    Component {
        name: "QQuickItem"
        defaultProperty: "data"
        prototype: "QObject"
        Enum {
            name: "Flags"
            values: {
                "ItemClipsChildrenToShape": 1,
                "ItemAcceptsInputMethod": 2,
                "ItemIsFocusScope": 4,
                "ItemHasContents": 8,
                "ItemAcceptsDrops": 16
            }
        }
        Enum {
            name: "TransformOrigin"
            values: {
                "TopLeft": 0,
                "Top": 1,
                "TopRight": 2,
                "Left": 3,
                "Center": 4,
                "Right": 5,
                "BottomLeft": 6,
                "Bottom": 7,
                "BottomRight": 8
            }
        }
        Property { name: "parent"; type: "QQuickItem"; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "resources"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "z"; type: "double" }
        Property { name: "width"; type: "double" }
        Property { name: "height"; type: "double" }
        Property { name: "opacity"; type: "double" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "visible"; type: "bool" }
        Property { name: "palette"; revision: 1536; type: "QQuickPalette"; isPointer: true }
        Property { name: "visibleChildren"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "states"; type: "QQuickState"; isList: true; isReadonly: true }
        Property { name: "transitions"; type: "QQuickTransition"; isList: true; isReadonly: true }
        Property { name: "state"; type: "string" }
        Property { name: "childrenRect"; type: "QRectF"; isReadonly: true }
        Property { name: "anchors"; type: "QQuickAnchors"; isReadonly: true; isPointer: true }
        Property { name: "left"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "right"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "horizontalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "top"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "bottom"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "verticalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baseline"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baselineOffset"; type: "double" }
        Property { name: "clip"; type: "bool" }
        Property { name: "focus"; type: "bool" }
        Property { name: "activeFocus"; type: "bool"; isReadonly: true }
        Property { name: "activeFocusOnTab"; revision: 513; type: "bool" }
        Property { name: "rotation"; type: "double" }
        Property { name: "scale"; type: "double" }
        Property { name: "transformOrigin"; type: "QQuickItem::TransformOrigin" }
        Property { name: "transformOriginPoint"; type: "QPointF"; isReadonly: true }
        Property { name: "transform"; type: "QQuickTransform"; isList: true; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "antialiasing"; type: "bool" }
        Property { name: "implicitWidth"; type: "double" }
        Property { name: "implicitHeight"; type: "double" }
        Property { name: "containmentMask"; revision: 523; type: "QObject"; isPointer: true }
        Property { name: "layer"; type: "QQuickItemLayer"; isReadonly: true; isPointer: true }
        Signal {
            name: "childrenRectChanged"
            Parameter { type: "QRectF" }
        }
        Signal {
            name: "baselineOffsetChanged"
            Parameter { type: "double" }
        }
        Signal {
            name: "stateChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "focusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusOnTabChanged"
            revision: 513
            Parameter { type: "bool" }
        }
        Signal {
            name: "parentChanged"
            Parameter { type: "QQuickItem"; isPointer: true }
        }
        Signal {
            name: "transformOriginChanged"
            Parameter { type: "TransformOrigin" }
        }
        Signal {
            name: "smoothChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "antialiasingChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "clipChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "windowChanged"
            revision: 513
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Signal { name: "containmentMaskChanged"; revision: 523 }
        Signal { name: "paletteChanged"; revision: 1536 }
        Signal { name: "paletteCreated"; revision: 1536 }
        Method { name: "update" }
        Method {
            name: "grabToImage"
            revision: 516
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
            Parameter { name: "targetSize"; type: "QSize" }
        }
        Method {
            name: "grabToImage"
            revision: 516
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapFromItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapToItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapFromGlobal"
            revision: 519
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapToGlobal"
            revision: 519
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method { name: "forceActiveFocus" }
        Method {
            name: "forceActiveFocus"
            Parameter { name: "reason"; type: "Qt::FocusReason" }
        }
        Method {
            name: "nextItemInFocusChain"
            revision: 513
            type: "QQuickItem*"
            Parameter { name: "forward"; type: "bool" }
        }
        Method { name: "nextItemInFocusChain"; revision: 513; type: "QQuickItem*" }
        Method {
            name: "childAt"
            type: "QQuickItem*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
    Component {
        name: "QQuickItemLayer"
        prototype: "QObject"
        Property { name: "enabled"; type: "bool" }
        Property { name: "textureSize"; type: "QSize" }
        Property { name: "sourceRect"; type: "QRectF" }
        Property { name: "mipmap"; type: "bool" }
        Property { name: "smooth"; type: "bool" }
        Property { name: "wrapMode"; type: "QQuickShaderEffectSource::WrapMode" }
        Property { name: "format"; type: "QQuickShaderEffectSource::Format" }
        Property { name: "samplerName"; type: "QByteArray" }
        Property { name: "effect"; type: "QQmlComponent"; isPointer: true }
        Property { name: "textureMirroring"; type: "QQuickShaderEffectSource::TextureMirroring" }
        Property { name: "samples"; type: "int" }
        Signal {
            name: "enabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "sizeChanged"
            Parameter { name: "size"; type: "QSize" }
        }
        Signal {
            name: "mipmapChanged"
            Parameter { name: "mipmap"; type: "bool" }
        }
        Signal {
            name: "wrapModeChanged"
            Parameter { name: "mode"; type: "QQuickShaderEffectSource::WrapMode" }
        }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "QByteArray" }
        }
        Signal {
            name: "effectChanged"
            Parameter { name: "component"; type: "QQmlComponent"; isPointer: true }
        }
        Signal {
            name: "smoothChanged"
            Parameter { name: "smooth"; type: "bool" }
        }
        Signal {
            name: "formatChanged"
            Parameter { name: "format"; type: "QQuickShaderEffectSource::Format" }
        }
        Signal {
            name: "sourceRectChanged"
            Parameter { name: "sourceRect"; type: "QRectF" }
        }
        Signal {
            name: "textureMirroringChanged"
            Parameter { name: "mirroring"; type: "QQuickShaderEffectSource::TextureMirroring" }
        }
        Signal {
            name: "samplesChanged"
            Parameter { name: "count"; type: "int" }
        }
    }
    Component {
        name: "QQuickPalette"
        prototype: "QQuickColorGroup"
        Property { name: "active"; type: "QQuickColorGroup"; isPointer: true }
        Property { name: "inactive"; type: "QQuickColorGroup"; isPointer: true }
        Property { name: "disabled"; type: "QQuickColorGroup"; isPointer: true }
        Method {
            name: "setActive"
            Parameter { name: "active"; type: "QQuickColorGroup"; isPointer: true }
        }
        Method {
            name: "setInactive"
            Parameter { name: "inactive"; type: "QQuickColorGroup"; isPointer: true }
        }
        Method {
            name: "setDisabled"
            Parameter { name: "disabled"; type: "QQuickColorGroup"; isPointer: true }
        }
    }
    Component { name: "QWaylandCompositorExtension"; prototype: "QWaylandObject" }
    Component { name: "QWaylandObject"; prototype: "QObject" }
    Component {
        name: "QWaylandQtShell"
        prototype: "QWaylandCompositorExtension"
        Signal {
            name: "qtShellSurfaceRequested"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "windowId"; type: "uint" }
            Parameter { name: "resource"; type: "QWaylandResource" }
        }
        Signal {
            name: "qtShellSurfaceCreated"
            Parameter { name: "qtShellSurface"; type: "QWaylandQtShellSurface"; isPointer: true }
        }
    }
    Component {
        name: "QWaylandQtShellChrome"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QtWayland.Compositor.QtShell/QtShellChrome 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "hasDecorations"; type: "bool"; isReadonly: true }
        Property { name: "windowState"; type: "uint"; isReadonly: true }
        Property { name: "windowFlags"; type: "uint"; isReadonly: true }
        Property { name: "shellSurfaceItem"; type: "QWaylandQuickShellSurfaceItem"; isPointer: true }
        Property { name: "maximizedRect"; type: "QRect" }
        Property { name: "frameMarginLeft"; type: "int" }
        Property { name: "frameMarginRight"; type: "int" }
        Property { name: "frameMarginTop"; type: "int" }
        Property { name: "frameMarginBottom"; type: "int" }
        Property { name: "titleBar"; type: "QQuickItem"; isPointer: true }
        Property { name: "leftResizeHandle"; type: "QQuickItem"; isPointer: true }
        Property { name: "rightResizeHandle"; type: "QQuickItem"; isPointer: true }
        Property { name: "topResizeHandle"; type: "QQuickItem"; isPointer: true }
        Property { name: "bottomResizeHandle"; type: "QQuickItem"; isPointer: true }
        Property { name: "topLeftResizeHandle"; type: "QQuickItem"; isPointer: true }
        Property { name: "topRightResizeHandle"; type: "QQuickItem"; isPointer: true }
        Property { name: "bottomLeftResizeHandle"; type: "QQuickItem"; isPointer: true }
        Property { name: "bottomRightResizeHandle"; type: "QQuickItem"; isPointer: true }
        Signal { name: "currentWindowStateChanged" }
        Signal { name: "currentWindowFlagsChanged" }
        Signal { name: "windowMetaInfoChanged" }
        Signal { name: "activated" }
        Signal { name: "deactivated" }
        Signal { name: "clientDestroyed" }
        Signal { name: "frameMarginChanged" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method { name: "toggleMaximized" }
        Method { name: "toggleMinimized" }
        Method { name: "toggleFullScreen" }
        Method { name: "activate" }
        Method { name: "deactivate" }
    }
    Component {
        name: "QWaylandQtShellQuickExtension"
        defaultProperty: "data"
        prototype: "QWaylandQtShell"
        exports: ["QtWayland.Compositor.QtShell/QtShell 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "QWaylandQtShellSurface"
        defaultProperty: "data"
        prototype: "QWaylandShellSurface"
        exports: ["QtWayland.Compositor.QtShell/QtShellSurface 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "surface"; type: "QWaylandSurface"; isReadonly: true; isPointer: true }
        Property { name: "windowId"; type: "uint"; isReadonly: true }
        Property { name: "windowFlags"; type: "uint"; isReadonly: true }
        Property { name: "windowState"; type: "uint"; isReadonly: true }
        Property { name: "windowTitle"; type: "string"; isReadonly: true }
        Property { name: "windowGeometry"; type: "QRect"; isReadonly: true }
        Property { name: "windowPosition"; type: "QPoint" }
        Property { name: "positionAutomatic"; type: "bool"; isReadonly: true }
        Property { name: "minimumSize"; type: "QSize"; isReadonly: true }
        Property { name: "maximumSize"; type: "QSize"; isReadonly: true }
        Property { name: "frameMarginLeft"; type: "int" }
        Property { name: "frameMarginRight"; type: "int" }
        Property { name: "frameMarginTop"; type: "int" }
        Property { name: "frameMarginBottom"; type: "int" }
        Property { name: "active"; type: "bool" }
        Signal { name: "startMove" }
        Signal { name: "startResize" }
        Signal { name: "frameMarginChanged" }
        Signal { name: "raiseRequested" }
        Signal { name: "lowerRequested" }
        Method {
            name: "initialize"
            Parameter { name: "qtShell"; type: "QWaylandQtShell"; isPointer: true }
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "windowId"; type: "uint" }
            Parameter { name: "resource"; type: "QWaylandResource" }
        }
        Method {
            name: "requestWindowGeometry"
            Parameter { name: "windowState"; type: "uint" }
            Parameter { name: "windowGeometry"; type: "QRect" }
        }
        Method { name: "sendClose" }
    }
    Component {
        name: "QWaylandShellSurface"
        prototype: "QWaylandCompositorExtension"
        Property { name: "windowType"; type: "Qt::WindowType"; isReadonly: true }
    }
}
