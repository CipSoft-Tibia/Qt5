<?xml version="1.0"?>
<xqx:module xmlns:xqx="http://www.w3.org/2005/XQueryX"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.w3.org/2005/XQueryX
                                http://www.w3.org/2005/XQueryX/xqueryx.xsd">
  <xqx:mainModule>
    <xqx:prolog>
      <xqx:namespaceDecl>
        <xqx:prefix>functx</xqx:prefix>
        <xqx:uri>http://www.example.com/</xqx:uri>
      </xqx:namespaceDecl>
      <xqx:functionDecl>
        <xqx:functionName xqx:prefix="functx">if-absent</xqx:functionName>
        <xqx:paramList>
          <xqx:param>
            <xqx:varName>arg</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:anyItemType/>
              <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>value</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:anyItemType/>
              <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
        </xqx:paramList>
        <xqx:typeDeclaration>
          <xqx:anyItemType/>
          <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
        </xqx:typeDeclaration>
        <xqx:functionBody>
          <xqx:ifThenElseExpr>
            <xqx:ifClause>
              <xqx:functionCallExpr>
                <xqx:functionName>exists</xqx:functionName>
                <xqx:arguments>
                  <xqx:varRef>
                    <xqx:name>arg</xqx:name>
                  </xqx:varRef>
                </xqx:arguments>
              </xqx:functionCallExpr>
            </xqx:ifClause>
            <xqx:thenClause>
              <xqx:varRef>
                <xqx:name>arg</xqx:name>
              </xqx:varRef>
            </xqx:thenClause>
            <xqx:elseClause>
              <xqx:varRef>
                <xqx:name>value</xqx:name>
              </xqx:varRef>
            </xqx:elseClause>
          </xqx:ifThenElseExpr>
        </xqx:functionBody>
      </xqx:functionDecl>
      <xqx:functionDecl>
        <xqx:functionName xqx:prefix="functx">replace-multi</xqx:functionName>
        <xqx:paramList>
          <xqx:param>
            <xqx:varName>arg</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">string</xqx:atomicType>
              <xqx:occurrenceIndicator>?</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>changeFrom</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">string</xqx:atomicType>
              <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>changeTo</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">string</xqx:atomicType>
              <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
        </xqx:paramList>
        <xqx:typeDeclaration>
          <xqx:atomicType xqx:prefix="xs">string</xqx:atomicType>
          <xqx:occurrenceIndicator>?</xqx:occurrenceIndicator>
        </xqx:typeDeclaration>
        <xqx:functionBody>
          <xqx:ifThenElseExpr>
            <xqx:ifClause>
              <xqx:greaterThanOp>
                <xqx:firstOperand>
                  <xqx:functionCallExpr>
                    <xqx:functionName>count</xqx:functionName>
                    <xqx:arguments>
                      <xqx:varRef>
                        <xqx:name>changeFrom</xqx:name>
                      </xqx:varRef>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:firstOperand>
                <xqx:secondOperand>
                  <xqx:integerConstantExpr>
                    <xqx:value>0</xqx:value>
                  </xqx:integerConstantExpr>
                </xqx:secondOperand>
              </xqx:greaterThanOp>
            </xqx:ifClause>
            <xqx:thenClause>
              <xqx:functionCallExpr>
                <xqx:functionName xqx:prefix="functx">replace-multi</xqx:functionName>
                <xqx:arguments>
                  <xqx:functionCallExpr>
                    <xqx:functionName>replace</xqx:functionName>
                    <xqx:arguments>
                      <xqx:varRef>
                        <xqx:name>arg</xqx:name>
                      </xqx:varRef>
                      <xqx:pathExpr>
                        <xqx:stepExpr>
                          <xqx:filterExpr>
                            <xqx:varRef>
                              <xqx:name>changeFrom</xqx:name>
                            </xqx:varRef>
                          </xqx:filterExpr>
                          <xqx:predicates>
                            <xqx:integerConstantExpr>
                              <xqx:value>1</xqx:value>
                            </xqx:integerConstantExpr>
                          </xqx:predicates>
                        </xqx:stepExpr>
                      </xqx:pathExpr>
                      <xqx:functionCallExpr>
                        <xqx:functionName xqx:prefix="functx">if-absent</xqx:functionName>
                        <xqx:arguments>
                          <xqx:pathExpr>
                            <xqx:stepExpr>
                              <xqx:filterExpr>
                                <xqx:varRef>
                                  <xqx:name>changeTo</xqx:name>
                                </xqx:varRef>
                              </xqx:filterExpr>
                              <xqx:predicates>
                                <xqx:integerConstantExpr>
                                  <xqx:value>1</xqx:value>
                                </xqx:integerConstantExpr>
                              </xqx:predicates>
                            </xqx:stepExpr>
                          </xqx:pathExpr>
                          <xqx:stringConstantExpr>
                            <xqx:value></xqx:value>
                          </xqx:stringConstantExpr>
                        </xqx:arguments>
                      </xqx:functionCallExpr>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                  <xqx:pathExpr>
                    <xqx:stepExpr>
                      <xqx:filterExpr>
                        <xqx:varRef>
                          <xqx:name>changeFrom</xqx:name>
                        </xqx:varRef>
                      </xqx:filterExpr>
                      <xqx:predicates>
                        <xqx:greaterThanOp>
                          <xqx:firstOperand>
                            <xqx:functionCallExpr>
                              <xqx:functionName>position</xqx:functionName>
                              <xqx:arguments>
                              </xqx:arguments>
                            </xqx:functionCallExpr>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:integerConstantExpr>
                              <xqx:value>1</xqx:value>
                            </xqx:integerConstantExpr>
                          </xqx:secondOperand>
                        </xqx:greaterThanOp>
                      </xqx:predicates>
                    </xqx:stepExpr>
                  </xqx:pathExpr>
                  <xqx:pathExpr>
                    <xqx:stepExpr>
                      <xqx:filterExpr>
                        <xqx:varRef>
                          <xqx:name>changeTo</xqx:name>
                        </xqx:varRef>
                      </xqx:filterExpr>
                      <xqx:predicates>
                        <xqx:greaterThanOp>
                          <xqx:firstOperand>
                            <xqx:functionCallExpr>
                              <xqx:functionName>position</xqx:functionName>
                              <xqx:arguments>
                              </xqx:arguments>
                            </xqx:functionCallExpr>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:integerConstantExpr>
                              <xqx:value>1</xqx:value>
                            </xqx:integerConstantExpr>
                          </xqx:secondOperand>
                        </xqx:greaterThanOp>
                      </xqx:predicates>
                    </xqx:stepExpr>
                  </xqx:pathExpr>
                </xqx:arguments>
              </xqx:functionCallExpr>
            </xqx:thenClause>
            <xqx:elseClause>
              <xqx:varRef>
                <xqx:name>arg</xqx:name>
              </xqx:varRef>
            </xqx:elseClause>
          </xqx:ifThenElseExpr>
        </xqx:functionBody>
      </xqx:functionDecl>
    </xqx:prolog>
    <xqx:queryBody>
      <xqx:flworExpr>
        <xqx:letClause>
          <xqx:letClauseItem>
            <xqx:typedVariableBinding>
              <xqx:varName>fr</xqx:varName>
            </xqx:typedVariableBinding>
            <xqx:letExpr>
              <xqx:sequenceExpr>
                <xqx:stringConstantExpr>
                  <xqx:value>[a-c]</xqx:value>
                </xqx:stringConstantExpr>
                <xqx:stringConstantExpr>
                  <xqx:value>def</xqx:value>
                </xqx:stringConstantExpr>
                <xqx:stringConstantExpr>
                  <xqx:value>\d+</xqx:value>
                </xqx:stringConstantExpr>
              </xqx:sequenceExpr>
            </xqx:letExpr>
          </xqx:letClauseItem>
        </xqx:letClause>
        <xqx:returnClause>
          <xqx:flworExpr>
            <xqx:letClause>
              <xqx:letClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>to</xqx:varName>
                </xqx:typedVariableBinding>
                <xqx:letExpr>
                  <xqx:sequenceExpr>
                    <xqx:stringConstantExpr>
                      <xqx:value>x</xqx:value>
                    </xqx:stringConstantExpr>
                    <xqx:stringConstantExpr>
                      <xqx:value>y</xqx:value>
                    </xqx:stringConstantExpr>
                    <xqx:stringConstantExpr>
                      <xqx:value>0</xqx:value>
                    </xqx:stringConstantExpr>
                  </xqx:sequenceExpr>
                </xqx:letExpr>
              </xqx:letClauseItem>
            </xqx:letClause>
            <xqx:returnClause>
              <xqx:functionCallExpr>
                <xqx:functionName xqx:prefix="functx">replace-multi</xqx:functionName>
                <xqx:arguments>
                  <xqx:stringConstantExpr>
                    <xqx:value>abcdef123</xqx:value>
                  </xqx:stringConstantExpr>
                  <xqx:varRef>
                    <xqx:name>fr</xqx:name>
                  </xqx:varRef>
                  <xqx:varRef>
                    <xqx:name>to</xqx:name>
                  </xqx:varRef>
                </xqx:arguments>
              </xqx:functionCallExpr>
            </xqx:returnClause>
          </xqx:flworExpr>
        </xqx:returnClause>
      </xqx:flworExpr>
    </xqx:queryBody>
  </xqx:mainModule>
</xqx:module>
