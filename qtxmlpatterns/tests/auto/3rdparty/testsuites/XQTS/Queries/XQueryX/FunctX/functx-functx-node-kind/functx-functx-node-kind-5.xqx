<?xml version="1.0"?>
<xqx:module xmlns:xqx="http://www.w3.org/2005/XQueryX"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.w3.org/2005/XQueryX
                                http://www.w3.org/2005/XQueryX/xqueryx.xsd">
  <xqx:mainModule>
    <xqx:prolog>
      <xqx:namespaceDecl>
        <xqx:prefix>functx</xqx:prefix>
        <xqx:uri>http://www.example.com/</xqx:uri>
      </xqx:namespaceDecl>
      <xqx:functionDecl>
        <xqx:functionName xqx:prefix="functx">node-kind</xqx:functionName>
        <xqx:paramList>
          <xqx:param>
            <xqx:varName>nodes</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:anyKindTest/>
              <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
        </xqx:paramList>
        <xqx:typeDeclaration>
          <xqx:atomicType xqx:prefix="xs">string</xqx:atomicType>
          <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
        </xqx:typeDeclaration>
        <xqx:functionBody>
          <xqx:flworExpr>
            <xqx:forClause>
              <xqx:forClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>node</xqx:varName>
                </xqx:typedVariableBinding>
                <xqx:forExpr>
                  <xqx:varRef>
                    <xqx:name>nodes</xqx:name>
                  </xqx:varRef>
                </xqx:forExpr>
              </xqx:forClauseItem>
            </xqx:forClause>
            <xqx:returnClause>
              <xqx:ifThenElseExpr>
                <xqx:ifClause>
                  <xqx:instanceOfExpr>
                    <xqx:argExpr>
                      <xqx:varRef>
                        <xqx:name>node</xqx:name>
                      </xqx:varRef>
                    </xqx:argExpr>
                    <xqx:sequenceType>
                      <xqx:elementTest/>
                    </xqx:sequenceType>
                  </xqx:instanceOfExpr>
                </xqx:ifClause>
                <xqx:thenClause>
                  <xqx:stringConstantExpr>
                    <xqx:value>element</xqx:value>
                  </xqx:stringConstantExpr>
                </xqx:thenClause>
                <xqx:elseClause>
                  <xqx:ifThenElseExpr>
                    <xqx:ifClause>
                      <xqx:instanceOfExpr>
                        <xqx:argExpr>
                          <xqx:varRef>
                            <xqx:name>node</xqx:name>
                          </xqx:varRef>
                        </xqx:argExpr>
                        <xqx:sequenceType>
                          <xqx:attributeTest/>
                        </xqx:sequenceType>
                      </xqx:instanceOfExpr>
                    </xqx:ifClause>
                    <xqx:thenClause>
                      <xqx:stringConstantExpr>
                        <xqx:value>attribute</xqx:value>
                      </xqx:stringConstantExpr>
                    </xqx:thenClause>
                    <xqx:elseClause>
                      <xqx:ifThenElseExpr>
                        <xqx:ifClause>
                          <xqx:instanceOfExpr>
                            <xqx:argExpr>
                              <xqx:varRef>
                                <xqx:name>node</xqx:name>
                              </xqx:varRef>
                            </xqx:argExpr>
                            <xqx:sequenceType>
                              <xqx:textTest/>
                            </xqx:sequenceType>
                          </xqx:instanceOfExpr>
                        </xqx:ifClause>
                        <xqx:thenClause>
                          <xqx:stringConstantExpr>
                            <xqx:value>text</xqx:value>
                          </xqx:stringConstantExpr>
                        </xqx:thenClause>
                        <xqx:elseClause>
                          <xqx:ifThenElseExpr>
                            <xqx:ifClause>
                              <xqx:instanceOfExpr>
                                <xqx:argExpr>
                                  <xqx:varRef>
                                    <xqx:name>node</xqx:name>
                                  </xqx:varRef>
                                </xqx:argExpr>
                                <xqx:sequenceType>
                                  <xqx:documentTest/>
                                </xqx:sequenceType>
                              </xqx:instanceOfExpr>
                            </xqx:ifClause>
                            <xqx:thenClause>
                              <xqx:stringConstantExpr>
                                <xqx:value>document-node</xqx:value>
                              </xqx:stringConstantExpr>
                            </xqx:thenClause>
                            <xqx:elseClause>
                              <xqx:ifThenElseExpr>
                                <xqx:ifClause>
                                  <xqx:instanceOfExpr>
                                    <xqx:argExpr>
                                      <xqx:varRef>
                                        <xqx:name>node</xqx:name>
                                      </xqx:varRef>
                                    </xqx:argExpr>
                                    <xqx:sequenceType>
                                      <xqx:commentTest/>
                                    </xqx:sequenceType>
                                  </xqx:instanceOfExpr>
                                </xqx:ifClause>
                                <xqx:thenClause>
                                  <xqx:stringConstantExpr>
                                    <xqx:value>comment</xqx:value>
                                  </xqx:stringConstantExpr>
                                </xqx:thenClause>
                                <xqx:elseClause>
                                  <xqx:ifThenElseExpr>
                                    <xqx:ifClause>
                                      <xqx:instanceOfExpr>
                                        <xqx:argExpr>
                                          <xqx:varRef>
                                            <xqx:name>node</xqx:name>
                                          </xqx:varRef>
                                        </xqx:argExpr>
                                        <xqx:sequenceType>
                                          <xqx:piTest/>
                                        </xqx:sequenceType>
                                      </xqx:instanceOfExpr>
                                    </xqx:ifClause>
                                    <xqx:thenClause>
                                      <xqx:stringConstantExpr>
                                        <xqx:value>processing-instruction</xqx:value>
                                      </xqx:stringConstantExpr>
                                    </xqx:thenClause>
                                    <xqx:elseClause>
                                      <xqx:stringConstantExpr>
                                        <xqx:value>unknown</xqx:value>
                                      </xqx:stringConstantExpr>
                                    </xqx:elseClause>
                                  </xqx:ifThenElseExpr>
                                </xqx:elseClause>
                              </xqx:ifThenElseExpr>
                            </xqx:elseClause>
                          </xqx:ifThenElseExpr>
                        </xqx:elseClause>
                      </xqx:ifThenElseExpr>
                    </xqx:elseClause>
                  </xqx:ifThenElseExpr>
                </xqx:elseClause>
              </xqx:ifThenElseExpr>
            </xqx:returnClause>
          </xqx:flworExpr>
        </xqx:functionBody>
      </xqx:functionDecl>
    </xqx:prolog>
    <xqx:queryBody>
      <xqx:flworExpr>
        <xqx:letClause>
          <xqx:letClauseItem>
            <xqx:typedVariableBinding>
              <xqx:varName>in-xml</xqx:varName>
            </xqx:typedVariableBinding>
            <xqx:letExpr>
              <xqx:elementConstructor>
                <xqx:tagName>in-xml</xqx:tagName>
                <xqx:elementContent>
                  <xqx:computedCommentConstructor>
                    <xqx:argExpr>
                      <xqx:stringConstantExpr>
                        <xqx:value> this is in-xml </xqx:value>
                      </xqx:stringConstantExpr>
                    </xqx:argExpr>
                  </xqx:computedCommentConstructor>
                  <xqx:computedPIConstructor>
                    <xqx:piTarget>test</xqx:piTarget>
                    <xqx:piValueExpr>
                      <xqx:stringConstantExpr>
                        <xqx:value>see</xqx:value>
                      </xqx:stringConstantExpr>
                    </xqx:piValueExpr>
                  </xqx:computedPIConstructor>
                  <xqx:elementConstructor>
                    <xqx:tagName>a</xqx:tagName>
                    <xqx:attributeList>
                      <xqx:attributeConstructor>
                        <xqx:attributeName>z</xqx:attributeName>
                        <xqx:attributeValue>2</xqx:attributeValue>
                      </xqx:attributeConstructor>
                    </xqx:attributeList>
                    <xqx:elementContent>
                      <xqx:stringConstantExpr>
                        <xqx:value>xyz</xqx:value>
                      </xqx:stringConstantExpr>
                    </xqx:elementContent>
                  </xqx:elementConstructor>
                </xqx:elementContent>
              </xqx:elementConstructor>
            </xqx:letExpr>
          </xqx:letClauseItem>
        </xqx:letClause>
        <xqx:returnClause>
          <xqx:functionCallExpr>
            <xqx:functionName xqx:prefix="functx">node-kind</xqx:functionName>
            <xqx:arguments>
              <xqx:pathExpr>
                <xqx:stepExpr>
                  <xqx:filterExpr>
                    <xqx:varRef>
                      <xqx:name>in-xml</xqx:name>
                    </xqx:varRef>
                  </xqx:filterExpr>
                </xqx:stepExpr>
                <xqx:stepExpr>
                  <xqx:xpathAxis>child</xqx:xpathAxis>
                  <xqx:nameTest>a</xqx:nameTest>
                </xqx:stepExpr>
                <xqx:stepExpr>
                  <xqx:xpathAxis>child</xqx:xpathAxis>
                  <xqx:textTest/>
                </xqx:stepExpr>
              </xqx:pathExpr>
            </xqx:arguments>
          </xqx:functionCallExpr>
        </xqx:returnClause>
      </xqx:flworExpr>
    </xqx:queryBody>
  </xqx:mainModule>
</xqx:module>
