<?xml version="1.0"?>
<xqx:module xmlns:xqx="http://www.w3.org/2005/XQueryX"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.w3.org/2005/XQueryX
                                http://www.w3.org/2005/XQueryX/xqueryx.xsd">
  <xqx:mainModule>
    <xqx:prolog>
      <xqx:schemaImport>
        <xqx:namespacePrefix>ipo</xqx:namespacePrefix>
        <xqx:targetNamespace>http://www.example.com/IPO</xqx:targetNamespace>
      </xqx:schemaImport>
      <xqx:schemaImport>
        <xqx:namespacePrefix>pst</xqx:namespacePrefix>
        <xqx:targetNamespace>http://www.example.com/postals</xqx:targetNamespace>
      </xqx:schemaImport>
      <xqx:schemaImport>
        <xqx:namespacePrefix>zips</xqx:namespacePrefix>
        <xqx:targetNamespace>http://www.example.com/zips</xqx:targetNamespace>
      </xqx:schemaImport>
      <xqx:moduleImport>
        <xqx:namespacePrefix>zok</xqx:namespacePrefix>
        <xqx:targetNamespace>http://www.example.com/xq/zips</xqx:targetNamespace>
      </xqx:moduleImport>
      <xqx:moduleImport>
        <xqx:namespacePrefix>pok</xqx:namespacePrefix>
        <xqx:targetNamespace>http://www.example.com/xq/postals</xqx:targetNamespace>
      </xqx:moduleImport>
      <xqx:varDecl>
        <xqx:varName>input-context</xqx:varName>
        <xqx:external/>
      </xqx:varDecl>
      <xqx:functionDecl>
        <xqx:functionName xqx:prefix="local">address-ok</xqx:functionName>
        <xqx:paramList>
          <xqx:param>
            <xqx:varName>a</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:elementTest>
                <xqx:elementName>
                  <xqx:star/>
                </xqx:elementName>
                <xqx:typeName xqx:prefix="ipo">Address</xqx:typeName>
              </xqx:elementTest>
            </xqx:typeDeclaration>
          </xqx:param>
        </xqx:paramList>
        <xqx:typeDeclaration>
          <xqx:atomicType xqx:prefix="xs">boolean</xqx:atomicType>
        </xqx:typeDeclaration>
        <xqx:functionBody>
          <xqx:typeswitchExpr>
            <xqx:argExpr>
              <xqx:varRef>
                <xqx:name>a</xqx:name>
              </xqx:varRef>
            </xqx:argExpr>
            <xqx:typeswitchExprCaseClause>
              <xqx:variableBinding>zip</xqx:variableBinding>
              <xqx:sequenceType>
                <xqx:elementTest>
                  <xqx:elementName>
                    <xqx:star/>
                  </xqx:elementName>
                  <xqx:typeName xqx:prefix="ipo">USAddress</xqx:typeName>
                </xqx:elementTest>
              </xqx:sequenceType>
              <xqx:resultExpr>
                <xqx:functionCallExpr>
                  <xqx:functionName xqx:prefix="zok">zip-ok</xqx:functionName>
                  <xqx:arguments>
                    <xqx:varRef>
                      <xqx:name>zip</xqx:name>
                    </xqx:varRef>
                  </xqx:arguments>
                </xqx:functionCallExpr>
              </xqx:resultExpr>
            </xqx:typeswitchExprCaseClause>
            <xqx:typeswitchExprCaseClause>
              <xqx:variableBinding>postal</xqx:variableBinding>
              <xqx:sequenceType>
                <xqx:elementTest>
                  <xqx:elementName>
                    <xqx:star/>
                  </xqx:elementName>
                  <xqx:typeName xqx:prefix="ipo">UKAddress</xqx:typeName>
                </xqx:elementTest>
              </xqx:sequenceType>
              <xqx:resultExpr>
                <xqx:functionCallExpr>
                  <xqx:functionName xqx:prefix="pok">postal-ok</xqx:functionName>
                  <xqx:arguments>
                    <xqx:varRef>
                      <xqx:name>postal</xqx:name>
                    </xqx:varRef>
                  </xqx:arguments>
                </xqx:functionCallExpr>
              </xqx:resultExpr>
            </xqx:typeswitchExprCaseClause>
            <xqx:typeswitchExprDefaultClause>
              <xqx:resultExpr>
                <xqx:functionCallExpr>
                  <xqx:functionName>false</xqx:functionName>
                  <xqx:arguments>
                  </xqx:arguments>
                </xqx:functionCallExpr>
              </xqx:resultExpr>
            </xqx:typeswitchExprDefaultClause>
          </xqx:typeswitchExpr>
        </xqx:functionBody>
      </xqx:functionDecl>
    </xqx:prolog>
    <xqx:queryBody>
      <xqx:flworExpr>
        <xqx:forClause>
          <xqx:forClauseItem>
            <xqx:typedVariableBinding>
              <xqx:varName>p</xqx:varName>
            </xqx:typedVariableBinding>
            <xqx:forExpr>
              <xqx:pathExpr>
                <xqx:stepExpr>
                  <xqx:filterExpr>
                    <xqx:varRef>
                      <xqx:name>input-context</xqx:name>
                    </xqx:varRef>
                  </xqx:filterExpr>
                </xqx:stepExpr>
                <xqx:stepExpr>
                  <xqx:xpathAxis>descendant-or-self</xqx:xpathAxis>
                  <xqx:anyKindTest/>
                </xqx:stepExpr>
                <xqx:stepExpr>
                  <xqx:xpathAxis>child</xqx:xpathAxis>
                  <xqx:elementTest>
                    <xqx:elementName>
                      <xqx:QName xqx:prefix="ipo">purchaseOrder</xqx:QName>
                    </xqx:elementName>
                  </xqx:elementTest>
                </xqx:stepExpr>
              </xqx:pathExpr>
            </xqx:forExpr>
          </xqx:forClauseItem>
        </xqx:forClause>
        <xqx:whereClause>
          <xqx:functionCallExpr>
            <xqx:functionName>not</xqx:functionName>
            <xqx:arguments>
              <xqx:andOp>
                <xqx:firstOperand>
                  <xqx:functionCallExpr>
                    <xqx:functionName xqx:prefix="local">address-ok</xqx:functionName>
                    <xqx:arguments>
                      <xqx:pathExpr>
                        <xqx:stepExpr>
                          <xqx:filterExpr>
                            <xqx:varRef>
                              <xqx:name>p</xqx:name>
                            </xqx:varRef>
                          </xqx:filterExpr>
                        </xqx:stepExpr>
                        <xqx:stepExpr>
                          <xqx:xpathAxis>child</xqx:xpathAxis>
                          <xqx:nameTest>shipTo</xqx:nameTest>
                        </xqx:stepExpr>
                      </xqx:pathExpr>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:firstOperand>
                <xqx:secondOperand>
                  <xqx:functionCallExpr>
                    <xqx:functionName xqx:prefix="local">address-ok</xqx:functionName>
                    <xqx:arguments>
                      <xqx:pathExpr>
                        <xqx:stepExpr>
                          <xqx:filterExpr>
                            <xqx:varRef>
                              <xqx:name>p</xqx:name>
                            </xqx:varRef>
                          </xqx:filterExpr>
                        </xqx:stepExpr>
                        <xqx:stepExpr>
                          <xqx:xpathAxis>child</xqx:xpathAxis>
                          <xqx:nameTest>billTo</xqx:nameTest>
                        </xqx:stepExpr>
                      </xqx:pathExpr>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:secondOperand>
              </xqx:andOp>
            </xqx:arguments>
          </xqx:functionCallExpr>
        </xqx:whereClause>
        <xqx:returnClause>
          <xqx:varRef>
            <xqx:name>p</xqx:name>
          </xqx:varRef>
        </xqx:returnClause>
      </xqx:flworExpr>
    </xqx:queryBody>
  </xqx:mainModule>
</xqx:module>
