<?xml version="1.0"?>
<xqx:module xmlns:xqx="http://www.w3.org/2005/XQueryX"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.w3.org/2005/XQueryX
                                http://www.w3.org/2005/XQueryX/xqueryx.xsd">
  <xqx:mainModule>
    <xqx:prolog>
      <xqx:namespaceDecl>
        <xqx:prefix>functx</xqx:prefix>
        <xqx:uri>http://www.example.com/</xqx:uri>
      </xqx:namespaceDecl>
      <xqx:functionDecl>
        <xqx:functionName xqx:prefix="functx">format-as-title-en</xqx:functionName>
        <xqx:paramList>
          <xqx:param>
            <xqx:varName>titles</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">string</xqx:atomicType>
              <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
        </xqx:paramList>
        <xqx:typeDeclaration>
          <xqx:atomicType xqx:prefix="xs">string</xqx:atomicType>
          <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
        </xqx:typeDeclaration>
        <xqx:functionBody>
          <xqx:flworExpr>
            <xqx:letClause>
              <xqx:letClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>wordsToMoveToEnd</xqx:varName>
                </xqx:typedVariableBinding>
                <xqx:letExpr>
                  <xqx:sequenceExpr>
                    <xqx:stringConstantExpr>
                      <xqx:value>A</xqx:value>
                    </xqx:stringConstantExpr>
                    <xqx:stringConstantExpr>
                      <xqx:value>An</xqx:value>
                    </xqx:stringConstantExpr>
                    <xqx:stringConstantExpr>
                      <xqx:value>The</xqx:value>
                    </xqx:stringConstantExpr>
                  </xqx:sequenceExpr>
                </xqx:letExpr>
              </xqx:letClauseItem>
            </xqx:letClause>
            <xqx:forClause>
              <xqx:forClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>title</xqx:varName>
                </xqx:typedVariableBinding>
                <xqx:forExpr>
                  <xqx:varRef>
                    <xqx:name>titles</xqx:name>
                  </xqx:varRef>
                </xqx:forExpr>
              </xqx:forClauseItem>
            </xqx:forClause>
            <xqx:letClause>
              <xqx:letClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>firstWord</xqx:varName>
                </xqx:typedVariableBinding>
                <xqx:letExpr>
                  <xqx:functionCallExpr>
                    <xqx:functionName xqx:prefix="functx">substring-before-match</xqx:functionName>
                    <xqx:arguments>
                      <xqx:varRef>
                        <xqx:name>title</xqx:name>
                      </xqx:varRef>
                      <xqx:stringConstantExpr>
                        <xqx:value>\W</xqx:value>
                      </xqx:stringConstantExpr>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:letExpr>
              </xqx:letClauseItem>
            </xqx:letClause>
            <xqx:returnClause>
              <xqx:ifThenElseExpr>
                <xqx:ifClause>
                  <xqx:equalOp>
                    <xqx:firstOperand>
                      <xqx:varRef>
                        <xqx:name>firstWord</xqx:name>
                      </xqx:varRef>
                    </xqx:firstOperand>
                    <xqx:secondOperand>
                      <xqx:varRef>
                        <xqx:name>wordsToMoveToEnd</xqx:name>
                      </xqx:varRef>
                    </xqx:secondOperand>
                  </xqx:equalOp>
                </xqx:ifClause>
                <xqx:thenClause>
                  <xqx:functionCallExpr>
                    <xqx:functionName>replace</xqx:functionName>
                    <xqx:arguments>
                      <xqx:varRef>
                        <xqx:name>title</xqx:name>
                      </xqx:varRef>
                      <xqx:stringConstantExpr>
                        <xqx:value>(.*?)\W(.*)</xqx:value>
                      </xqx:stringConstantExpr>
                      <xqx:stringConstantExpr>
                        <xqx:value>$2, $1</xqx:value>
                      </xqx:stringConstantExpr>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:thenClause>
                <xqx:elseClause>
                  <xqx:varRef>
                    <xqx:name>title</xqx:name>
                  </xqx:varRef>
                </xqx:elseClause>
              </xqx:ifThenElseExpr>
            </xqx:returnClause>
          </xqx:flworExpr>
        </xqx:functionBody>
      </xqx:functionDecl>
      <xqx:functionDecl>
        <xqx:functionName xqx:prefix="functx">substring-before-match</xqx:functionName>
        <xqx:paramList>
          <xqx:param>
            <xqx:varName>arg</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">string</xqx:atomicType>
              <xqx:occurrenceIndicator>?</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>regex</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">string</xqx:atomicType>
            </xqx:typeDeclaration>
          </xqx:param>
        </xqx:paramList>
        <xqx:typeDeclaration>
          <xqx:atomicType xqx:prefix="xs">string</xqx:atomicType>
          <xqx:occurrenceIndicator>?</xqx:occurrenceIndicator>
        </xqx:typeDeclaration>
        <xqx:functionBody>
          <xqx:pathExpr>
            <xqx:stepExpr>
              <xqx:filterExpr>
                <xqx:functionCallExpr>
                  <xqx:functionName>tokenize</xqx:functionName>
                  <xqx:arguments>
                    <xqx:varRef>
                      <xqx:name>arg</xqx:name>
                    </xqx:varRef>
                    <xqx:varRef>
                      <xqx:name>regex</xqx:name>
                    </xqx:varRef>
                  </xqx:arguments>
                </xqx:functionCallExpr>
              </xqx:filterExpr>
              <xqx:predicates>
                <xqx:integerConstantExpr>
                  <xqx:value>1</xqx:value>
                </xqx:integerConstantExpr>
              </xqx:predicates>
            </xqx:stepExpr>
          </xqx:pathExpr>
        </xqx:functionBody>
      </xqx:functionDecl>
    </xqx:prolog>
    <xqx:queryBody>
      <xqx:functionCallExpr>
        <xqx:functionName xqx:prefix="functx">format-as-title-en</xqx:functionName>
        <xqx:arguments>
          <xqx:sequenceExpr>
            <xqx:stringConstantExpr>
              <xqx:value>A Midsummer Night's Dream</xqx:value>
            </xqx:stringConstantExpr>
            <xqx:stringConstantExpr>
              <xqx:value>The Merchant of Venice</xqx:value>
            </xqx:stringConstantExpr>
            <xqx:stringConstantExpr>
              <xqx:value>Hamlet</xqx:value>
            </xqx:stringConstantExpr>
          </xqx:sequenceExpr>
        </xqx:arguments>
      </xqx:functionCallExpr>
    </xqx:queryBody>
  </xqx:mainModule>
</xqx:module>
