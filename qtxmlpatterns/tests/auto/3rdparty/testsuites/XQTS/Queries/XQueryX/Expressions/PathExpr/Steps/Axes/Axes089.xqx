<?xml version="1.0"?>
<xqx:module xmlns:xqx="http://www.w3.org/2005/XQueryX"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.w3.org/2005/XQueryX
                                http://www.w3.org/2005/XQueryX/xqueryx.xsd">
  <xqx:versionDecl>
    <xqx:version>1.0</xqx:version>
    <!-- encoding: null -->
  </xqx:versionDecl>
  <xqx:mainModule>
    <xqx:prolog>
      <xqx:namespaceDecl>
        <xqx:prefix>saxon</xqx:prefix>
        <xqx:uri>http://example.com/VendorNamespace</xqx:uri>
      </xqx:namespaceDecl>
      <xqx:namespaceDecl>
        <xqx:prefix>tour</xqx:prefix>
        <xqx:uri>http://example.com/Knight'sTour</xqx:uri>
      </xqx:namespaceDecl>
      <xqx:optionDecl>
        <xqx:optionName xqx:prefix="saxon">default</xqx:optionName>
        <xqx:optionContents>'a1'</xqx:optionContents>
      </xqx:optionDecl>
      <xqx:varDecl>
        <xqx:varName>start</xqx:varName>
        <xqx:typeDeclaration>
          <xqx:atomicType xqx:prefix="xs">string</xqx:atomicType>
        </xqx:typeDeclaration>
        <xqx:varValue>
          <xqx:stringConstantExpr>
            <xqx:value>a1</xqx:value>
          </xqx:stringConstantExpr>
        </xqx:varValue>
      </xqx:varDecl>
      <xqx:optionDecl>
        <xqx:optionName xqx:prefix="saxon">default</xqx:optionName>
        <xqx:optionContents>'64'</xqx:optionContents>
      </xqx:optionDecl>
      <xqx:varDecl>
        <xqx:varName>end</xqx:varName>
        <xqx:typeDeclaration>
          <xqx:atomicType xqx:prefix="xs">string</xqx:atomicType>
        </xqx:typeDeclaration>
        <xqx:varValue>
          <xqx:stringConstantExpr>
            <xqx:value>64</xqx:value>
          </xqx:stringConstantExpr>
        </xqx:varValue>
      </xqx:varDecl>
      <xqx:varDecl>
        <xqx:varName>endd</xqx:varName>
        <xqx:typeDeclaration>
          <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
        </xqx:typeDeclaration>
        <xqx:varValue>
          <xqx:functionCallExpr>
            <xqx:functionName xqx:prefix="xs">integer</xqx:functionName>
            <xqx:arguments>
              <xqx:varRef>
                <xqx:name>end</xqx:name>
              </xqx:varRef>
            </xqx:arguments>
          </xqx:functionCallExpr>
        </xqx:varValue>
      </xqx:varDecl>
      <xqx:varDecl>
        <xqx:varName>start-column</xqx:varName>
        <xqx:typeDeclaration>
          <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
        </xqx:typeDeclaration>
        <xqx:varValue>
          <xqx:functionCallExpr>
            <xqx:functionName xqx:prefix="xs">integer</xqx:functionName>
            <xqx:arguments>
              <xqx:functionCallExpr>
                <xqx:functionName>translate</xqx:functionName>
                <xqx:arguments>
                  <xqx:functionCallExpr>
                    <xqx:functionName>substring</xqx:functionName>
                    <xqx:arguments>
                      <xqx:varRef>
                        <xqx:name>start</xqx:name>
                      </xqx:varRef>
                      <xqx:integerConstantExpr>
                        <xqx:value>1</xqx:value>
                      </xqx:integerConstantExpr>
                      <xqx:integerConstantExpr>
                        <xqx:value>1</xqx:value>
                      </xqx:integerConstantExpr>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                  <xqx:stringConstantExpr>
                    <xqx:value>abcdefgh</xqx:value>
                  </xqx:stringConstantExpr>
                  <xqx:stringConstantExpr>
                    <xqx:value>01234567</xqx:value>
                  </xqx:stringConstantExpr>
                </xqx:arguments>
              </xqx:functionCallExpr>
            </xqx:arguments>
          </xqx:functionCallExpr>
        </xqx:varValue>
      </xqx:varDecl>
      <xqx:varDecl>
        <xqx:varName>start-row</xqx:varName>
        <xqx:typeDeclaration>
          <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
        </xqx:typeDeclaration>
        <xqx:varValue>
          <xqx:subtractOp>
            <xqx:firstOperand>
              <xqx:integerConstantExpr>
                <xqx:value>8</xqx:value>
              </xqx:integerConstantExpr>
            </xqx:firstOperand>
            <xqx:secondOperand>
              <xqx:functionCallExpr>
                <xqx:functionName xqx:prefix="xs">integer</xqx:functionName>
                <xqx:arguments>
                  <xqx:functionCallExpr>
                    <xqx:functionName>substring</xqx:functionName>
                    <xqx:arguments>
                      <xqx:varRef>
                        <xqx:name>start</xqx:name>
                      </xqx:varRef>
                      <xqx:integerConstantExpr>
                        <xqx:value>2</xqx:value>
                      </xqx:integerConstantExpr>
                      <xqx:integerConstantExpr>
                        <xqx:value>1</xqx:value>
                      </xqx:integerConstantExpr>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:arguments>
              </xqx:functionCallExpr>
            </xqx:secondOperand>
          </xqx:subtractOp>
        </xqx:varValue>
      </xqx:varDecl>
      <xqx:functionDecl>
        <xqx:functionName xqx:prefix="tour">main</xqx:functionName>
        <xqx:paramList/>
        <xqx:typeDeclaration>
          <xqx:elementTest/>
        </xqx:typeDeclaration>
        <xqx:functionBody>
          <xqx:ifThenElseExpr>
            <xqx:ifClause>
              <xqx:orOp>
                <xqx:firstOperand>
                  <xqx:orOp>
                    <xqx:firstOperand>
                      <xqx:functionCallExpr>
                        <xqx:functionName>not</xqx:functionName>
                        <xqx:arguments>
                          <xqx:equalOp>
                            <xqx:firstOperand>
                              <xqx:functionCallExpr>
                                <xqx:functionName>string-length</xqx:functionName>
                                <xqx:arguments>
                                  <xqx:varRef>
                                    <xqx:name>start</xqx:name>
                                  </xqx:varRef>
                                </xqx:arguments>
                              </xqx:functionCallExpr>
                            </xqx:firstOperand>
                            <xqx:secondOperand>
                              <xqx:integerConstantExpr>
                                <xqx:value>2</xqx:value>
                              </xqx:integerConstantExpr>
                            </xqx:secondOperand>
                          </xqx:equalOp>
                        </xqx:arguments>
                      </xqx:functionCallExpr>
                    </xqx:firstOperand>
                    <xqx:secondOperand>
                      <xqx:functionCallExpr>
                        <xqx:functionName>not</xqx:functionName>
                        <xqx:arguments>
                          <xqx:equalOp>
                            <xqx:firstOperand>
                              <xqx:functionCallExpr>
                                <xqx:functionName>translate</xqx:functionName>
                                <xqx:arguments>
                                  <xqx:functionCallExpr>
                                    <xqx:functionName>substring</xqx:functionName>
                                    <xqx:arguments>
                                      <xqx:varRef>
                                        <xqx:name>start</xqx:name>
                                      </xqx:varRef>
                                      <xqx:integerConstantExpr>
                                        <xqx:value>1</xqx:value>
                                      </xqx:integerConstantExpr>
                                      <xqx:integerConstantExpr>
                                        <xqx:value>1</xqx:value>
                                      </xqx:integerConstantExpr>
                                    </xqx:arguments>
                                  </xqx:functionCallExpr>
                                  <xqx:stringConstantExpr>
                                    <xqx:value>abcdefgh</xqx:value>
                                  </xqx:stringConstantExpr>
                                  <xqx:stringConstantExpr>
                                    <xqx:value>aaaaaaaa</xqx:value>
                                  </xqx:stringConstantExpr>
                                </xqx:arguments>
                              </xqx:functionCallExpr>
                            </xqx:firstOperand>
                            <xqx:secondOperand>
                              <xqx:stringConstantExpr>
                                <xqx:value>a</xqx:value>
                              </xqx:stringConstantExpr>
                            </xqx:secondOperand>
                          </xqx:equalOp>
                        </xqx:arguments>
                      </xqx:functionCallExpr>
                    </xqx:secondOperand>
                  </xqx:orOp>
                </xqx:firstOperand>
                <xqx:secondOperand>
                  <xqx:functionCallExpr>
                    <xqx:functionName>not</xqx:functionName>
                    <xqx:arguments>
                      <xqx:equalOp>
                        <xqx:firstOperand>
                          <xqx:functionCallExpr>
                            <xqx:functionName>translate</xqx:functionName>
                            <xqx:arguments>
                              <xqx:functionCallExpr>
                                <xqx:functionName>substring</xqx:functionName>
                                <xqx:arguments>
                                  <xqx:varRef>
                                    <xqx:name>start</xqx:name>
                                  </xqx:varRef>
                                  <xqx:integerConstantExpr>
                                    <xqx:value>2</xqx:value>
                                  </xqx:integerConstantExpr>
                                  <xqx:integerConstantExpr>
                                    <xqx:value>1</xqx:value>
                                  </xqx:integerConstantExpr>
                                </xqx:arguments>
                              </xqx:functionCallExpr>
                              <xqx:stringConstantExpr>
                                <xqx:value>12345678</xqx:value>
                              </xqx:stringConstantExpr>
                              <xqx:stringConstantExpr>
                                <xqx:value>11111111</xqx:value>
                              </xqx:stringConstantExpr>
                            </xqx:arguments>
                          </xqx:functionCallExpr>
                        </xqx:firstOperand>
                        <xqx:secondOperand>
                          <xqx:stringConstantExpr>
                            <xqx:value>1</xqx:value>
                          </xqx:stringConstantExpr>
                        </xqx:secondOperand>
                      </xqx:equalOp>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:secondOperand>
              </xqx:orOp>
            </xqx:ifClause>
            <xqx:thenClause>
              <xqx:functionCallExpr>
                <xqx:functionName>error</xqx:functionName>
                <xqx:arguments>
                  <xqx:sequenceExpr/>
                  <xqx:stringConstantExpr>
                    <xqx:value>Invalid start parameter: try say 'a1' or 'g6'</xqx:value>
                  </xqx:stringConstantExpr>
                </xqx:arguments>
              </xqx:functionCallExpr>
            </xqx:thenClause>
            <xqx:elseClause>
              <xqx:ifThenElseExpr>
                <xqx:ifClause>
                  <xqx:functionCallExpr>
                    <xqx:functionName>not</xqx:functionName>
                    <xqx:arguments>
                      <xqx:equalOp>
                        <xqx:firstOperand>
                          <xqx:varRef>
                            <xqx:name>endd</xqx:name>
                          </xqx:varRef>
                        </xqx:firstOperand>
                        <xqx:secondOperand>
                          <xqx:rangeSequenceExpr>
                            <xqx:startExpr>
                              <xqx:integerConstantExpr>
                                <xqx:value>1</xqx:value>
                              </xqx:integerConstantExpr>
                            </xqx:startExpr>
                            <xqx:endExpr>
                              <xqx:integerConstantExpr>
                                <xqx:value>64</xqx:value>
                              </xqx:integerConstantExpr>
                            </xqx:endExpr>
                          </xqx:rangeSequenceExpr>
                        </xqx:secondOperand>
                      </xqx:equalOp>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:ifClause>
                <xqx:thenClause>
                  <xqx:functionCallExpr>
                    <xqx:functionName>error</xqx:functionName>
                    <xqx:arguments>
                      <xqx:sequenceExpr/>
                      <xqx:stringConstantExpr>
                        <xqx:value>Invalid end parameter: must be in range 1 to 64</xqx:value>
                      </xqx:stringConstantExpr>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:thenClause>
                <xqx:elseClause>
                  <xqx:flworExpr>
                    <xqx:letClause>
                      <xqx:letClauseItem>
                        <xqx:typedVariableBinding>
                          <xqx:varName>empty-board</xqx:varName>
                          <xqx:typeDeclaration>
                            <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
                            <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
                          </xqx:typeDeclaration>
                        </xqx:typedVariableBinding>
                        <xqx:letExpr>
                          <xqx:flworExpr>
                            <xqx:forClause>
                              <xqx:forClauseItem>
                                <xqx:typedVariableBinding>
                                  <xqx:varName>i</xqx:varName>
                                </xqx:typedVariableBinding>
                                <xqx:forExpr>
                                  <xqx:rangeSequenceExpr>
                                    <xqx:startExpr>
                                      <xqx:integerConstantExpr>
                                        <xqx:value>1</xqx:value>
                                      </xqx:integerConstantExpr>
                                    </xqx:startExpr>
                                    <xqx:endExpr>
                                      <xqx:integerConstantExpr>
                                        <xqx:value>64</xqx:value>
                                      </xqx:integerConstantExpr>
                                    </xqx:endExpr>
                                  </xqx:rangeSequenceExpr>
                                </xqx:forExpr>
                              </xqx:forClauseItem>
                            </xqx:forClause>
                            <xqx:returnClause>
                              <xqx:integerConstantExpr>
                                <xqx:value>0</xqx:value>
                              </xqx:integerConstantExpr>
                            </xqx:returnClause>
                          </xqx:flworExpr>
                        </xqx:letExpr>
                      </xqx:letClauseItem>
                    </xqx:letClause>
                    <xqx:letClause>
                      <xqx:letClauseItem>
                        <xqx:typedVariableBinding>
                          <xqx:varName>initial-board</xqx:varName>
                          <xqx:typeDeclaration>
                            <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
                            <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
                          </xqx:typeDeclaration>
                        </xqx:typedVariableBinding>
                        <xqx:letExpr>
                          <xqx:functionCallExpr>
                            <xqx:functionName xqx:prefix="tour">place-knight</xqx:functionName>
                            <xqx:arguments>
                              <xqx:integerConstantExpr>
                                <xqx:value>1</xqx:value>
                              </xqx:integerConstantExpr>
                              <xqx:varRef>
                                <xqx:name>empty-board</xqx:name>
                              </xqx:varRef>
                              <xqx:addOp>
                                <xqx:firstOperand>
                                  <xqx:multiplyOp>
                                    <xqx:firstOperand>
                                      <xqx:varRef>
                                        <xqx:name>start-row</xqx:name>
                                      </xqx:varRef>
                                    </xqx:firstOperand>
                                    <xqx:secondOperand>
                                      <xqx:integerConstantExpr>
                                        <xqx:value>8</xqx:value>
                                      </xqx:integerConstantExpr>
                                    </xqx:secondOperand>
                                  </xqx:multiplyOp>
                                </xqx:firstOperand>
                                <xqx:secondOperand>
                                  <xqx:varRef>
                                    <xqx:name>start-column</xqx:name>
                                  </xqx:varRef>
                                </xqx:secondOperand>
                              </xqx:addOp>
                            </xqx:arguments>
                          </xqx:functionCallExpr>
                        </xqx:letExpr>
                      </xqx:letClauseItem>
                    </xqx:letClause>
                    <xqx:letClause>
                      <xqx:letClauseItem>
                        <xqx:typedVariableBinding>
                          <xqx:varName>final-board</xqx:varName>
                          <xqx:typeDeclaration>
                            <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
                            <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
                          </xqx:typeDeclaration>
                        </xqx:typedVariableBinding>
                        <xqx:letExpr>
                          <xqx:functionCallExpr>
                            <xqx:functionName xqx:prefix="tour">make-moves</xqx:functionName>
                            <xqx:arguments>
                              <xqx:integerConstantExpr>
                                <xqx:value>2</xqx:value>
                              </xqx:integerConstantExpr>
                              <xqx:varRef>
                                <xqx:name>initial-board</xqx:name>
                              </xqx:varRef>
                              <xqx:addOp>
                                <xqx:firstOperand>
                                  <xqx:multiplyOp>
                                    <xqx:firstOperand>
                                      <xqx:varRef>
                                        <xqx:name>start-row</xqx:name>
                                      </xqx:varRef>
                                    </xqx:firstOperand>
                                    <xqx:secondOperand>
                                      <xqx:integerConstantExpr>
                                        <xqx:value>8</xqx:value>
                                      </xqx:integerConstantExpr>
                                    </xqx:secondOperand>
                                  </xqx:multiplyOp>
                                </xqx:firstOperand>
                                <xqx:secondOperand>
                                  <xqx:varRef>
                                    <xqx:name>start-column</xqx:name>
                                  </xqx:varRef>
                                </xqx:secondOperand>
                              </xqx:addOp>
                            </xqx:arguments>
                          </xqx:functionCallExpr>
                        </xqx:letExpr>
                      </xqx:letClauseItem>
                    </xqx:letClause>
                    <xqx:returnClause>
                      <xqx:functionCallExpr>
                        <xqx:functionName xqx:prefix="tour">print-board</xqx:functionName>
                        <xqx:arguments>
                          <xqx:varRef>
                            <xqx:name>final-board</xqx:name>
                          </xqx:varRef>
                        </xqx:arguments>
                      </xqx:functionCallExpr>
                    </xqx:returnClause>
                  </xqx:flworExpr>
                </xqx:elseClause>
              </xqx:ifThenElseExpr>
            </xqx:elseClause>
          </xqx:ifThenElseExpr>
        </xqx:functionBody>
      </xqx:functionDecl>
      <xqx:functionDecl>
        <xqx:functionName xqx:prefix="tour">place-knight</xqx:functionName>
        <xqx:paramList>
          <xqx:param>
            <xqx:varName>move</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>board</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
              <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>square</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
            </xqx:typeDeclaration>
          </xqx:param>
        </xqx:paramList>
        <xqx:typeDeclaration>
          <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
          <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
        </xqx:typeDeclaration>
        <xqx:functionBody>
          <xqx:flworExpr>
            <xqx:forClause>
              <xqx:forClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>i</xqx:varName>
                </xqx:typedVariableBinding>
                <xqx:forExpr>
                  <xqx:rangeSequenceExpr>
                    <xqx:startExpr>
                      <xqx:integerConstantExpr>
                        <xqx:value>1</xqx:value>
                      </xqx:integerConstantExpr>
                    </xqx:startExpr>
                    <xqx:endExpr>
                      <xqx:integerConstantExpr>
                        <xqx:value>64</xqx:value>
                      </xqx:integerConstantExpr>
                    </xqx:endExpr>
                  </xqx:rangeSequenceExpr>
                </xqx:forExpr>
              </xqx:forClauseItem>
            </xqx:forClause>
            <xqx:returnClause>
              <xqx:ifThenElseExpr>
                <xqx:ifClause>
                  <xqx:equalOp>
                    <xqx:firstOperand>
                      <xqx:varRef>
                        <xqx:name>i</xqx:name>
                      </xqx:varRef>
                    </xqx:firstOperand>
                    <xqx:secondOperand>
                      <xqx:addOp>
                        <xqx:firstOperand>
                          <xqx:varRef>
                            <xqx:name>square</xqx:name>
                          </xqx:varRef>
                        </xqx:firstOperand>
                        <xqx:secondOperand>
                          <xqx:integerConstantExpr>
                            <xqx:value>1</xqx:value>
                          </xqx:integerConstantExpr>
                        </xqx:secondOperand>
                      </xqx:addOp>
                    </xqx:secondOperand>
                  </xqx:equalOp>
                </xqx:ifClause>
                <xqx:thenClause>
                  <xqx:varRef>
                    <xqx:name>move</xqx:name>
                  </xqx:varRef>
                </xqx:thenClause>
                <xqx:elseClause>
                  <xqx:pathExpr>
                    <xqx:stepExpr>
                      <xqx:filterExpr>
                        <xqx:varRef>
                          <xqx:name>board</xqx:name>
                        </xqx:varRef>
                      </xqx:filterExpr>
                      <xqx:predicates>
                        <xqx:varRef>
                          <xqx:name>i</xqx:name>
                        </xqx:varRef>
                      </xqx:predicates>
                    </xqx:stepExpr>
                  </xqx:pathExpr>
                </xqx:elseClause>
              </xqx:ifThenElseExpr>
            </xqx:returnClause>
          </xqx:flworExpr>
        </xqx:functionBody>
      </xqx:functionDecl>
      <xqx:functionDecl>
        <xqx:functionName xqx:prefix="tour">make-moves</xqx:functionName>
        <xqx:paramList>
          <xqx:param>
            <xqx:varName>move</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>board</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
              <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>square</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
            </xqx:typeDeclaration>
          </xqx:param>
        </xqx:paramList>
        <xqx:typeDeclaration>
          <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
          <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
        </xqx:typeDeclaration>
        <xqx:functionBody>
          <xqx:flworExpr>
            <xqx:letClause>
              <xqx:letClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>possible-move-list</xqx:varName>
                  <xqx:typeDeclaration>
                    <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
                    <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
                  </xqx:typeDeclaration>
                </xqx:typedVariableBinding>
                <xqx:letExpr>
                  <xqx:functionCallExpr>
                    <xqx:functionName xqx:prefix="tour">list-possible-moves</xqx:functionName>
                    <xqx:arguments>
                      <xqx:varRef>
                        <xqx:name>board</xqx:name>
                      </xqx:varRef>
                      <xqx:varRef>
                        <xqx:name>square</xqx:name>
                      </xqx:varRef>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:letExpr>
              </xqx:letClauseItem>
            </xqx:letClause>
            <xqx:returnClause>
              <xqx:functionCallExpr>
                <xqx:functionName xqx:prefix="tour">try-possible-moves</xqx:functionName>
                <xqx:arguments>
                  <xqx:varRef>
                    <xqx:name>move</xqx:name>
                  </xqx:varRef>
                  <xqx:varRef>
                    <xqx:name>board</xqx:name>
                  </xqx:varRef>
                  <xqx:varRef>
                    <xqx:name>square</xqx:name>
                  </xqx:varRef>
                  <xqx:varRef>
                    <xqx:name>possible-move-list</xqx:name>
                  </xqx:varRef>
                </xqx:arguments>
              </xqx:functionCallExpr>
            </xqx:returnClause>
          </xqx:flworExpr>
        </xqx:functionBody>
      </xqx:functionDecl>
      <xqx:functionDecl>
        <xqx:functionName xqx:prefix="tour">try-possible-moves</xqx:functionName>
        <xqx:paramList>
          <xqx:param>
            <xqx:varName>move</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>board</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
              <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>square</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>possible-moves</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
              <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
        </xqx:paramList>
        <xqx:typeDeclaration>
          <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
          <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
        </xqx:typeDeclaration>
        <xqx:functionBody>
          <xqx:ifThenElseExpr>
            <xqx:ifClause>
              <xqx:notEqualOp>
                <xqx:firstOperand>
                  <xqx:functionCallExpr>
                    <xqx:functionName>count</xqx:functionName>
                    <xqx:arguments>
                      <xqx:varRef>
                        <xqx:name>possible-moves</xqx:name>
                      </xqx:varRef>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:firstOperand>
                <xqx:secondOperand>
                  <xqx:integerConstantExpr>
                    <xqx:value>0</xqx:value>
                  </xqx:integerConstantExpr>
                </xqx:secondOperand>
              </xqx:notEqualOp>
            </xqx:ifClause>
            <xqx:thenClause>
              <xqx:functionCallExpr>
                <xqx:functionName xqx:prefix="tour">make-best-move</xqx:functionName>
                <xqx:arguments>
                  <xqx:varRef>
                    <xqx:name>move</xqx:name>
                  </xqx:varRef>
                  <xqx:varRef>
                    <xqx:name>board</xqx:name>
                  </xqx:varRef>
                  <xqx:varRef>
                    <xqx:name>square</xqx:name>
                  </xqx:varRef>
                  <xqx:functionCallExpr>
                    <xqx:functionName>one-or-more</xqx:functionName>
                    <xqx:arguments>
                      <xqx:varRef>
                        <xqx:name>possible-moves</xqx:name>
                      </xqx:varRef>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:arguments>
              </xqx:functionCallExpr>
            </xqx:thenClause>
            <xqx:elseClause>
              <xqx:sequenceExpr/>
            </xqx:elseClause>
          </xqx:ifThenElseExpr>
        </xqx:functionBody>
      </xqx:functionDecl>
      <xqx:functionDecl>
        <xqx:functionName xqx:prefix="tour">make-best-move</xqx:functionName>
        <xqx:paramList>
          <xqx:param>
            <xqx:varName>move</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>board</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
              <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>square</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>possible-moves</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
              <xqx:occurrenceIndicator>+</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
        </xqx:paramList>
        <xqx:typeDeclaration>
          <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
          <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
        </xqx:typeDeclaration>
        <xqx:functionBody>
          <xqx:flworExpr>
            <xqx:letClause>
              <xqx:letClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>best-move</xqx:varName>
                  <xqx:typeDeclaration>
                    <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
                  </xqx:typeDeclaration>
                </xqx:typedVariableBinding>
                <xqx:letExpr>
                  <xqx:functionCallExpr>
                    <xqx:functionName xqx:prefix="tour">find-best-move</xqx:functionName>
                    <xqx:arguments>
                      <xqx:varRef>
                        <xqx:name>board</xqx:name>
                      </xqx:varRef>
                      <xqx:varRef>
                        <xqx:name>possible-moves</xqx:name>
                      </xqx:varRef>
                      <xqx:integerConstantExpr>
                        <xqx:value>9</xqx:value>
                      </xqx:integerConstantExpr>
                      <xqx:integerConstantExpr>
                        <xqx:value>999</xqx:value>
                      </xqx:integerConstantExpr>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:letExpr>
              </xqx:letClauseItem>
            </xqx:letClause>
            <xqx:letClause>
              <xqx:letClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>other-possible-moves</xqx:varName>
                  <xqx:typeDeclaration>
                    <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
                    <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
                  </xqx:typeDeclaration>
                </xqx:typedVariableBinding>
                <xqx:letExpr>
                  <xqx:pathExpr>
                    <xqx:stepExpr>
                      <xqx:filterExpr>
                        <xqx:varRef>
                          <xqx:name>possible-moves</xqx:name>
                        </xqx:varRef>
                      </xqx:filterExpr>
                      <xqx:predicates>
                        <xqx:notEqualOp>
                          <xqx:firstOperand>
                            <xqx:pathExpr>
                              <xqx:stepExpr>
                                <xqx:filterExpr>
                                  <xqx:contextItemExpr/>
                                </xqx:filterExpr>
                              </xqx:stepExpr>
                            </xqx:pathExpr>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:varRef>
                              <xqx:name>best-move</xqx:name>
                            </xqx:varRef>
                          </xqx:secondOperand>
                        </xqx:notEqualOp>
                      </xqx:predicates>
                    </xqx:stepExpr>
                  </xqx:pathExpr>
                </xqx:letExpr>
              </xqx:letClauseItem>
            </xqx:letClause>
            <xqx:letClause>
              <xqx:letClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>next-board</xqx:varName>
                  <xqx:typeDeclaration>
                    <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
                    <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
                  </xqx:typeDeclaration>
                </xqx:typedVariableBinding>
                <xqx:letExpr>
                  <xqx:functionCallExpr>
                    <xqx:functionName xqx:prefix="tour">place-knight</xqx:functionName>
                    <xqx:arguments>
                      <xqx:varRef>
                        <xqx:name>move</xqx:name>
                      </xqx:varRef>
                      <xqx:varRef>
                        <xqx:name>board</xqx:name>
                      </xqx:varRef>
                      <xqx:varRef>
                        <xqx:name>best-move</xqx:name>
                      </xqx:varRef>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:letExpr>
              </xqx:letClauseItem>
            </xqx:letClause>
            <xqx:letClause>
              <xqx:letClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>final-board</xqx:varName>
                  <xqx:typeDeclaration>
                    <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
                    <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
                  </xqx:typeDeclaration>
                </xqx:typedVariableBinding>
                <xqx:letExpr>
                  <xqx:ifThenElseExpr>
                    <xqx:ifClause>
                      <xqx:lessThanOp>
                        <xqx:firstOperand>
                          <xqx:varRef>
                            <xqx:name>move</xqx:name>
                          </xqx:varRef>
                        </xqx:firstOperand>
                        <xqx:secondOperand>
                          <xqx:varRef>
                            <xqx:name>endd</xqx:name>
                          </xqx:varRef>
                        </xqx:secondOperand>
                      </xqx:lessThanOp>
                    </xqx:ifClause>
                    <xqx:thenClause>
                      <xqx:functionCallExpr>
                        <xqx:functionName xqx:prefix="tour">make-moves</xqx:functionName>
                        <xqx:arguments>
                          <xqx:addOp>
                            <xqx:firstOperand>
                              <xqx:varRef>
                                <xqx:name>move</xqx:name>
                              </xqx:varRef>
                            </xqx:firstOperand>
                            <xqx:secondOperand>
                              <xqx:integerConstantExpr>
                                <xqx:value>1</xqx:value>
                              </xqx:integerConstantExpr>
                            </xqx:secondOperand>
                          </xqx:addOp>
                          <xqx:varRef>
                            <xqx:name>next-board</xqx:name>
                          </xqx:varRef>
                          <xqx:varRef>
                            <xqx:name>best-move</xqx:name>
                          </xqx:varRef>
                        </xqx:arguments>
                      </xqx:functionCallExpr>
                    </xqx:thenClause>
                    <xqx:elseClause>
                      <xqx:varRef>
                        <xqx:name>next-board</xqx:name>
                      </xqx:varRef>
                    </xqx:elseClause>
                  </xqx:ifThenElseExpr>
                </xqx:letExpr>
              </xqx:letClauseItem>
            </xqx:letClause>
            <xqx:returnClause>
              <xqx:ifThenElseExpr>
                <xqx:ifClause>
                  <xqx:functionCallExpr>
                    <xqx:functionName>empty</xqx:functionName>
                    <xqx:arguments>
                      <xqx:varRef>
                        <xqx:name>final-board</xqx:name>
                      </xqx:varRef>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:ifClause>
                <xqx:thenClause>
                  <xqx:functionCallExpr>
                    <xqx:functionName xqx:prefix="tour">try-possible-moves</xqx:functionName>
                    <xqx:arguments>
                      <xqx:varRef>
                        <xqx:name>move</xqx:name>
                      </xqx:varRef>
                      <xqx:varRef>
                        <xqx:name>board</xqx:name>
                      </xqx:varRef>
                      <xqx:varRef>
                        <xqx:name>square</xqx:name>
                      </xqx:varRef>
                      <xqx:varRef>
                        <xqx:name>other-possible-moves</xqx:name>
                      </xqx:varRef>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:thenClause>
                <xqx:elseClause>
                  <xqx:varRef>
                    <xqx:name>final-board</xqx:name>
                  </xqx:varRef>
                </xqx:elseClause>
              </xqx:ifThenElseExpr>
            </xqx:returnClause>
          </xqx:flworExpr>
        </xqx:functionBody>
      </xqx:functionDecl>
      <xqx:functionDecl>
        <xqx:functionName xqx:prefix="tour">find-best-move</xqx:functionName>
        <xqx:paramList>
          <xqx:param>
            <xqx:varName>board</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
              <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>possible-moves</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
              <xqx:occurrenceIndicator>+</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>fewest-exits</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>best-so-far</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
            </xqx:typeDeclaration>
          </xqx:param>
        </xqx:paramList>
        <xqx:typeDeclaration>
          <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
        </xqx:typeDeclaration>
        <xqx:functionBody>
          <xqx:flworExpr>
            <xqx:letClause>
              <xqx:letClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>trial-move</xqx:varName>
                  <xqx:typeDeclaration>
                    <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
                  </xqx:typeDeclaration>
                </xqx:typedVariableBinding>
                <xqx:letExpr>
                  <xqx:pathExpr>
                    <xqx:stepExpr>
                      <xqx:filterExpr>
                        <xqx:varRef>
                          <xqx:name>possible-moves</xqx:name>
                        </xqx:varRef>
                      </xqx:filterExpr>
                      <xqx:predicates>
                        <xqx:integerConstantExpr>
                          <xqx:value>1</xqx:value>
                        </xqx:integerConstantExpr>
                      </xqx:predicates>
                    </xqx:stepExpr>
                  </xqx:pathExpr>
                </xqx:letExpr>
              </xqx:letClauseItem>
            </xqx:letClause>
            <xqx:letClause>
              <xqx:letClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>other-possible-moves</xqx:varName>
                  <xqx:typeDeclaration>
                    <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
                    <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
                  </xqx:typeDeclaration>
                </xqx:typedVariableBinding>
                <xqx:letExpr>
                  <xqx:pathExpr>
                    <xqx:stepExpr>
                      <xqx:filterExpr>
                        <xqx:varRef>
                          <xqx:name>possible-moves</xqx:name>
                        </xqx:varRef>
                      </xqx:filterExpr>
                      <xqx:predicates>
                        <xqx:greaterThanOp>
                          <xqx:firstOperand>
                            <xqx:functionCallExpr>
                              <xqx:functionName>position</xqx:functionName>
                              <xqx:arguments>
                              </xqx:arguments>
                            </xqx:functionCallExpr>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:integerConstantExpr>
                              <xqx:value>1</xqx:value>
                            </xqx:integerConstantExpr>
                          </xqx:secondOperand>
                        </xqx:greaterThanOp>
                      </xqx:predicates>
                    </xqx:stepExpr>
                  </xqx:pathExpr>
                </xqx:letExpr>
              </xqx:letClauseItem>
            </xqx:letClause>
            <xqx:letClause>
              <xqx:letClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>trial-board</xqx:varName>
                  <xqx:typeDeclaration>
                    <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
                    <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
                  </xqx:typeDeclaration>
                </xqx:typedVariableBinding>
                <xqx:letExpr>
                  <xqx:functionCallExpr>
                    <xqx:functionName xqx:prefix="tour">place-knight</xqx:functionName>
                    <xqx:arguments>
                      <xqx:integerConstantExpr>
                        <xqx:value>99</xqx:value>
                      </xqx:integerConstantExpr>
                      <xqx:varRef>
                        <xqx:name>board</xqx:name>
                      </xqx:varRef>
                      <xqx:varRef>
                        <xqx:name>trial-move</xqx:name>
                      </xqx:varRef>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:letExpr>
              </xqx:letClauseItem>
            </xqx:letClause>
            <xqx:letClause>
              <xqx:letClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>trial-move-exit-list</xqx:varName>
                  <xqx:typeDeclaration>
                    <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
                    <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
                  </xqx:typeDeclaration>
                </xqx:typedVariableBinding>
                <xqx:letExpr>
                  <xqx:functionCallExpr>
                    <xqx:functionName xqx:prefix="tour">list-possible-moves</xqx:functionName>
                    <xqx:arguments>
                      <xqx:varRef>
                        <xqx:name>trial-board</xqx:name>
                      </xqx:varRef>
                      <xqx:varRef>
                        <xqx:name>trial-move</xqx:name>
                      </xqx:varRef>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:letExpr>
              </xqx:letClauseItem>
            </xqx:letClause>
            <xqx:letClause>
              <xqx:letClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>number-of-exits</xqx:varName>
                  <xqx:typeDeclaration>
                    <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
                  </xqx:typeDeclaration>
                </xqx:typedVariableBinding>
                <xqx:letExpr>
                  <xqx:functionCallExpr>
                    <xqx:functionName>count</xqx:functionName>
                    <xqx:arguments>
                      <xqx:varRef>
                        <xqx:name>trial-move-exit-list</xqx:name>
                      </xqx:varRef>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:letExpr>
              </xqx:letClauseItem>
            </xqx:letClause>
            <xqx:letClause>
              <xqx:letClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>minimum-exits</xqx:varName>
                  <xqx:typeDeclaration>
                    <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
                  </xqx:typeDeclaration>
                </xqx:typedVariableBinding>
                <xqx:letExpr>
                  <xqx:functionCallExpr>
                    <xqx:functionName>min</xqx:functionName>
                    <xqx:arguments>
                      <xqx:sequenceExpr>
                        <xqx:varRef>
                          <xqx:name>number-of-exits</xqx:name>
                        </xqx:varRef>
                        <xqx:varRef>
                          <xqx:name>fewest-exits</xqx:name>
                        </xqx:varRef>
                      </xqx:sequenceExpr>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:letExpr>
              </xqx:letClauseItem>
            </xqx:letClause>
            <xqx:letClause>
              <xqx:letClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>new-best-so-far</xqx:varName>
                  <xqx:typeDeclaration>
                    <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
                  </xqx:typeDeclaration>
                </xqx:typedVariableBinding>
                <xqx:letExpr>
                  <xqx:ifThenElseExpr>
                    <xqx:ifClause>
                      <xqx:lessThanOp>
                        <xqx:firstOperand>
                          <xqx:varRef>
                            <xqx:name>number-of-exits</xqx:name>
                          </xqx:varRef>
                        </xqx:firstOperand>
                        <xqx:secondOperand>
                          <xqx:varRef>
                            <xqx:name>fewest-exits</xqx:name>
                          </xqx:varRef>
                        </xqx:secondOperand>
                      </xqx:lessThanOp>
                    </xqx:ifClause>
                    <xqx:thenClause>
                      <xqx:varRef>
                        <xqx:name>trial-move</xqx:name>
                      </xqx:varRef>
                    </xqx:thenClause>
                    <xqx:elseClause>
                      <xqx:varRef>
                        <xqx:name>best-so-far</xqx:name>
                      </xqx:varRef>
                    </xqx:elseClause>
                  </xqx:ifThenElseExpr>
                </xqx:letExpr>
              </xqx:letClauseItem>
            </xqx:letClause>
            <xqx:returnClause>
              <xqx:ifThenElseExpr>
                <xqx:ifClause>
                  <xqx:notEqualOp>
                    <xqx:firstOperand>
                      <xqx:functionCallExpr>
                        <xqx:functionName>count</xqx:functionName>
                        <xqx:arguments>
                          <xqx:varRef>
                            <xqx:name>other-possible-moves</xqx:name>
                          </xqx:varRef>
                        </xqx:arguments>
                      </xqx:functionCallExpr>
                    </xqx:firstOperand>
                    <xqx:secondOperand>
                      <xqx:integerConstantExpr>
                        <xqx:value>0</xqx:value>
                      </xqx:integerConstantExpr>
                    </xqx:secondOperand>
                  </xqx:notEqualOp>
                </xqx:ifClause>
                <xqx:thenClause>
                  <xqx:functionCallExpr>
                    <xqx:functionName xqx:prefix="tour">find-best-move</xqx:functionName>
                    <xqx:arguments>
                      <xqx:varRef>
                        <xqx:name>board</xqx:name>
                      </xqx:varRef>
                      <xqx:functionCallExpr>
                        <xqx:functionName>one-or-more</xqx:functionName>
                        <xqx:arguments>
                          <xqx:varRef>
                            <xqx:name>other-possible-moves</xqx:name>
                          </xqx:varRef>
                        </xqx:arguments>
                      </xqx:functionCallExpr>
                      <xqx:varRef>
                        <xqx:name>minimum-exits</xqx:name>
                      </xqx:varRef>
                      <xqx:varRef>
                        <xqx:name>new-best-so-far</xqx:name>
                      </xqx:varRef>
                    </xqx:arguments>
                  </xqx:functionCallExpr>
                </xqx:thenClause>
                <xqx:elseClause>
                  <xqx:varRef>
                    <xqx:name>new-best-so-far</xqx:name>
                  </xqx:varRef>
                </xqx:elseClause>
              </xqx:ifThenElseExpr>
            </xqx:returnClause>
          </xqx:flworExpr>
        </xqx:functionBody>
      </xqx:functionDecl>
      <xqx:functionDecl>
        <xqx:functionName xqx:prefix="tour">list-possible-moves</xqx:functionName>
        <xqx:paramList>
          <xqx:param>
            <xqx:varName>board</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
              <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
          <xqx:param>
            <xqx:varName>square</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
            </xqx:typeDeclaration>
          </xqx:param>
        </xqx:paramList>
        <xqx:typeDeclaration>
          <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
          <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
        </xqx:typeDeclaration>
        <xqx:functionBody>
          <xqx:flworExpr>
            <xqx:letClause>
              <xqx:letClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>row</xqx:varName>
                  <xqx:typeDeclaration>
                    <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
                  </xqx:typeDeclaration>
                </xqx:typedVariableBinding>
                <xqx:letExpr>
                  <xqx:idivOp>
                    <xqx:firstOperand>
                      <xqx:varRef>
                        <xqx:name>square</xqx:name>
                      </xqx:varRef>
                    </xqx:firstOperand>
                    <xqx:secondOperand>
                      <xqx:integerConstantExpr>
                        <xqx:value>8</xqx:value>
                      </xqx:integerConstantExpr>
                    </xqx:secondOperand>
                  </xqx:idivOp>
                </xqx:letExpr>
              </xqx:letClauseItem>
            </xqx:letClause>
            <xqx:letClause>
              <xqx:letClauseItem>
                <xqx:typedVariableBinding>
                  <xqx:varName>column</xqx:varName>
                  <xqx:typeDeclaration>
                    <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
                  </xqx:typeDeclaration>
                </xqx:typedVariableBinding>
                <xqx:letExpr>
                  <xqx:modOp>
                    <xqx:firstOperand>
                      <xqx:varRef>
                        <xqx:name>square</xqx:name>
                      </xqx:varRef>
                    </xqx:firstOperand>
                    <xqx:secondOperand>
                      <xqx:integerConstantExpr>
                        <xqx:value>8</xqx:value>
                      </xqx:integerConstantExpr>
                    </xqx:secondOperand>
                  </xqx:modOp>
                </xqx:letExpr>
              </xqx:letClauseItem>
            </xqx:letClause>
            <xqx:returnClause>
              <xqx:sequenceExpr>
                <xqx:ifThenElseExpr>
                  <xqx:ifClause>
                    <xqx:andOp>
                      <xqx:firstOperand>
                        <xqx:andOp>
                          <xqx:firstOperand>
                            <xqx:greaterThanOp>
                              <xqx:firstOperand>
                                <xqx:varRef>
                                  <xqx:name>row</xqx:name>
                                </xqx:varRef>
                              </xqx:firstOperand>
                              <xqx:secondOperand>
                                <xqx:integerConstantExpr>
                                  <xqx:value>1</xqx:value>
                                </xqx:integerConstantExpr>
                              </xqx:secondOperand>
                            </xqx:greaterThanOp>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:greaterThanOp>
                              <xqx:firstOperand>
                                <xqx:varRef>
                                  <xqx:name>column</xqx:name>
                                </xqx:varRef>
                              </xqx:firstOperand>
                              <xqx:secondOperand>
                                <xqx:integerConstantExpr>
                                  <xqx:value>0</xqx:value>
                                </xqx:integerConstantExpr>
                              </xqx:secondOperand>
                            </xqx:greaterThanOp>
                          </xqx:secondOperand>
                        </xqx:andOp>
                      </xqx:firstOperand>
                      <xqx:secondOperand>
                        <xqx:equalOp>
                          <xqx:firstOperand>
                            <xqx:pathExpr>
                              <xqx:stepExpr>
                                <xqx:filterExpr>
                                  <xqx:varRef>
                                    <xqx:name>board</xqx:name>
                                  </xqx:varRef>
                                </xqx:filterExpr>
                                <xqx:predicates>
                                  <xqx:addOp>
                                    <xqx:firstOperand>
                                      <xqx:subtractOp>
                                        <xqx:firstOperand>
                                          <xqx:varRef>
                                            <xqx:name>square</xqx:name>
                                          </xqx:varRef>
                                        </xqx:firstOperand>
                                        <xqx:secondOperand>
                                          <xqx:integerConstantExpr>
                                            <xqx:value>17</xqx:value>
                                          </xqx:integerConstantExpr>
                                        </xqx:secondOperand>
                                      </xqx:subtractOp>
                                    </xqx:firstOperand>
                                    <xqx:secondOperand>
                                      <xqx:integerConstantExpr>
                                        <xqx:value>1</xqx:value>
                                      </xqx:integerConstantExpr>
                                    </xqx:secondOperand>
                                  </xqx:addOp>
                                </xqx:predicates>
                              </xqx:stepExpr>
                            </xqx:pathExpr>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:integerConstantExpr>
                              <xqx:value>0</xqx:value>
                            </xqx:integerConstantExpr>
                          </xqx:secondOperand>
                        </xqx:equalOp>
                      </xqx:secondOperand>
                    </xqx:andOp>
                  </xqx:ifClause>
                  <xqx:thenClause>
                    <xqx:subtractOp>
                      <xqx:firstOperand>
                        <xqx:varRef>
                          <xqx:name>square</xqx:name>
                        </xqx:varRef>
                      </xqx:firstOperand>
                      <xqx:secondOperand>
                        <xqx:integerConstantExpr>
                          <xqx:value>17</xqx:value>
                        </xqx:integerConstantExpr>
                      </xqx:secondOperand>
                    </xqx:subtractOp>
                  </xqx:thenClause>
                  <xqx:elseClause>
                    <xqx:sequenceExpr/>
                  </xqx:elseClause>
                </xqx:ifThenElseExpr>
                <xqx:ifThenElseExpr>
                  <xqx:ifClause>
                    <xqx:andOp>
                      <xqx:firstOperand>
                        <xqx:andOp>
                          <xqx:firstOperand>
                            <xqx:greaterThanOp>
                              <xqx:firstOperand>
                                <xqx:varRef>
                                  <xqx:name>row</xqx:name>
                                </xqx:varRef>
                              </xqx:firstOperand>
                              <xqx:secondOperand>
                                <xqx:integerConstantExpr>
                                  <xqx:value>1</xqx:value>
                                </xqx:integerConstantExpr>
                              </xqx:secondOperand>
                            </xqx:greaterThanOp>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:lessThanOp>
                              <xqx:firstOperand>
                                <xqx:varRef>
                                  <xqx:name>column</xqx:name>
                                </xqx:varRef>
                              </xqx:firstOperand>
                              <xqx:secondOperand>
                                <xqx:integerConstantExpr>
                                  <xqx:value>7</xqx:value>
                                </xqx:integerConstantExpr>
                              </xqx:secondOperand>
                            </xqx:lessThanOp>
                          </xqx:secondOperand>
                        </xqx:andOp>
                      </xqx:firstOperand>
                      <xqx:secondOperand>
                        <xqx:equalOp>
                          <xqx:firstOperand>
                            <xqx:pathExpr>
                              <xqx:stepExpr>
                                <xqx:filterExpr>
                                  <xqx:varRef>
                                    <xqx:name>board</xqx:name>
                                  </xqx:varRef>
                                </xqx:filterExpr>
                                <xqx:predicates>
                                  <xqx:addOp>
                                    <xqx:firstOperand>
                                      <xqx:subtractOp>
                                        <xqx:firstOperand>
                                          <xqx:varRef>
                                            <xqx:name>square</xqx:name>
                                          </xqx:varRef>
                                        </xqx:firstOperand>
                                        <xqx:secondOperand>
                                          <xqx:integerConstantExpr>
                                            <xqx:value>15</xqx:value>
                                          </xqx:integerConstantExpr>
                                        </xqx:secondOperand>
                                      </xqx:subtractOp>
                                    </xqx:firstOperand>
                                    <xqx:secondOperand>
                                      <xqx:integerConstantExpr>
                                        <xqx:value>1</xqx:value>
                                      </xqx:integerConstantExpr>
                                    </xqx:secondOperand>
                                  </xqx:addOp>
                                </xqx:predicates>
                              </xqx:stepExpr>
                            </xqx:pathExpr>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:integerConstantExpr>
                              <xqx:value>0</xqx:value>
                            </xqx:integerConstantExpr>
                          </xqx:secondOperand>
                        </xqx:equalOp>
                      </xqx:secondOperand>
                    </xqx:andOp>
                  </xqx:ifClause>
                  <xqx:thenClause>
                    <xqx:subtractOp>
                      <xqx:firstOperand>
                        <xqx:varRef>
                          <xqx:name>square</xqx:name>
                        </xqx:varRef>
                      </xqx:firstOperand>
                      <xqx:secondOperand>
                        <xqx:integerConstantExpr>
                          <xqx:value>15</xqx:value>
                        </xqx:integerConstantExpr>
                      </xqx:secondOperand>
                    </xqx:subtractOp>
                  </xqx:thenClause>
                  <xqx:elseClause>
                    <xqx:sequenceExpr/>
                  </xqx:elseClause>
                </xqx:ifThenElseExpr>
                <xqx:ifThenElseExpr>
                  <xqx:ifClause>
                    <xqx:andOp>
                      <xqx:firstOperand>
                        <xqx:andOp>
                          <xqx:firstOperand>
                            <xqx:greaterThanOp>
                              <xqx:firstOperand>
                                <xqx:varRef>
                                  <xqx:name>row</xqx:name>
                                </xqx:varRef>
                              </xqx:firstOperand>
                              <xqx:secondOperand>
                                <xqx:integerConstantExpr>
                                  <xqx:value>0</xqx:value>
                                </xqx:integerConstantExpr>
                              </xqx:secondOperand>
                            </xqx:greaterThanOp>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:greaterThanOp>
                              <xqx:firstOperand>
                                <xqx:varRef>
                                  <xqx:name>column</xqx:name>
                                </xqx:varRef>
                              </xqx:firstOperand>
                              <xqx:secondOperand>
                                <xqx:integerConstantExpr>
                                  <xqx:value>1</xqx:value>
                                </xqx:integerConstantExpr>
                              </xqx:secondOperand>
                            </xqx:greaterThanOp>
                          </xqx:secondOperand>
                        </xqx:andOp>
                      </xqx:firstOperand>
                      <xqx:secondOperand>
                        <xqx:equalOp>
                          <xqx:firstOperand>
                            <xqx:pathExpr>
                              <xqx:stepExpr>
                                <xqx:filterExpr>
                                  <xqx:varRef>
                                    <xqx:name>board</xqx:name>
                                  </xqx:varRef>
                                </xqx:filterExpr>
                                <xqx:predicates>
                                  <xqx:addOp>
                                    <xqx:firstOperand>
                                      <xqx:subtractOp>
                                        <xqx:firstOperand>
                                          <xqx:varRef>
                                            <xqx:name>square</xqx:name>
                                          </xqx:varRef>
                                        </xqx:firstOperand>
                                        <xqx:secondOperand>
                                          <xqx:integerConstantExpr>
                                            <xqx:value>10</xqx:value>
                                          </xqx:integerConstantExpr>
                                        </xqx:secondOperand>
                                      </xqx:subtractOp>
                                    </xqx:firstOperand>
                                    <xqx:secondOperand>
                                      <xqx:integerConstantExpr>
                                        <xqx:value>1</xqx:value>
                                      </xqx:integerConstantExpr>
                                    </xqx:secondOperand>
                                  </xqx:addOp>
                                </xqx:predicates>
                              </xqx:stepExpr>
                            </xqx:pathExpr>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:integerConstantExpr>
                              <xqx:value>0</xqx:value>
                            </xqx:integerConstantExpr>
                          </xqx:secondOperand>
                        </xqx:equalOp>
                      </xqx:secondOperand>
                    </xqx:andOp>
                  </xqx:ifClause>
                  <xqx:thenClause>
                    <xqx:subtractOp>
                      <xqx:firstOperand>
                        <xqx:varRef>
                          <xqx:name>square</xqx:name>
                        </xqx:varRef>
                      </xqx:firstOperand>
                      <xqx:secondOperand>
                        <xqx:integerConstantExpr>
                          <xqx:value>10</xqx:value>
                        </xqx:integerConstantExpr>
                      </xqx:secondOperand>
                    </xqx:subtractOp>
                  </xqx:thenClause>
                  <xqx:elseClause>
                    <xqx:sequenceExpr/>
                  </xqx:elseClause>
                </xqx:ifThenElseExpr>
                <xqx:ifThenElseExpr>
                  <xqx:ifClause>
                    <xqx:andOp>
                      <xqx:firstOperand>
                        <xqx:andOp>
                          <xqx:firstOperand>
                            <xqx:greaterThanOp>
                              <xqx:firstOperand>
                                <xqx:varRef>
                                  <xqx:name>row</xqx:name>
                                </xqx:varRef>
                              </xqx:firstOperand>
                              <xqx:secondOperand>
                                <xqx:integerConstantExpr>
                                  <xqx:value>0</xqx:value>
                                </xqx:integerConstantExpr>
                              </xqx:secondOperand>
                            </xqx:greaterThanOp>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:lessThanOp>
                              <xqx:firstOperand>
                                <xqx:varRef>
                                  <xqx:name>column</xqx:name>
                                </xqx:varRef>
                              </xqx:firstOperand>
                              <xqx:secondOperand>
                                <xqx:integerConstantExpr>
                                  <xqx:value>6</xqx:value>
                                </xqx:integerConstantExpr>
                              </xqx:secondOperand>
                            </xqx:lessThanOp>
                          </xqx:secondOperand>
                        </xqx:andOp>
                      </xqx:firstOperand>
                      <xqx:secondOperand>
                        <xqx:equalOp>
                          <xqx:firstOperand>
                            <xqx:pathExpr>
                              <xqx:stepExpr>
                                <xqx:filterExpr>
                                  <xqx:varRef>
                                    <xqx:name>board</xqx:name>
                                  </xqx:varRef>
                                </xqx:filterExpr>
                                <xqx:predicates>
                                  <xqx:addOp>
                                    <xqx:firstOperand>
                                      <xqx:subtractOp>
                                        <xqx:firstOperand>
                                          <xqx:varRef>
                                            <xqx:name>square</xqx:name>
                                          </xqx:varRef>
                                        </xqx:firstOperand>
                                        <xqx:secondOperand>
                                          <xqx:integerConstantExpr>
                                            <xqx:value>6</xqx:value>
                                          </xqx:integerConstantExpr>
                                        </xqx:secondOperand>
                                      </xqx:subtractOp>
                                    </xqx:firstOperand>
                                    <xqx:secondOperand>
                                      <xqx:integerConstantExpr>
                                        <xqx:value>1</xqx:value>
                                      </xqx:integerConstantExpr>
                                    </xqx:secondOperand>
                                  </xqx:addOp>
                                </xqx:predicates>
                              </xqx:stepExpr>
                            </xqx:pathExpr>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:integerConstantExpr>
                              <xqx:value>0</xqx:value>
                            </xqx:integerConstantExpr>
                          </xqx:secondOperand>
                        </xqx:equalOp>
                      </xqx:secondOperand>
                    </xqx:andOp>
                  </xqx:ifClause>
                  <xqx:thenClause>
                    <xqx:subtractOp>
                      <xqx:firstOperand>
                        <xqx:varRef>
                          <xqx:name>square</xqx:name>
                        </xqx:varRef>
                      </xqx:firstOperand>
                      <xqx:secondOperand>
                        <xqx:integerConstantExpr>
                          <xqx:value>6</xqx:value>
                        </xqx:integerConstantExpr>
                      </xqx:secondOperand>
                    </xqx:subtractOp>
                  </xqx:thenClause>
                  <xqx:elseClause>
                    <xqx:sequenceExpr/>
                  </xqx:elseClause>
                </xqx:ifThenElseExpr>
                <xqx:ifThenElseExpr>
                  <xqx:ifClause>
                    <xqx:andOp>
                      <xqx:firstOperand>
                        <xqx:andOp>
                          <xqx:firstOperand>
                            <xqx:lessThanOp>
                              <xqx:firstOperand>
                                <xqx:varRef>
                                  <xqx:name>row</xqx:name>
                                </xqx:varRef>
                              </xqx:firstOperand>
                              <xqx:secondOperand>
                                <xqx:integerConstantExpr>
                                  <xqx:value>6</xqx:value>
                                </xqx:integerConstantExpr>
                              </xqx:secondOperand>
                            </xqx:lessThanOp>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:greaterThanOp>
                              <xqx:firstOperand>
                                <xqx:varRef>
                                  <xqx:name>column</xqx:name>
                                </xqx:varRef>
                              </xqx:firstOperand>
                              <xqx:secondOperand>
                                <xqx:integerConstantExpr>
                                  <xqx:value>0</xqx:value>
                                </xqx:integerConstantExpr>
                              </xqx:secondOperand>
                            </xqx:greaterThanOp>
                          </xqx:secondOperand>
                        </xqx:andOp>
                      </xqx:firstOperand>
                      <xqx:secondOperand>
                        <xqx:equalOp>
                          <xqx:firstOperand>
                            <xqx:pathExpr>
                              <xqx:stepExpr>
                                <xqx:filterExpr>
                                  <xqx:varRef>
                                    <xqx:name>board</xqx:name>
                                  </xqx:varRef>
                                </xqx:filterExpr>
                                <xqx:predicates>
                                  <xqx:addOp>
                                    <xqx:firstOperand>
                                      <xqx:addOp>
                                        <xqx:firstOperand>
                                          <xqx:varRef>
                                            <xqx:name>square</xqx:name>
                                          </xqx:varRef>
                                        </xqx:firstOperand>
                                        <xqx:secondOperand>
                                          <xqx:integerConstantExpr>
                                            <xqx:value>15</xqx:value>
                                          </xqx:integerConstantExpr>
                                        </xqx:secondOperand>
                                      </xqx:addOp>
                                    </xqx:firstOperand>
                                    <xqx:secondOperand>
                                      <xqx:integerConstantExpr>
                                        <xqx:value>1</xqx:value>
                                      </xqx:integerConstantExpr>
                                    </xqx:secondOperand>
                                  </xqx:addOp>
                                </xqx:predicates>
                              </xqx:stepExpr>
                            </xqx:pathExpr>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:integerConstantExpr>
                              <xqx:value>0</xqx:value>
                            </xqx:integerConstantExpr>
                          </xqx:secondOperand>
                        </xqx:equalOp>
                      </xqx:secondOperand>
                    </xqx:andOp>
                  </xqx:ifClause>
                  <xqx:thenClause>
                    <xqx:addOp>
                      <xqx:firstOperand>
                        <xqx:varRef>
                          <xqx:name>square</xqx:name>
                        </xqx:varRef>
                      </xqx:firstOperand>
                      <xqx:secondOperand>
                        <xqx:integerConstantExpr>
                          <xqx:value>15</xqx:value>
                        </xqx:integerConstantExpr>
                      </xqx:secondOperand>
                    </xqx:addOp>
                  </xqx:thenClause>
                  <xqx:elseClause>
                    <xqx:sequenceExpr/>
                  </xqx:elseClause>
                </xqx:ifThenElseExpr>
                <xqx:ifThenElseExpr>
                  <xqx:ifClause>
                    <xqx:andOp>
                      <xqx:firstOperand>
                        <xqx:andOp>
                          <xqx:firstOperand>
                            <xqx:lessThanOp>
                              <xqx:firstOperand>
                                <xqx:varRef>
                                  <xqx:name>row</xqx:name>
                                </xqx:varRef>
                              </xqx:firstOperand>
                              <xqx:secondOperand>
                                <xqx:integerConstantExpr>
                                  <xqx:value>6</xqx:value>
                                </xqx:integerConstantExpr>
                              </xqx:secondOperand>
                            </xqx:lessThanOp>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:lessThanOp>
                              <xqx:firstOperand>
                                <xqx:varRef>
                                  <xqx:name>column</xqx:name>
                                </xqx:varRef>
                              </xqx:firstOperand>
                              <xqx:secondOperand>
                                <xqx:integerConstantExpr>
                                  <xqx:value>7</xqx:value>
                                </xqx:integerConstantExpr>
                              </xqx:secondOperand>
                            </xqx:lessThanOp>
                          </xqx:secondOperand>
                        </xqx:andOp>
                      </xqx:firstOperand>
                      <xqx:secondOperand>
                        <xqx:equalOp>
                          <xqx:firstOperand>
                            <xqx:pathExpr>
                              <xqx:stepExpr>
                                <xqx:filterExpr>
                                  <xqx:varRef>
                                    <xqx:name>board</xqx:name>
                                  </xqx:varRef>
                                </xqx:filterExpr>
                                <xqx:predicates>
                                  <xqx:addOp>
                                    <xqx:firstOperand>
                                      <xqx:addOp>
                                        <xqx:firstOperand>
                                          <xqx:varRef>
                                            <xqx:name>square</xqx:name>
                                          </xqx:varRef>
                                        </xqx:firstOperand>
                                        <xqx:secondOperand>
                                          <xqx:integerConstantExpr>
                                            <xqx:value>17</xqx:value>
                                          </xqx:integerConstantExpr>
                                        </xqx:secondOperand>
                                      </xqx:addOp>
                                    </xqx:firstOperand>
                                    <xqx:secondOperand>
                                      <xqx:integerConstantExpr>
                                        <xqx:value>1</xqx:value>
                                      </xqx:integerConstantExpr>
                                    </xqx:secondOperand>
                                  </xqx:addOp>
                                </xqx:predicates>
                              </xqx:stepExpr>
                            </xqx:pathExpr>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:integerConstantExpr>
                              <xqx:value>0</xqx:value>
                            </xqx:integerConstantExpr>
                          </xqx:secondOperand>
                        </xqx:equalOp>
                      </xqx:secondOperand>
                    </xqx:andOp>
                  </xqx:ifClause>
                  <xqx:thenClause>
                    <xqx:addOp>
                      <xqx:firstOperand>
                        <xqx:varRef>
                          <xqx:name>square</xqx:name>
                        </xqx:varRef>
                      </xqx:firstOperand>
                      <xqx:secondOperand>
                        <xqx:integerConstantExpr>
                          <xqx:value>17</xqx:value>
                        </xqx:integerConstantExpr>
                      </xqx:secondOperand>
                    </xqx:addOp>
                  </xqx:thenClause>
                  <xqx:elseClause>
                    <xqx:sequenceExpr/>
                  </xqx:elseClause>
                </xqx:ifThenElseExpr>
                <xqx:ifThenElseExpr>
                  <xqx:ifClause>
                    <xqx:andOp>
                      <xqx:firstOperand>
                        <xqx:andOp>
                          <xqx:firstOperand>
                            <xqx:lessThanOp>
                              <xqx:firstOperand>
                                <xqx:varRef>
                                  <xqx:name>row</xqx:name>
                                </xqx:varRef>
                              </xqx:firstOperand>
                              <xqx:secondOperand>
                                <xqx:integerConstantExpr>
                                  <xqx:value>7</xqx:value>
                                </xqx:integerConstantExpr>
                              </xqx:secondOperand>
                            </xqx:lessThanOp>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:greaterThanOp>
                              <xqx:firstOperand>
                                <xqx:varRef>
                                  <xqx:name>column</xqx:name>
                                </xqx:varRef>
                              </xqx:firstOperand>
                              <xqx:secondOperand>
                                <xqx:integerConstantExpr>
                                  <xqx:value>1</xqx:value>
                                </xqx:integerConstantExpr>
                              </xqx:secondOperand>
                            </xqx:greaterThanOp>
                          </xqx:secondOperand>
                        </xqx:andOp>
                      </xqx:firstOperand>
                      <xqx:secondOperand>
                        <xqx:equalOp>
                          <xqx:firstOperand>
                            <xqx:pathExpr>
                              <xqx:stepExpr>
                                <xqx:filterExpr>
                                  <xqx:varRef>
                                    <xqx:name>board</xqx:name>
                                  </xqx:varRef>
                                </xqx:filterExpr>
                                <xqx:predicates>
                                  <xqx:addOp>
                                    <xqx:firstOperand>
                                      <xqx:addOp>
                                        <xqx:firstOperand>
                                          <xqx:varRef>
                                            <xqx:name>square</xqx:name>
                                          </xqx:varRef>
                                        </xqx:firstOperand>
                                        <xqx:secondOperand>
                                          <xqx:integerConstantExpr>
                                            <xqx:value>6</xqx:value>
                                          </xqx:integerConstantExpr>
                                        </xqx:secondOperand>
                                      </xqx:addOp>
                                    </xqx:firstOperand>
                                    <xqx:secondOperand>
                                      <xqx:integerConstantExpr>
                                        <xqx:value>1</xqx:value>
                                      </xqx:integerConstantExpr>
                                    </xqx:secondOperand>
                                  </xqx:addOp>
                                </xqx:predicates>
                              </xqx:stepExpr>
                            </xqx:pathExpr>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:integerConstantExpr>
                              <xqx:value>0</xqx:value>
                            </xqx:integerConstantExpr>
                          </xqx:secondOperand>
                        </xqx:equalOp>
                      </xqx:secondOperand>
                    </xqx:andOp>
                  </xqx:ifClause>
                  <xqx:thenClause>
                    <xqx:addOp>
                      <xqx:firstOperand>
                        <xqx:varRef>
                          <xqx:name>square</xqx:name>
                        </xqx:varRef>
                      </xqx:firstOperand>
                      <xqx:secondOperand>
                        <xqx:integerConstantExpr>
                          <xqx:value>6</xqx:value>
                        </xqx:integerConstantExpr>
                      </xqx:secondOperand>
                    </xqx:addOp>
                  </xqx:thenClause>
                  <xqx:elseClause>
                    <xqx:sequenceExpr/>
                  </xqx:elseClause>
                </xqx:ifThenElseExpr>
                <xqx:ifThenElseExpr>
                  <xqx:ifClause>
                    <xqx:andOp>
                      <xqx:firstOperand>
                        <xqx:andOp>
                          <xqx:firstOperand>
                            <xqx:lessThanOp>
                              <xqx:firstOperand>
                                <xqx:varRef>
                                  <xqx:name>row</xqx:name>
                                </xqx:varRef>
                              </xqx:firstOperand>
                              <xqx:secondOperand>
                                <xqx:integerConstantExpr>
                                  <xqx:value>7</xqx:value>
                                </xqx:integerConstantExpr>
                              </xqx:secondOperand>
                            </xqx:lessThanOp>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:lessThanOp>
                              <xqx:firstOperand>
                                <xqx:varRef>
                                  <xqx:name>column</xqx:name>
                                </xqx:varRef>
                              </xqx:firstOperand>
                              <xqx:secondOperand>
                                <xqx:integerConstantExpr>
                                  <xqx:value>6</xqx:value>
                                </xqx:integerConstantExpr>
                              </xqx:secondOperand>
                            </xqx:lessThanOp>
                          </xqx:secondOperand>
                        </xqx:andOp>
                      </xqx:firstOperand>
                      <xqx:secondOperand>
                        <xqx:equalOp>
                          <xqx:firstOperand>
                            <xqx:pathExpr>
                              <xqx:stepExpr>
                                <xqx:filterExpr>
                                  <xqx:varRef>
                                    <xqx:name>board</xqx:name>
                                  </xqx:varRef>
                                </xqx:filterExpr>
                                <xqx:predicates>
                                  <xqx:addOp>
                                    <xqx:firstOperand>
                                      <xqx:addOp>
                                        <xqx:firstOperand>
                                          <xqx:varRef>
                                            <xqx:name>square</xqx:name>
                                          </xqx:varRef>
                                        </xqx:firstOperand>
                                        <xqx:secondOperand>
                                          <xqx:integerConstantExpr>
                                            <xqx:value>10</xqx:value>
                                          </xqx:integerConstantExpr>
                                        </xqx:secondOperand>
                                      </xqx:addOp>
                                    </xqx:firstOperand>
                                    <xqx:secondOperand>
                                      <xqx:integerConstantExpr>
                                        <xqx:value>1</xqx:value>
                                      </xqx:integerConstantExpr>
                                    </xqx:secondOperand>
                                  </xqx:addOp>
                                </xqx:predicates>
                              </xqx:stepExpr>
                            </xqx:pathExpr>
                          </xqx:firstOperand>
                          <xqx:secondOperand>
                            <xqx:integerConstantExpr>
                              <xqx:value>0</xqx:value>
                            </xqx:integerConstantExpr>
                          </xqx:secondOperand>
                        </xqx:equalOp>
                      </xqx:secondOperand>
                    </xqx:andOp>
                  </xqx:ifClause>
                  <xqx:thenClause>
                    <xqx:addOp>
                      <xqx:firstOperand>
                        <xqx:varRef>
                          <xqx:name>square</xqx:name>
                        </xqx:varRef>
                      </xqx:firstOperand>
                      <xqx:secondOperand>
                        <xqx:integerConstantExpr>
                          <xqx:value>10</xqx:value>
                        </xqx:integerConstantExpr>
                      </xqx:secondOperand>
                    </xqx:addOp>
                  </xqx:thenClause>
                  <xqx:elseClause>
                    <xqx:sequenceExpr/>
                  </xqx:elseClause>
                </xqx:ifThenElseExpr>
              </xqx:sequenceExpr>
            </xqx:returnClause>
          </xqx:flworExpr>
        </xqx:functionBody>
      </xqx:functionDecl>
      <xqx:functionDecl>
        <xqx:functionName xqx:prefix="tour">print-board</xqx:functionName>
        <xqx:paramList>
          <xqx:param>
            <xqx:varName>board</xqx:varName>
            <xqx:typeDeclaration>
              <xqx:atomicType xqx:prefix="xs">integer</xqx:atomicType>
              <xqx:occurrenceIndicator>*</xqx:occurrenceIndicator>
            </xqx:typeDeclaration>
          </xqx:param>
        </xqx:paramList>
        <xqx:typeDeclaration>
          <xqx:elementTest/>
        </xqx:typeDeclaration>
        <xqx:functionBody>
          <xqx:elementConstructor>
            <xqx:tagName>html</xqx:tagName>
            <xqx:elementContent>
              <xqx:elementConstructor>
                <xqx:tagName>head</xqx:tagName>
                <xqx:elementContent>
                  <xqx:elementConstructor>
                    <xqx:tagName>title</xqx:tagName>
                    <xqx:elementContent>
                      <xqx:stringConstantExpr>
                        <xqx:value>Knight's tour</xqx:value>
                      </xqx:stringConstantExpr>
                    </xqx:elementContent>
                  </xqx:elementConstructor>
                </xqx:elementContent>
              </xqx:elementConstructor>
              <xqx:elementConstructor>
                <xqx:tagName>body</xqx:tagName>
                <xqx:elementContent>
                  <xqx:elementConstructor>
                    <xqx:tagName>div</xqx:tagName>
                    <xqx:attributeList>
                      <xqx:attributeConstructor>
                        <xqx:attributeName>align</xqx:attributeName>
                        <xqx:attributeValue>center</xqx:attributeValue>
                      </xqx:attributeConstructor>
                    </xqx:attributeList>
                    <xqx:elementContent>
                      <xqx:elementConstructor>
                        <xqx:tagName>h1</xqx:tagName>
                        <xqx:elementContent>
                          <xqx:stringConstantExpr>
                            <xqx:value>Knight's tour starting at </xqx:value>
                          </xqx:stringConstantExpr>
                          <xqx:varRef>
                            <xqx:name>start</xqx:name>
                          </xqx:varRef>
                        </xqx:elementContent>
                      </xqx:elementConstructor>
                      <xqx:elementConstructor>
                        <xqx:tagName>table</xqx:tagName>
                        <xqx:attributeList>
                          <xqx:attributeConstructor>
                            <xqx:attributeName>border</xqx:attributeName>
                            <xqx:attributeValue>1</xqx:attributeValue>
                          </xqx:attributeConstructor>
                          <xqx:attributeConstructor>
                            <xqx:attributeName>cellpadding</xqx:attributeName>
                            <xqx:attributeValue>4</xqx:attributeValue>
                          </xqx:attributeConstructor>
                        </xqx:attributeList>
                        <xqx:elementContent>
                          <xqx:flworExpr>
                            <xqx:forClause>
                              <xqx:forClauseItem>
                                <xqx:typedVariableBinding>
                                  <xqx:varName>row</xqx:varName>
                                </xqx:typedVariableBinding>
                                <xqx:forExpr>
                                  <xqx:rangeSequenceExpr>
                                    <xqx:startExpr>
                                      <xqx:integerConstantExpr>
                                        <xqx:value>0</xqx:value>
                                      </xqx:integerConstantExpr>
                                    </xqx:startExpr>
                                    <xqx:endExpr>
                                      <xqx:integerConstantExpr>
                                        <xqx:value>7</xqx:value>
                                      </xqx:integerConstantExpr>
                                    </xqx:endExpr>
                                  </xqx:rangeSequenceExpr>
                                </xqx:forExpr>
                              </xqx:forClauseItem>
                            </xqx:forClause>
                            <xqx:returnClause>
                              <xqx:elementConstructor>
                                <xqx:tagName>tr</xqx:tagName>
                                <xqx:elementContent>
                                  <xqx:flworExpr>
                                    <xqx:forClause>
                                      <xqx:forClauseItem>
                                        <xqx:typedVariableBinding>
                                          <xqx:varName>column</xqx:varName>
                                        </xqx:typedVariableBinding>
                                        <xqx:forExpr>
                                          <xqx:rangeSequenceExpr>
                                            <xqx:startExpr>
                                              <xqx:integerConstantExpr>
                                                <xqx:value>0</xqx:value>
                                              </xqx:integerConstantExpr>
                                            </xqx:startExpr>
                                            <xqx:endExpr>
                                              <xqx:integerConstantExpr>
                                                <xqx:value>7</xqx:value>
                                              </xqx:integerConstantExpr>
                                            </xqx:endExpr>
                                          </xqx:rangeSequenceExpr>
                                        </xqx:forExpr>
                                      </xqx:forClauseItem>
                                    </xqx:forClause>
                                    <xqx:letClause>
                                      <xqx:letClauseItem>
                                        <xqx:typedVariableBinding>
                                          <xqx:varName>color</xqx:varName>
                                        </xqx:typedVariableBinding>
                                        <xqx:letExpr>
                                          <xqx:ifThenElseExpr>
                                            <xqx:ifClause>
                                              <xqx:equalOp>
                                                <xqx:firstOperand>
                                                  <xqx:modOp>
                                                    <xqx:firstOperand>
                                                      <xqx:addOp>
                                                        <xqx:firstOperand>
                                                          <xqx:varRef>
                                                            <xqx:name>row</xqx:name>
                                                          </xqx:varRef>
                                                        </xqx:firstOperand>
                                                        <xqx:secondOperand>
                                                          <xqx:varRef>
                                                            <xqx:name>column</xqx:name>
                                                          </xqx:varRef>
                                                        </xqx:secondOperand>
                                                      </xqx:addOp>
                                                    </xqx:firstOperand>
                                                    <xqx:secondOperand>
                                                      <xqx:integerConstantExpr>
                                                        <xqx:value>2</xqx:value>
                                                      </xqx:integerConstantExpr>
                                                    </xqx:secondOperand>
                                                  </xqx:modOp>
                                                </xqx:firstOperand>
                                                <xqx:secondOperand>
                                                  <xqx:integerConstantExpr>
                                                    <xqx:value>1</xqx:value>
                                                  </xqx:integerConstantExpr>
                                                </xqx:secondOperand>
                                              </xqx:equalOp>
                                            </xqx:ifClause>
                                            <xqx:thenClause>
                                              <xqx:stringConstantExpr>
                                                <xqx:value>xffff44</xqx:value>
                                              </xqx:stringConstantExpr>
                                            </xqx:thenClause>
                                            <xqx:elseClause>
                                              <xqx:stringConstantExpr>
                                                <xqx:value>white</xqx:value>
                                              </xqx:stringConstantExpr>
                                            </xqx:elseClause>
                                          </xqx:ifThenElseExpr>
                                        </xqx:letExpr>
                                      </xqx:letClauseItem>
                                    </xqx:letClause>
                                    <xqx:returnClause>
                                      <xqx:elementConstructor>
                                        <xqx:tagName>td</xqx:tagName>
                                        <xqx:attributeList>
                                          <xqx:attributeConstructor>
                                            <xqx:attributeName>align</xqx:attributeName>
                                            <xqx:attributeValue>center</xqx:attributeValue>
                                          </xqx:attributeConstructor>
                                          <xqx:attributeConstructor>
                                            <xqx:attributeName>bgcolor</xqx:attributeName>
                                            <xqx:attributeValueExpr>
                                              <xqx:varRef>
                                                <xqx:name>color</xqx:name>
                                              </xqx:varRef>
                                            </xqx:attributeValueExpr>
                                          </xqx:attributeConstructor>
                                          <xqx:attributeConstructor>
                                            <xqx:attributeName>width</xqx:attributeName>
                                            <xqx:attributeValue>22</xqx:attributeValue>
                                          </xqx:attributeConstructor>
                                        </xqx:attributeList>
                                        <xqx:elementContent>
                                          <xqx:flworExpr>
                                            <xqx:letClause>
                                              <xqx:letClauseItem>
                                                <xqx:typedVariableBinding>
                                                  <xqx:varName>n</xqx:varName>
                                                </xqx:typedVariableBinding>
                                                <xqx:letExpr>
                                                  <xqx:pathExpr>
                                                    <xqx:stepExpr>
                                                      <xqx:filterExpr>
                                                        <xqx:varRef>
                                                          <xqx:name>board</xqx:name>
                                                        </xqx:varRef>
                                                      </xqx:filterExpr>
                                                      <xqx:predicates>
                                                        <xqx:addOp>
                                                          <xqx:firstOperand>
                                                            <xqx:addOp>
                                                              <xqx:firstOperand>
                                                                <xqx:multiplyOp>
                                                                  <xqx:firstOperand>
                                                                    <xqx:varRef>
                                                                      <xqx:name>row</xqx:name>
                                                                    </xqx:varRef>
                                                                  </xqx:firstOperand>
                                                                  <xqx:secondOperand>
                                                                    <xqx:integerConstantExpr>
                                                                      <xqx:value>8</xqx:value>
                                                                    </xqx:integerConstantExpr>
                                                                  </xqx:secondOperand>
                                                                </xqx:multiplyOp>
                                                              </xqx:firstOperand>
                                                              <xqx:secondOperand>
                                                                <xqx:varRef>
                                                                  <xqx:name>column</xqx:name>
                                                                </xqx:varRef>
                                                              </xqx:secondOperand>
                                                            </xqx:addOp>
                                                          </xqx:firstOperand>
                                                          <xqx:secondOperand>
                                                            <xqx:integerConstantExpr>
                                                              <xqx:value>1</xqx:value>
                                                            </xqx:integerConstantExpr>
                                                          </xqx:secondOperand>
                                                        </xqx:addOp>
                                                      </xqx:predicates>
                                                    </xqx:stepExpr>
                                                  </xqx:pathExpr>
                                                </xqx:letExpr>
                                              </xqx:letClauseItem>
                                            </xqx:letClause>
                                            <xqx:returnClause>
                                              <xqx:ifThenElseExpr>
                                                <xqx:ifClause>
                                                  <xqx:andOp>
                                                    <xqx:firstOperand>
                                                      <xqx:notEqualOp>
                                                        <xqx:firstOperand>
                                                          <xqx:varRef>
                                                            <xqx:name>endd</xqx:name>
                                                          </xqx:varRef>
                                                        </xqx:firstOperand>
                                                        <xqx:secondOperand>
                                                          <xqx:integerConstantExpr>
                                                            <xqx:value>64</xqx:value>
                                                          </xqx:integerConstantExpr>
                                                        </xqx:secondOperand>
                                                      </xqx:notEqualOp>
                                                    </xqx:firstOperand>
                                                    <xqx:secondOperand>
                                                      <xqx:equalOp>
                                                        <xqx:firstOperand>
                                                          <xqx:varRef>
                                                            <xqx:name>n</xqx:name>
                                                          </xqx:varRef>
                                                        </xqx:firstOperand>
                                                        <xqx:secondOperand>
                                                          <xqx:varRef>
                                                            <xqx:name>endd</xqx:name>
                                                          </xqx:varRef>
                                                        </xqx:secondOperand>
                                                      </xqx:equalOp>
                                                    </xqx:secondOperand>
                                                  </xqx:andOp>
                                                </xqx:ifClause>
                                                <xqx:thenClause>
                                                  <xqx:elementConstructor>
                                                    <xqx:tagName>b</xqx:tagName>
                                                    <xqx:elementContent>
                                                      <xqx:varRef>
                                                        <xqx:name>n</xqx:name>
                                                      </xqx:varRef>
                                                    </xqx:elementContent>
                                                  </xqx:elementConstructor>
                                                </xqx:thenClause>
                                                <xqx:elseClause>
                                                  <xqx:ifThenElseExpr>
                                                    <xqx:ifClause>
                                                      <xqx:equalOp>
                                                        <xqx:firstOperand>
                                                          <xqx:varRef>
                                                            <xqx:name>n</xqx:name>
                                                          </xqx:varRef>
                                                        </xqx:firstOperand>
                                                        <xqx:secondOperand>
                                                          <xqx:integerConstantExpr>
                                                            <xqx:value>0</xqx:value>
                                                          </xqx:integerConstantExpr>
                                                        </xqx:secondOperand>
                                                      </xqx:equalOp>
                                                    </xqx:ifClause>
                                                    <xqx:thenClause>
                                                      <xqx:stringConstantExpr>
                                                        <xqx:value>&#xa0;</xqx:value>
                                                      </xqx:stringConstantExpr>
                                                    </xqx:thenClause>
                                                    <xqx:elseClause>
                                                      <xqx:varRef>
                                                        <xqx:name>n</xqx:name>
                                                      </xqx:varRef>
                                                    </xqx:elseClause>
                                                  </xqx:ifThenElseExpr>
                                                </xqx:elseClause>
                                              </xqx:ifThenElseExpr>
                                            </xqx:returnClause>
                                          </xqx:flworExpr>
                                        </xqx:elementContent>
                                      </xqx:elementConstructor>
                                    </xqx:returnClause>
                                  </xqx:flworExpr>
                                </xqx:elementContent>
                              </xqx:elementConstructor>
                            </xqx:returnClause>
                          </xqx:flworExpr>
                        </xqx:elementContent>
                      </xqx:elementConstructor>
                      <xqx:elementConstructor>
                        <xqx:tagName>p</xqx:tagName>
                        <xqx:elementContent>
                          <xqx:ifThenElseExpr>
                            <xqx:ifClause>
                              <xqx:notEqualOp>
                                <xqx:firstOperand>
                                  <xqx:varRef>
                                    <xqx:name>endd</xqx:name>
                                  </xqx:varRef>
                                </xqx:firstOperand>
                                <xqx:secondOperand>
                                  <xqx:integerConstantExpr>
                                    <xqx:value>64</xqx:value>
                                  </xqx:integerConstantExpr>
                                </xqx:secondOperand>
                              </xqx:notEqualOp>
                            </xqx:ifClause>
                            <xqx:thenClause>
                              <xqx:elementConstructor>
                                <xqx:tagName>a</xqx:tagName>
                                <xqx:attributeList>
                                  <xqx:attributeConstructor>
                                    <xqx:attributeName>href</xqx:attributeName>
                                    <xqx:attributeValueExpr>
                                      <xqx:stringConstantExpr>
                                        <xqx:value>Tour?start=</xqx:value>
                                      </xqx:stringConstantExpr>
                                      <xqx:varRef>
                                        <xqx:name>start</xqx:name>
                                      </xqx:varRef>
                                      <xqx:stringConstantExpr>
                                        <xqx:value>&amp;end=</xqx:value>
                                      </xqx:stringConstantExpr>
                                      <xqx:addOp>
                                        <xqx:firstOperand>
                                          <xqx:varRef>
                                            <xqx:name>endd</xqx:name>
                                          </xqx:varRef>
                                        </xqx:firstOperand>
                                        <xqx:secondOperand>
                                          <xqx:integerConstantExpr>
                                            <xqx:value>1</xqx:value>
                                          </xqx:integerConstantExpr>
                                        </xqx:secondOperand>
                                      </xqx:addOp>
                                    </xqx:attributeValueExpr>
                                  </xqx:attributeConstructor>
                                </xqx:attributeList>
                                <xqx:elementContent>
                                  <xqx:stringConstantExpr>
                                    <xqx:value>Step</xqx:value>
                                  </xqx:stringConstantExpr>
                                </xqx:elementContent>
                              </xqx:elementConstructor>
                            </xqx:thenClause>
                            <xqx:elseClause>
                              <xqx:sequenceExpr/>
                            </xqx:elseClause>
                          </xqx:ifThenElseExpr>
                        </xqx:elementContent>
                      </xqx:elementConstructor>
                    </xqx:elementContent>
                  </xqx:elementConstructor>
                </xqx:elementContent>
              </xqx:elementConstructor>
            </xqx:elementContent>
          </xqx:elementConstructor>
        </xqx:functionBody>
      </xqx:functionDecl>
    </xqx:prolog>
    <xqx:queryBody>
      <xqx:functionCallExpr>
        <xqx:functionName xqx:prefix="tour">main</xqx:functionName>
        <xqx:arguments>
        </xqx:arguments>
      </xqx:functionCallExpr>
    </xqx:queryBody>
  </xqx:mainModule>
</xqx:module>
