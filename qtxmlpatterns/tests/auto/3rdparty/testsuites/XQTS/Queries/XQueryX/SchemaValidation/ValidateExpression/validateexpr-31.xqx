<?xml version="1.0"?>
<xqx:module xmlns:xqx="http://www.w3.org/2005/XQueryX"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.w3.org/2005/XQueryX
                                http://www.w3.org/2005/XQueryX/xqueryx.xsd">
  <xqx:mainModule>
    <xqx:prolog>
      <xqx:schemaImport>
        <xqx:defaultElementNamespace/>
        <xqx:targetNamespace>http://www.w3.org/XQueryTestOrderBy</xqx:targetNamespace>
      </xqx:schemaImport>
      <xqx:functionDecl>
        <xqx:functionName xqx:prefix="local">numbers</xqx:functionName>
        <xqx:paramList>
          <xqx:param>
            <xqx:varName>positive</xqx:varName>
          </xqx:param>
        </xqx:paramList>
        <xqx:functionBody>
          <xqx:ifThenElseExpr>
            <xqx:ifClause>
              <xqx:varRef>
                <xqx:name>positive</xqx:name>
              </xqx:varRef>
            </xqx:ifClause>
            <xqx:thenClause>
              <xqx:elementConstructor>
                <xqx:tagName>PositiveNumbers</xqx:tagName>
                <xqx:elementContent>
                  <xqx:elementConstructor>
                    <xqx:tagName>orderData</xqx:tagName>
                    <xqx:elementContent>
                      <xqx:stringConstantExpr>
                        <xqx:value>1</xqx:value>
                      </xqx:stringConstantExpr>
                    </xqx:elementContent>
                  </xqx:elementConstructor>
                </xqx:elementContent>
              </xqx:elementConstructor>
            </xqx:thenClause>
            <xqx:elseClause>
              <xqx:elementConstructor>
                <xqx:tagName>NegativeNumbers</xqx:tagName>
                <xqx:elementContent>
                  <xqx:elementConstructor>
                    <xqx:tagName>orderData</xqx:tagName>
                    <xqx:elementContent>
                      <xqx:stringConstantExpr>
                        <xqx:value>-1</xqx:value>
                      </xqx:stringConstantExpr>
                    </xqx:elementContent>
                  </xqx:elementConstructor>
                </xqx:elementContent>
              </xqx:elementConstructor>
            </xqx:elseClause>
          </xqx:ifThenElseExpr>
        </xqx:functionBody>
      </xqx:functionDecl>
    </xqx:prolog>
    <xqx:queryBody>
      <xqx:flworExpr>
        <xqx:letClause>
          <xqx:letClauseItem>
            <xqx:typedVariableBinding>
              <xqx:varName>positive</xqx:varName>
              <xqx:typeDeclaration>
                <xqx:elementTest>
                  <xqx:elementName>
                    <xqx:QName>orderData</xqx:QName>
                  </xqx:elementName>
                  <xqx:typeName xqx:prefix="xs">decimal</xqx:typeName>
                </xqx:elementTest>
              </xqx:typeDeclaration>
            </xqx:typedVariableBinding>
            <xqx:letExpr>
              <xqx:pathExpr>
                <xqx:stepExpr>
                  <xqx:filterExpr>
                    <xqx:sequenceExpr>
                      <xqx:validateExpr>
                        <xqx:argExpr>
                          <xqx:functionCallExpr>
                            <xqx:functionName xqx:prefix="local">numbers</xqx:functionName>
                            <xqx:arguments>
                              <xqx:functionCallExpr>
                                <xqx:functionName>true</xqx:functionName>
                                <xqx:arguments>
                                </xqx:arguments>
                              </xqx:functionCallExpr>
                            </xqx:arguments>
                          </xqx:functionCallExpr>
                        </xqx:argExpr>
                      </xqx:validateExpr>
                    </xqx:sequenceExpr>
                  </xqx:filterExpr>
                </xqx:stepExpr>
                <xqx:stepExpr>
                  <xqx:xpathAxis>child</xqx:xpathAxis>
                  <xqx:nameTest>orderData</xqx:nameTest>
                </xqx:stepExpr>
              </xqx:pathExpr>
            </xqx:letExpr>
          </xqx:letClauseItem>
        </xqx:letClause>
        <xqx:letClause>
          <xqx:letClauseItem>
            <xqx:typedVariableBinding>
              <xqx:varName>negative</xqx:varName>
              <xqx:typeDeclaration>
                <xqx:elementTest>
                  <xqx:elementName>
                    <xqx:QName>orderData</xqx:QName>
                  </xqx:elementName>
                  <xqx:typeName xqx:prefix="xs">decimal</xqx:typeName>
                </xqx:elementTest>
              </xqx:typeDeclaration>
            </xqx:typedVariableBinding>
            <xqx:letExpr>
              <xqx:pathExpr>
                <xqx:stepExpr>
                  <xqx:filterExpr>
                    <xqx:sequenceExpr>
                      <xqx:validateExpr>
                        <xqx:argExpr>
                          <xqx:functionCallExpr>
                            <xqx:functionName xqx:prefix="local">numbers</xqx:functionName>
                            <xqx:arguments>
                              <xqx:functionCallExpr>
                                <xqx:functionName>false</xqx:functionName>
                                <xqx:arguments>
                                </xqx:arguments>
                              </xqx:functionCallExpr>
                            </xqx:arguments>
                          </xqx:functionCallExpr>
                        </xqx:argExpr>
                      </xqx:validateExpr>
                    </xqx:sequenceExpr>
                  </xqx:filterExpr>
                </xqx:stepExpr>
                <xqx:stepExpr>
                  <xqx:xpathAxis>child</xqx:xpathAxis>
                  <xqx:nameTest>orderData</xqx:nameTest>
                </xqx:stepExpr>
              </xqx:pathExpr>
            </xqx:letExpr>
          </xqx:letClauseItem>
        </xqx:letClause>
        <xqx:returnClause>
          <xqx:addOp>
            <xqx:firstOperand>
              <xqx:varRef>
                <xqx:name>positive</xqx:name>
              </xqx:varRef>
            </xqx:firstOperand>
            <xqx:secondOperand>
              <xqx:varRef>
                <xqx:name>negative</xqx:name>
              </xqx:varRef>
            </xqx:secondOperand>
          </xqx:addOp>
        </xqx:returnClause>
      </xqx:flworExpr>
    </xqx:queryBody>
  </xqx:mainModule>
</xqx:module>
