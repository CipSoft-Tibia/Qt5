// Copyright (C) 2016 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \page activeqt-dumpcpp.html
    \title The dumpcpp Tool (ActiveQt)

    \ingroup activeqt-tools

    \keyword dumpcpp

    The \c dumpcpp tool generates a C++ namespace for a type library.

    To generate a C++ namespace for a type library, call \c dumpcpp with the
    following command-line parameters:

    \table
    \header
    \li Option
    \li Result
    \row
    \li input
    \li Generate documentation for \e input. \e input can specify a type library file or a type
    library ID, or a CLSID or ProgID for an object
    \row
    \li -o file
    \li Writes the class declaration to \e {file}.h and meta object information to \e {file}.cpp
    \row
    \li -n namespace
    \li Generate a C++ namespace \e namespace
    \row
    \li -nometaobject
    \li Do not generate a .cpp file with the meta object information.
    The meta object is then generated in runtime.
    \row
    \li -getfile libid
    \li Print the filename for the typelibrary \e libid to stdout
    \row
    \li -compat
    \li Generate namespace with dynamicCall-compatible API
    \row
    \li -controlname
    \li Use the control class name instead of the UUID in setControl()
    \row
    \li -v
    \li Print version information
    \row
    \li -h
    \li Print help
    \endtable

    Running the tool manually (and perhaps even checking the generated files into your version
    control system) is usually sufficient, as type libraries change very rarely.
    If your type library changes frequently, then you can integrate \c dumpcpp into the \c qmake
    build system. In your .pro file, list the type libraries you want to use in the TYPELIBS
    variable:

    \snippet activeqt/qutlook/qutlook.pro 0

    The generated namespace will declare all enumerations, as well as one QAxObject subclass
    for each \c coclass and \c interface declared in the type library. coclasses marked with
    the \c control attribute will be wrapped by a QAxWidget subclass.

    Those classes that wrap creatable coclasses  (i.e. coclasses that are not marked
    as \c noncreatable) have a default constructor; this is typically a single class
    of type \c Application.

    \snippet doc_src_activeqt-dumpcpp.cpp 0

    All other classes can only be created by passing an IDispatch interface pointer
    to the constructor; those classes should however not be created explicitly.
    Instead, use the appropriate API of already created objects.

    \snippet doc_src_activeqt-dumpcpp.cpp 1

    All coclass wrappers also have one constructors taking an interface wrapper class
    for each interface implemented.

    \snippet doc_src_activeqt-dumpcpp.cpp 2

    You have to create coclasses to be able to connect to signals of the subobject.
    Note that the constructor deletes the interface object, so the following will
    cause a segmentation fault:

    \snippet doc_src_activeqt-dumpcpp.cpp 3

    If the return type is of a coclass or interface type declared in another
    type library you have to include the namespace header for that other type
    library before including the header for the namespace you want to use
    (both header have to be generated with this tool).

    By default, methods and property returning subobjects will use the type as in
    the type library. The caller of the function is responsible for deleting or
    reparenting the object returned. If the \c -compat switch is set, properties
    and method returning a COM object have the return type \c IDispatch*, and
    the namespace will not declare wrapper classes for interfaces.

    In this case, create the correct wrapper class explicitly:

    \snippet doc_src_activeqt-dumpcpp.cpp 4

    You can of course use the IDispatch* returned directly, in which case you have to
    call \c Release() when finished with the interface.

    All classes in the namespace are tagged with a macro that allows you to export
    or import them from a DLL. To do that, declare the macro to expand to
    \c __declspec(dllimport/export) before including the header file.

    To build the tool you must first build the QAxContainer library.
    Then run your make tool in \c tools/dumpcpp.
*/
