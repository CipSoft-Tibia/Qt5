/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \module QAxServer
    \title QAxServer C++ Classes
    \ingroup modules
    \qtvariable axserver

    \brief The QAxServer module is a Windows-only static library that
    you can use to turn a standard Qt binary into a COM server.

    QAxServer is part of the \l{Active Qt} module. The
    \l{Building ActiveX servers in Qt} page contains information about
    turning a Qt binary into a COM server
*/

/*!
    \page activeqt-server.html
    \title Building ActiveX servers in Qt
    \ingroup qt-activex

    \brief A Windows-only static library for turning a Qt binary into a COM server.

    The QAxServer module is part of the \l ActiveQt framework. It
    consists of three classes:

    \list
    \li QAxFactory defines a factory for the creation of COM objects.
    \li QAxBindable provides an interface between the Qt widget and the
       COM object.
    \li QAxAggregated can be subclassed to implement additional COM interfaces.
    \endlist

    Some \l{ActiveQt Examples}{example implementations} of ActiveX
    controls and COM objects are provided.

    \sa {ActiveQt Framework}

    Topics:

    \tableofcontents

    \section1 Using the Library

    To turn a standard Qt application into a COM server using the
    QAxServer library you must add \c axserver to the QT variable
    in your \c .pro file.

    An out-of-process executable server is generated from a \c .pro
    file like this:

    \snippet doc_src_qaxserver.pro 0

    To build an in-process server, use a \c .pro file like this:
    \snippet doc_src_qaxserver.pro 1

    The files \c qaxserver.rc and \c qaxserver.def are part of the
    framework and can be used from their usual location (specify a
    path in the \c .pro file), or copied into the project directory.
    You can modify these files as long as it includes any file as the
    type library entry, ie. you can add version information or specify
    a different toolbox icon.

    Using the \c axserver module will cause the \c qmake tool to add the
    required build steps to the build system:

    \list
    \li Link the binary against \c qaxserver.lib instead of \c qtmain.lib
    \li Call the \l idc tool to generate an IDL file for the COM server
    \li Compile the IDL into a type library using the MIDL tool (part of the
    compiler installation)
    \li Attach the resulting type library as a binary resource to the server
    binary (again using the \l idc tool)
    \li Register the server
    \endlist

    To skip the post-processing step, also set the \c qaxserver_no_postlink
    configuration.

    Additionally you can specify a version number using the \c VERSION
    variable, e.g.

    \snippet doc_src_qaxserver.pro 2

    The version number specified will be used as the version of the type
    library and of the server when registering.

    \section2 Out-of-Process vs. In-Process

    Whether your COM server should run as a stand-alone executable
    or as a shared library in the client process depends mainly on the
    type of COM objects you want to provide in the server.

    An executable server has the advantage of being able to run as a
    stand-alone application, but adds considerable overhead to the
    communication between the COM client and the COM object. If the
    control has a programming error only the server process running
    the control will crash, and the client application will probably
    continue to run. Not all COM clients support executable servers.

    An in-process server is usually smaller and has faster startup
    time. The communication between client and server is done directly
    through virtual function calls and does not introduce the overhead
    required for remote procedure calls. However, if the server crashes the
    client application is likely to crash as well, and not every
    functionality is available for in-process servers (i.e. register in
    the COM's running-object-table).

    Both server types can use Qt either as a shared library, or statically
    linked into the server binary.

    \section2 Typical Errors During the Post-Build Steps

    For the ActiveQt specific post-processing steps to work the
    server has to meet some requirements:

    \list
    \li All controls exposed can be created with nothing but a QApplication
    instance being present
    \li The initial linking of the server includes a temporary type
    library resource
    \li All dependencies required to run the server are in the system path
    (or in the path used by the calling environment; note that Visual
    Studio has its own set of environment variables listed in the
    Tools|Options|Directories dialog).
    \endlist

    If those requirements are not met one ore more of the following
    errors are likely to occur:

    \section3 The Server Executable Crashes

    To generate the IDL the widgets exposed as ActiveX controls need to
    be instantiated (the constructor is called). At this point, nothing
    else but a QApplication object exists. Your widget constructor must
    not rely on any other objects to be created, e.g. it should check for
    null-pointers.

    To debug your server run it with -dumpidl outputfile and check where
    it crashes.

    Note that no functions of the control are called.

    \section3 The Server Executable Is Not a Valid Win32 Application

    Attaching the type library corrupted the server binary. This is a
    bug in Windows and happens only with release builds.

    The first linking step has to link a dummy type library into the
    executable that can later be replaced by idc. Add a resource file
    with a type library to your project as demonstrated in the examples.

    \section3 "Unable to locate DLL"

    The build system needs to run the server executable to generate
    the interface definition, and to register the server. If a dynamic
    link library the server links against is not in the path this
    might fail (e.g. Visual Studio calls the server using the
    environment settings specified in the "Directories" option).
    Make sure that all DLLs and plugins required by your server are located
    in a directory that is listed in the path as printed in the error
    message box (see also \l{The Windows Deployment Tool}).

    \section3 "Cannot open file ..."

    The ActiveX server could not shut down properly when the last
    client stopped using it. It usually takes about two seconds for
    the application to terminate, but you might have to use the task
    manager to kill the process (e.g. when a client doesn't release
    the controls properly).

    \section3 The Control Cannot be Instantiated

    In this case, it may help to register the server as Administrator.

    \section1 Implementing Controls

    To implement a COM object with Qt, create a subclass of QObject
    or any existing QObject subclass. If the class is a subclass of QWidget,
    the COM object will be an ActiveX control.

    \snippet doc_src_qaxserver.cpp 3

    The Q_OBJECT macro is required to provide the meta object information
    about the widget to the ActiveQt framework.

    \snippet doc_src_qaxserver.cpp 4

    Use the Q_CLASSINFO() macro to specify the COM identifiers for the COM
    object. \c ClassID and \c InterfaceID are required, while \c EventsID is
    only necessary when your object has signals. To generate these identifiers,
    use system tools like \c uuidgen or \c guidgen.

    You can specify additional attributes for each of your classes; see
    \l{Class Information and Tuning} for details.

    \snippet doc_src_qaxserver.cpp 5

    Use the Q_PROPERTY() macro to declare properties for the ActiveX control.

    Declare a standard constructor taking a parent object, and functions,
    signals and slots like for any QObject subclass.
    \footnote
    If a standard constructor is not present the compiler will issue
    an error "no overloaded function takes 2 parameters" when using
    the default factory through the QAXFACTORY_DEFAULT() macro. If you
    cannot provide a standard constructor you must implement a
    QAxFactory custom factory and call the constructor you have in
    your implementation of \l {QAxFactory::createObject}.
    \endfootnote

    \snippet doc_src_qaxserver.cpp 6

    The ActiveQt framework will expose properties and public slots as ActiveX
    properties and methods, and signals as ActiveX events, and convert between
    the Qt data types and the equivalent COM data types.

    \section2 Data Types

    The Qt data types that are supported for properties are:

    \table
    \header
    \li Qt data type
    \li COM property
    \row
    \li bool
    \li VARIANT_BOOL
    \row
    \li QString
    \li BSTR
    \row
    \li int
    \li int
    \row
    \li uint
    \li unsigned int
    \row
    \li double
    \li double
    \row
    \li \l qlonglong
    \li CY
    \row
    \li \l qulonglong
    \li CY
    \row
    \li QColor
    \li OLE_COLOR
    \row
    \li QDate
    \li DATE
    \row
    \li QDateTime
    \li DATE
    \row
    \li QTime
    \li DATE
    \row
    \li QFont
    \li IFontDisp*
    \row
    \li QPixmap
    \li IPictureDisp*
    \footnote
    COM cannot marshal IPictureDisp across process boundaries,
    so QPixmap properties cannot be called for out-of-process servers. You
    can however marshal the image data via e.g. temporary files. See the
    Microsoft
    \link http://support.microsoft.com/default.aspx?scid=kb;[LN];Q150034 KB article
    Q150034 \endlink for more information.
    \endfootnote
    \row
    \li QVariant
    \li VARIANT
    \row
    \li QVariantList (same as QList\<QVariant\>)
    \li SAFEARRAY(VARIANT)
    \row
    \li QStringList
    \li SAFEARRAY(BSTR)
    \row
    \li QByteArray
    \li SAFEARRAY(BYTE)
    \row
    \li QRect
    \li User defined type
    \row
    \li QSize
    \li User defined type
    \row
    \li QPoint
    \li User defined type
    \endtable

    The Qt data types that are supported for parameters in signals and
    slots are:
    \table
    \header
    \li Qt data type
    \li COM parameter
    \row
    \li bool
    \li [in] VARIANT_BOOL
    \row
    \li bool&
    \li [in, out] VARIANT_BOOL*
    \row
    \li QString, const QString&
    \li [in] BSTR
    \row
    \li QString&
    \li [in, out] BSTR*
    \row
    \li QString&
    \li [in, out] BSTR*
    \row
    \li int
    \li [in] int
    \row
    \li int&
    \li [in,out] int
    \row
    \li uint
    \li [in] unsigned int
    \row
    \li uint&
    \li [in, out] unsigned int*
    \row
    \li double
    \li [in] double
    \row
    \li double&
    \li [in, out] double*
    \row
    \li QColor, const QColor&
    \li [in] OLE_COLOR
    \row
    \li QColor&
    \li [in, out] OLE_COLOR*
    \row
    \li QDate, const QDate&
    \li [in] DATE
    \row
    \li QDate&
    \li [in, out] DATE*
    \row
    \li QDateTime, const QDateTime&
    \li [in] DATE
    \row
    \li QDateTime&
    \li [in, out] DATE*
    \row
    \li QFont, const QFont&
    \li [in] IFontDisp*
    \row
    \li QFont&
    \li [in, out] IFontDisp**
    \row
    \li QPixmap, const QPixmap&
    \li [in] IPictureDisp*
    \row
    \li QPixmap&
    \li [in, out] IPictureDisp**
    \row
    \li QList\<QVariant\>, const QList\<QVariant\>&
    \li [in] SAFEARRAY(VARIANT)
    \row
    \li QList\<QVariant\>&
    \li [in, out] SAFEARRAY(VARIANT)*
    \row
    \li QStringList, const QStringList&
    \li [in] SAFEARRAY(BSTR)
    \row
    \li QStringList&
    \li [in, out] SAFEARRAY(BSTR)*
    \row
    \li QByteArray, const QByteArray&
    \li [in] SAFEARRAY(BYTE)
    \row
    \li QByteArray&
    \li [in, out] SAFEARRAY(BYTE)*
    \row
    \li QObject*
    \li [in] IDispatch*
    \row
    \li QRect&
    \footnote
    OLE needs to marshal user defined types by reference (ByRef), and cannot
    marshal them by value (ByVal). This is why const-references and object
    parameters are not supported for QRect, QSize and QPoint.
    \endfootnote
    \li [in, out] struct QRect (user defined)
    \row
    \li QSize&
    \li [in, out] struct QSize (user defined)
    \row
    \li QPoint&
    \li [in, out] struct QPoint (user defined)
    \endtable

    Also supported are exported enums and flags (see Q_ENUMS() and
    Q_FLAGS()). The in-parameter types are also supported as
    return values.

    Properties and signals/slots that have parameters using any other
    data types are ignored by the ActiveQt framework.

    \section2 Sub-Objects

    COM objects can have multiple sub-objects that can represent a sub element
    of the COM object. A COM object representing a multi-document spread sheet
    application can for example provide one sub-object for each spread sheet.

    Any QObject subclass can be used as the type for a sub object in ActiveX, as
    long as it is known to the QAxFactory. Then the type can be used in properties,
    or as the return type or parameter of a slot.

    \section2 Property Notification

    To make the properties bindable for the ActiveX client, use multiple
    inheritance from the QAxBindable class:

    \snippet doc_src_qaxserver.cpp 7

    When implementing the property write functions, use the
    QAxBindable class's requestPropertyChange() and propertyChanged()
    functions to allow ActiveX clients to bind to the control
    properties.
    \footnote
    This is not required, but gives the client more control over
    the ActiveX control.
    \endfootnote

    \section1 Serving Controls

    To make a COM server available to the COM system it must be registered
    in the system registry using five unique identifiers.
    These identifiers are provided by tools like \c guidgen or \c uuidgen.
    The registration information allows COM to localize the binary providing
    a requested ActiveX control, marshall remote procedure calls to the
    control and read type information about the methods and properties exposed
    by the control.

    To create the COM object when the client asks for it the server must export
    an implementation of a QAxFactory. The easist way to do this is to use a set
    of macros:

    \snippet doc_src_qaxserver.cpp 8

    This will export \c MyWidget and \c MyWidget2 as COM objects that can be
    created by COM clients, and will register \c MySubType as a type that can
    be used in properties and parameters of \c MyWidget and \c MyWidget2.

    The \link QAxFactory QAxFactory class documentation \endlink explains
    how to use this macro, and how to implement and use custom factories.

    For out-of-process executable servers you can implement a main()
    function to instantiate a QApplication object and enter the event
    loop just like any normal Qt application. By default the
    application will start as a standard Qt application, but if you
    pass \c -activex on the command line it will start as an ActiveX
    server. Use QAxFactory::isServer() to create and run a standard
    application interface, or to prevent a stand-alone execution:

    \snippet doc_src_qaxserver.cpp 9

    This is however not necessary as ActiveQt provides a default implementation
    of a main function. The default implementation calls QAxFactory::startServer(),
    creates a QApplication instance and calls exec().

    To build the ActiveX server executable run \c qmake
    to generate the makefile, and use your compiler's
    make tool as for any other Qt application. The make process will
    also register the controls in the system registry by calling the
    resulting executable with the \c -regserver command line option.

    If the ActiveX server is an executable, the following command line
    options are supported:
    \table
    \header \li Option \li Result
    \row \li \c -regserver \li Registers the server in the system registry
    \row \li \c -unregserver \li Unregisters the server from the system registry
    \row \li \c -activex \li Starts the application as an ActiveX server
    \row \li \c{-dumpidl <file> -version x.y} \li Writes the server's IDL to the
    specified file. The type library will have version x.y
    \endtable

    In-process servers can be registered using the \c regsvr32 tool available
    on all Windows systems.

    \section2 Typical Compile-Time Problems

    The compiler/linker errors listed are based on those issued by the
    Microsoft Visual C++ 6.0 compiler.

    \section3 "No overloaded function takes 2 parameters"

    When the error occurs in code that uses the QAXFACTORY_DEFAULT()
    macro, the widget class had no constructor that can be used by the
    default factory. Either add a standard widget constructor or
    implement a custom factory that doesn't require one.

    When the error occurs in code that uses the QAXFACTORY_EXPORT()
    macro, the QAxFactory subclass had no appropriate constructor.
    Provide a public class constructor like

    \snippet doc_src_qaxserver.cpp 10

    for your factory class.

    \section3 "Syntax error: bad suffix on number"

    The unique identifiers have not been passed as strings into the
    QAXFACTORY_EXPORT() or QAXFACTORY_DEFAULT() macro.

    \section3 "Unresolved external symbol _ucm_instantiate"

    The server does not export an implementation of a QAxFactory. Use
    the QAXFACTORY_EXPORT() macro in one of the project's
    implementation files to instantiate and export a factory, or use
    the QAXFACTORY_DEFAULT() macro to use the default factory.

    \section3 "_ucm_initialize already defined in ..."

    The server exports more than one implementation of a QAxFactory,
    or exports the same implementation twice. If you use the default
    factory, the QAXFACTORY_DEFAULT() macro must only be used once in
    the project. Use a custom QAxFactory implementation and the
    QAXFACTORY_EXPORT() macro if the server provides multiple ActiveX
    controls.

    \section2 Distributing QAxServer Binaries

    ActiveX servers written with Qt can use Qt either as a shared
    library, or have Qt linked statically into the binary. Both ways
    will produce rather large packages (either the server binary
    itself becomes large, or you have to ship the Qt DLL).

    \section3 Installing Stand-Alone Servers

    When your ActiveX server can also run as a stand-alone application,
    run the server executable with the \c -regserver command line
    parameter after installing the executable on the target system.
    After that the controls provided by the server will be available to
    ActiveX clients.

    \section3 Installing In-Process Servers

    When your ActiveX server is part of an installation package, use the
    \c regsvr32 tool provided by Microsoft to register the controls on
    the target system. If this tool is not present, load the DLL into
    your installer process, resolve the \c DllRegisterServer symbol and
    call the function:

    \snippet doc_src_qaxserver.cpp 11

    \section3 Distributing Servers over the Internet

    If you want to use controls in your server in web-pages you need to
    make the server available to the browser used to view your page, and
    you need to specify the location of the server package in your page.

    To specify the location of a server, use the CODEBASE attribute in
    the OBJECT tag of your web-site. The value can point to the server
    file itself, to an INF file listing other files the server requires
    (e.g. the Qt DLL), or a compressed CAB archive.

    INF and CAB files are documented in almost every book available about
    ActiveX and COM programming as well as in the MSDN library and various
    other Online resources. The examples include INF files that can be used
    to build CAB archives:

    \snippet activeqt/simple/simple.inf 0

    The CABARC tool from Microsoft can easily generate CAB archives:

    \snippet doc_src_qaxserver.qdoc 12

    The INF files assume a static build of Qt, so no dependencies to other DLLs
    are listed in the INF files. To distribute an ActiveX server depending on
    DLLs you must add the dependencies, and provide the library files
    with the archive.

    \section1 Using the Controls

    To use the ActiveX controls, e.g. to embed them in a web page, use
    the \c <object> HTML tag.

    \snippet doc_src_qaxserver.qdoc 13

    To initialize the control's properties, use

    \snippet doc_src_qaxserver.qdoc 14

    If the web browser supports scripting use JavaScript, VBScript
    and forms to script the control. The
    \l{ActiveQt Examples} include demonstration HTML pages for the example
    controls.

    \section2 Supported and Unsupported ActiveX Clients

    The following is largly based on our own experiements with ActiveX
    controls and client applications, and is by no means complete.

    \section3 Supported Clients

    These standard applications work with ActiveX controls developed with
    ActiveQt. Note that some clients support only in-process controls.

    \list
    \li Internet Explorer
    \li Microsoft ActiveX Control Test Container
    \li Microsoft Visual Studio 6.0
    \li Microsoft Visual Studio.NET/2003
    \li Microsoft Visual Basic 6.0
    \li MFC- and ATL-based containers
    \li Sybase PowerBuilder
    \li ActiveQt based containers
    \endlist

    Microsoft Office applications are supported, but you need to register
    the controls as "Insertable" objects. Reimplement QAxFactory::registerClass
    to add this attribute to the COM class, or set the "Insertable" class info
    for your class to "yes" using the Q_CLASSINFO macro.

    \section3 Unsupported Clients

    We have not managed to make ActiveQt based COM objects work with the
    following client applications.

    \list
    \li Borland C++ Builder (Versions 5 and 6)
    \li Borland Delphi
    \endlist

    \section2 Typical Runtime Errors

    \section3 The Server Does Not Respond

    If the system is unable to start the server (check with the task
    manager whether the server runs a process), make sure that no DLL
    the server depends on is missing from the system path (e.g. the Qt
    DLL!). Use a dependency walker to view all dependencies of the server
    binary.

    If the server runs (e.g. the task manager lists a process), see
    the following section for information on debugging your server.

    \section3 The Object Cannot Be Created

    If the server could be built and registered correctly during the build
    process, but the object cannot be initiliazed e.g. by the OLE/COM Object
    Viewer application, make sure that no DLL the server depends on is
    missing from the system path (e.g. the Qt DLL). Use a dependency walker
    to view all dependencies of the server binary.

    If the server runs, see the following section for information on
    debugging your server.

    \section2 Debugging Runtime Errors

    To debug an in-process server in Visual Studio, set the server project
    as the active project, and specify a client "executable for debug
    session" in the project settings (e.g. use the ActiveX Test Container).
    You can set breakpoints in your code, and also step into ActiveQt and
    Qt code if you installed the debug version.

    To debug an executable server, run the application in a debugger
    and start with the command line parameter \c -activex. Then start
    your client and create an instance of your ActiveX control. COM
    will use the existing process for the next client trying to create
    an ActiveX control.

    \section1 Class Information and Tuning

    To provide attributes for each COM class, use the Q_CLASSINFO macro, which is part of
    Qt's meta object system.

    \table
    \header
    \li Key
    \li Meaning of value
    \row
    \li Version
    \li The version of the class (1.0 is default)
    \row
    \li Description
    \li A string describing the class.
    \row
    \li ClassID
    \li The class ID.
       You must reimplement QAxFactory::classID if not specified.
    \row
    \li InterfaceID
    \li The interface ID.
       You must reimplement QAxFactory::interfaceID if not specified.
    \row
    \li EventsID
    \li The event interface ID.
       No signals are exposed as COM events if not specified.
    \row
    \li DefaultProperty
    \li The property specified represents the default property of this class.
       Ie. the default property of a push button would be "text".
    \row
    \li DefaultSignal
    \li The signal specified respresents the default signal of this class.
       Ie. the default signal of a push button would be "clicked".
    \row
    \li LicenseKey
    \li Object creation requires the specified license key. The key can be
       empty to require a licensed machine. By default classes are not
       licensed. Also see the following section.
    \row
    \li StockEvents
    \li Objects expose stock events if value is "yes".
       See \l QAxFactory::hasStockEvents()
    \row
    \li ToSuperClass
    \li Objects expose functionality of all super-classes up to and
       including the class name in value.
       See \l QAxFactory::exposeToSuperClass()
    \row
    \li Insertable
    \li If the value is "yes" the class is registered to be "Insertable"
       and will be listed in OLE 2 containers (ie. Microsoft Office). This
       attribute is not be set by default.
    \row
    \li Aggregatable
    \li If the value is "no" the class does not support aggregation. By
       default aggregation is supported.
    \row
    \li Creatable
    \li If the value is "no" the class cannot be created by the client,
       and is only available through the API of another class (ie. the
       class is a sub-type).
    \row
    \li RegisterObject
    \li If the value is "yes" objects of this class are registered with
       OLE and accessible from the running object table (ie. clients
       can connect to an already running instance of this class). This
       attribute is only supported in out-of-process servers.
    \row
    \li MIME
    \li The object can handle data and files of the format specified in the
       value. The value has the format mime:extension:description. Multiple
       formats are separated by a semicolon.
    \row
    \li CoClassAlias
    \li The classname used in the generated IDL and in the registry. This is
       esp. useful for C++ classes that live in a namespace - by default,
       ActiveQt just removes the "::" to make the IDL compile.
    \row
    \li Implemented Categories
    \li List of comma-separated Category ID (CATID) UUIDs. Generic mechanism
       for specifying additional container capabilities, in addition to
       "control", "insertable" etc. Typical CATIDs include
       \c CATID_InternetAware ("{0DE86A58-2BAA-11CF-A229-00AA003D7352}"),
       \c CATID_SafeForScripting ("{7DD95801-9882-11CF-9FA9-00AA006C42C4}") as
       well as user-defined CATID values.
    \endtable

    Note that both keys and values are case sensitive.

    The following declares version 2.0 of a class that exposes only its
    own API, and is available in the "Insert Objects" dialog of Microsoft
    Office applications.

    \snippet doc_src_qaxserver.cpp 15

    \section2 Developing Licensed Components

    If you develop components you might want to control who is able to instantiate
    those components. Since the server binary can be shipped to and registered on
    any client machine it is possible for anybody to use those components in his
    own software.

    Licensing components can be done using a variety of techniques, e.g. the code
    creating the control can provide a license key, or the machine on which the
    control is supposed to run needs to be licensed.

    To mark a Qt class as licensed specify a "LicenseKey" using the
    Q_CLASSINFO() macro.

    \snippet doc_src_qaxserver.cpp 16

    The key is required to be able to create an instance of \c MyLicensedControl
    on a machine that is not licensed itself. The licensed developer can now
    redistributes the server binary with his application, which creates the control
    using the value of "LicenseKey", while users of the application cannot create
    the control without the license key.

    If a single license key for the control is not sufficient (ie. you want
    differnet developers to receive different license keys) you can specify an
    empty key to indicate that the control requires a license, and reimplement
    \l QAxFactory::validateLicenseKey() to verify that a license exists on the
    system (ie. through a license file).

    \section2 More Interfaces

    ActiveX controls provided by ActiveQt servers support a minimal set of COM
    interfaces to implement the OLE specifications. When the ActiveX class inherits
    from the QAxBindable class it can also implement additional COM interfaces.

    Create a new subclass of QAxAggregated and use multiple inheritance
    to subclass additional COM interface classes.

    \snippet doc_src_qaxserver.cpp 17

    Reimplement the QAxAggregated::queryInterface() function to
    support the additional COM interfaces.

    \snippet doc_src_qaxserver.cpp 18

    Since \c ISomeCOMInterface is a subclass of \c IUnknown you will
    have to implement the \c QueryInterface(), \c AddRef(), and \c
    Release() functions.  Use the QAXAGG_IUNKNOWN macro in your
    class definition to do that. If you implement the \c IUnknown
    functions manually, delegate the calls to the interface pointer
    returned by the QAxAggregated::controllingUnknown() function,
    e.g.

    \snippet doc_src_qaxserver.cpp 19

    Do not support the \c IUnknown interface itself in your
    \l{QAxAggregated::queryInterface()}{queryInterface()}
    implementation.

    Implement the methods of the COM interfaces, and use QAxAggregated::object()
    if you need to make calls to the QObject subclass implementing the control.

    In your QAxBindable subclass, implement
    QAxBindable::createAggregate() to return a new object of the
    QAxAggregated subclass.

    \snippet doc_src_qaxserver.cpp 20
*/
