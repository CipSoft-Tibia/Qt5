/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \module QtPositioning
    \title Qt Positioning C++ Classes
    \ingroup modules
    \qtvariable positioning

    \brief The Positioning module provides positioning information via QML and C++ interfaces.

    To load the Qt Positioning module, add the following statement to your .qml files

    \snippet doc_src_qtpositioning.qml import

    For C++ projects include the header appropriate for the current use case,
    for example applications using routes may use

    \code
    #include <QGeoCoordinate>
    \endcode

    The .pro file should have the \e positioning keyword added

    \badcode
    QT += positioning
    \endcode

    See more in the \l{Qt Positioning}{Qt Positioning Overview}.

*/



/*!
\page qtpositioning-index.html
\title Qt Positioning
\brief The Qt Positioning API provides positioning information via QML and C++ interfaces.
\ingroup technology-apis

The Qt Positioning API provides positioning information via QML and C++ interfaces.

Currently the API is supported on \l {Qt for Android}{Android}, \l {Qt for iOS}{iOS},
\l {Qt for macOS}{\macos},
\l {Qt for Linux/X11}{Linux} (using
\l {http://www.freedesktop.org/wiki/Software/GeoClue}{GeoClue version 0.12.99}),
\l {Qt for Windows}{Windows} (with GPS receivers exposed as a serial port providing NMEA sentences),
and \l {Qt for WinRT}{WinRT} (using Windows.Devices.Geolocation). Note that the \l {Qt for WinRT}{WinRT}
implementation can also be used in Win32 Desktop uses cases if the underlying platform is Windows 10
or later.

\section1 Overview

The Qt Positioning API gives developers the ability to determine a position by
using a variety of possible sources, including satellite, or wifi, or text file,
and so on. That information can then be used to for example determine a position
on a map. In addition satellite information can be retrieved and area based monitoring
can be performed.

\section1 Getting Started

To load the Qt Positioning module, add the following statement to your .qml files

\snippet doc_src_qtpositioning.qml import

For C++ projects include the header appropriate for the current use case,
for example applications using routes may use

\code
#include <QGeoCoordinate>
\endcode

The .pro file should have the \e positioning keyword added

\badcode
QT += positioning
\endcode

\section1 Licenses

Qt Positioning is available under commercial licenses from \l{The Qt Company}.
In addition, it is available under free software licenses. Since Qt 5.4,
these free software licenses are
\l{GNU Lesser General Public License, version 3}, or
the \l{GNU General Public License, version 2}.
See \l{Qt Licensing} for further details.

\section1 Related Information
\section2 Overview

Positioning includes all the functionality necessary to find and work with geographic
coordinates. It can use a variety of external sources of information, including GPS. This
provides us with a coordinate and altitude for the device with additional features
such as speed and direction. This provides the fundamental location information used in the API.

\section2 References
\table
\row
    \li Positioning introduction:
    \li \l{Positioning (QML)}{for QML}
    \li \l{Positioning (C++)}{for C++}
\row
    \li API references:
    \li \l {Qt Positioning QML Types}{for QML}
    \li \l {Qt Positioning C++ Classes}{for C++}
\row
    \li Position plugins:
    \li \l {Qt Positioning service plugins}
\endtable

\section2 Examples

\list
    \li \l {GeoFlickr (QML)}
    \li \l {Log File Position Source (C++)}
    \li \l {SatelliteInfo (C++/QML)}
    \li \l {Weather Info (C++/QML)}
\endlist
*/
