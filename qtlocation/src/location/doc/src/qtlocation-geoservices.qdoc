/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page qtlocation-geoservices.html
\title Qt Location GeoServices
\brief Implementing Qt Location GeoService plugins

The Qt Location provides the majority of its functionality through GeoService plugins. This
document outlines how to develop a new GeoService plugin.

\section1 Plugin Description

Each plugin is described by a json file. The json describes the plugins capabilities and
version. Below is an example of a json file used by the OpenStreenMap plugin:


\quotefile ../../../plugins/geoservices/osm/osm_plugin.json

The entries have the following meaning:

\table
    \header
        \li Key
        \li Description
    \row
        \li Keys
        \li The unique name/key of the plugin. Each GeoService plugin must have a unique name.
    \row
        \li Provider
        \li The provider name of the services. Multiple plugins may have the same name.
            In such cases the Version string will be used to further distinguish the plugins.
    \row
        \li Experimental
        \li Marks the service plugin as experimental. API developers may choose to ignore
            such plugins when instanciating \l QGeoServiceProvider::QGeoServiceProvider().
    \row
        \li Version
        \li The plugin version. If multiple plugins have the same provider name, the plugin
            with the higest version will be used.
    \row
        \li Features
        \li List of features provided by the plugin/service. Each feature is a string
        representation of the corresponding features in \l QGeoServiceProvider. For more
        details see \l QGeoServiceProvider::routingFeatures(),
        \l QGeoServiceProvider::geocodingFeatures() and \l QGeoServiceProvider::placesFeatures().

\endtable

\section1 Implementing Plugins

A plugin implementer needs to subclass QGeoServiceProviderFactory and as
many of the ManagerEngine classes as they want to provide implementations for.

Subclassing QGeoServiceProviderFactory will only involves overriding of one of the following
methods:

\list
    \li \l QGeoServiceProviderFactory::createGeocodingManagerEngine()
    \li \l QGeoServiceProviderFactory::createRoutingManagerEngine()
    \li \l QGeoServiceProviderFactory::createPlaceManagerEngine()
\endlist

If a plugin does not provide an engine the relevant function should return 0.

\annotatedlist QtLocation-impl

*/
