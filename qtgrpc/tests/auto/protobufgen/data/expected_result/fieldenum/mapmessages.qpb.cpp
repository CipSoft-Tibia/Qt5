/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#include "mapmessages.qpb.h"
#include <QProtobufSerializer>

namespace qtprotobufnamespace::tests {
SimpleSInt32StringMapMessage::~SimpleSInt32StringMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSInt32StringMapMessage_uint_data;
    const char qt_protobuf_SimpleSInt32StringMapMessage_char_data[10];
} qt_protobuf_SimpleSInt32StringMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        1, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSInt32StringMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSInt32StringMapMessage_metadata.data
};

void SimpleSInt32StringMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSInt32StringMapMessage>();
    qRegisterMetaType<SimpleSInt32StringMapMessageRepeated>();
    qRegisterMetaType<SimpleSInt32StringMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sint32, QString>();
}
SimpleSInt32StringMapMessage::SimpleSInt32StringMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSInt32StringMapMessage::SimpleSInt32StringMapMessage(const SimpleSInt32StringMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSInt32StringMapMessage &SimpleSInt32StringMapMessage::operator =(const SimpleSInt32StringMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSInt32StringMapMessage::SimpleSInt32StringMapMessage(SimpleSInt32StringMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSInt32StringMapMessage &SimpleSInt32StringMapMessage::operator =(SimpleSInt32StringMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSInt32StringMapMessage::operator ==(const SimpleSInt32StringMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSInt32StringMapMessage::operator !=(const SimpleSInt32StringMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSInt32StringMapMessage::setMapField(const SimpleSInt32StringMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSInt64StringMapMessage::~SimpleSInt64StringMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSInt64StringMapMessage_uint_data;
    const char qt_protobuf_SimpleSInt64StringMapMessage_char_data[10];
} qt_protobuf_SimpleSInt64StringMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        2, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSInt64StringMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSInt64StringMapMessage_metadata.data
};

void SimpleSInt64StringMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSInt64StringMapMessage>();
    qRegisterMetaType<SimpleSInt64StringMapMessageRepeated>();
    qRegisterMetaType<SimpleSInt64StringMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sint64, QString>();
}
SimpleSInt64StringMapMessage::SimpleSInt64StringMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSInt64StringMapMessage::SimpleSInt64StringMapMessage(const SimpleSInt64StringMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSInt64StringMapMessage &SimpleSInt64StringMapMessage::operator =(const SimpleSInt64StringMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSInt64StringMapMessage::SimpleSInt64StringMapMessage(SimpleSInt64StringMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSInt64StringMapMessage &SimpleSInt64StringMapMessage::operator =(SimpleSInt64StringMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSInt64StringMapMessage::operator ==(const SimpleSInt64StringMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSInt64StringMapMessage::operator !=(const SimpleSInt64StringMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSInt64StringMapMessage::setMapField(const SimpleSInt64StringMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleInt32StringMapMessage::~SimpleInt32StringMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleInt32StringMapMessage_uint_data;
    const char qt_protobuf_SimpleInt32StringMapMessage_char_data[10];
} qt_protobuf_SimpleInt32StringMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        3, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleInt32StringMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleInt32StringMapMessage_metadata.data
};

void SimpleInt32StringMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleInt32StringMapMessage>();
    qRegisterMetaType<SimpleInt32StringMapMessageRepeated>();
    qRegisterMetaType<SimpleInt32StringMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::int32, QString>();
}
SimpleInt32StringMapMessage::SimpleInt32StringMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleInt32StringMapMessage::SimpleInt32StringMapMessage(const SimpleInt32StringMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleInt32StringMapMessage &SimpleInt32StringMapMessage::operator =(const SimpleInt32StringMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleInt32StringMapMessage::SimpleInt32StringMapMessage(SimpleInt32StringMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleInt32StringMapMessage &SimpleInt32StringMapMessage::operator =(SimpleInt32StringMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleInt32StringMapMessage::operator ==(const SimpleInt32StringMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleInt32StringMapMessage::operator !=(const SimpleInt32StringMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleInt32StringMapMessage::setMapField(const SimpleInt32StringMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleInt64StringMapMessage::~SimpleInt64StringMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleInt64StringMapMessage_uint_data;
    const char qt_protobuf_SimpleInt64StringMapMessage_char_data[10];
} qt_protobuf_SimpleInt64StringMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        4, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleInt64StringMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleInt64StringMapMessage_metadata.data
};

void SimpleInt64StringMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleInt64StringMapMessage>();
    qRegisterMetaType<SimpleInt64StringMapMessageRepeated>();
    qRegisterMetaType<SimpleInt64StringMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::int64, QString>();
}
SimpleInt64StringMapMessage::SimpleInt64StringMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleInt64StringMapMessage::SimpleInt64StringMapMessage(const SimpleInt64StringMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleInt64StringMapMessage &SimpleInt64StringMapMessage::operator =(const SimpleInt64StringMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleInt64StringMapMessage::SimpleInt64StringMapMessage(SimpleInt64StringMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleInt64StringMapMessage &SimpleInt64StringMapMessage::operator =(SimpleInt64StringMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleInt64StringMapMessage::operator ==(const SimpleInt64StringMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleInt64StringMapMessage::operator !=(const SimpleInt64StringMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleInt64StringMapMessage::setMapField(const SimpleInt64StringMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleUInt32StringMapMessage::~SimpleUInt32StringMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUInt32StringMapMessage_uint_data;
    const char qt_protobuf_SimpleUInt32StringMapMessage_char_data[10];
} qt_protobuf_SimpleUInt32StringMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        5, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUInt32StringMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleUInt32StringMapMessage_metadata.data
};

void SimpleUInt32StringMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleUInt32StringMapMessage>();
    qRegisterMetaType<SimpleUInt32StringMapMessageRepeated>();
    qRegisterMetaType<SimpleUInt32StringMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::uint32, QString>();
}
SimpleUInt32StringMapMessage::SimpleUInt32StringMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleUInt32StringMapMessage::SimpleUInt32StringMapMessage(const SimpleUInt32StringMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleUInt32StringMapMessage &SimpleUInt32StringMapMessage::operator =(const SimpleUInt32StringMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleUInt32StringMapMessage::SimpleUInt32StringMapMessage(SimpleUInt32StringMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleUInt32StringMapMessage &SimpleUInt32StringMapMessage::operator =(SimpleUInt32StringMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleUInt32StringMapMessage::operator ==(const SimpleUInt32StringMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleUInt32StringMapMessage::operator !=(const SimpleUInt32StringMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleUInt32StringMapMessage::setMapField(const SimpleUInt32StringMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleUInt64StringMapMessage::~SimpleUInt64StringMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUInt64StringMapMessage_uint_data;
    const char qt_protobuf_SimpleUInt64StringMapMessage_char_data[10];
} qt_protobuf_SimpleUInt64StringMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        6, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUInt64StringMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleUInt64StringMapMessage_metadata.data
};

void SimpleUInt64StringMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleUInt64StringMapMessage>();
    qRegisterMetaType<SimpleUInt64StringMapMessageRepeated>();
    qRegisterMetaType<SimpleUInt64StringMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::uint64, QString>();
}
SimpleUInt64StringMapMessage::SimpleUInt64StringMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleUInt64StringMapMessage::SimpleUInt64StringMapMessage(const SimpleUInt64StringMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleUInt64StringMapMessage &SimpleUInt64StringMapMessage::operator =(const SimpleUInt64StringMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleUInt64StringMapMessage::SimpleUInt64StringMapMessage(SimpleUInt64StringMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleUInt64StringMapMessage &SimpleUInt64StringMapMessage::operator =(SimpleUInt64StringMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleUInt64StringMapMessage::operator ==(const SimpleUInt64StringMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleUInt64StringMapMessage::operator !=(const SimpleUInt64StringMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleUInt64StringMapMessage::setMapField(const SimpleUInt64StringMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleFixed32StringMapMessage::~SimpleFixed32StringMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixed32StringMapMessage_uint_data;
    const char qt_protobuf_SimpleFixed32StringMapMessage_char_data[10];
} qt_protobuf_SimpleFixed32StringMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        7, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixed32StringMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleFixed32StringMapMessage_metadata.data
};

void SimpleFixed32StringMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleFixed32StringMapMessage>();
    qRegisterMetaType<SimpleFixed32StringMapMessageRepeated>();
    qRegisterMetaType<SimpleFixed32StringMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::fixed32, QString>();
}
SimpleFixed32StringMapMessage::SimpleFixed32StringMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleFixed32StringMapMessage::SimpleFixed32StringMapMessage(const SimpleFixed32StringMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleFixed32StringMapMessage &SimpleFixed32StringMapMessage::operator =(const SimpleFixed32StringMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleFixed32StringMapMessage::SimpleFixed32StringMapMessage(SimpleFixed32StringMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleFixed32StringMapMessage &SimpleFixed32StringMapMessage::operator =(SimpleFixed32StringMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleFixed32StringMapMessage::operator ==(const SimpleFixed32StringMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleFixed32StringMapMessage::operator !=(const SimpleFixed32StringMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleFixed32StringMapMessage::setMapField(const SimpleFixed32StringMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleFixed64StringMapMessage::~SimpleFixed64StringMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixed64StringMapMessage_uint_data;
    const char qt_protobuf_SimpleFixed64StringMapMessage_char_data[10];
} qt_protobuf_SimpleFixed64StringMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        8, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixed64StringMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleFixed64StringMapMessage_metadata.data
};

void SimpleFixed64StringMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleFixed64StringMapMessage>();
    qRegisterMetaType<SimpleFixed64StringMapMessageRepeated>();
    qRegisterMetaType<SimpleFixed64StringMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::fixed64, QString>();
}
SimpleFixed64StringMapMessage::SimpleFixed64StringMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleFixed64StringMapMessage::SimpleFixed64StringMapMessage(const SimpleFixed64StringMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleFixed64StringMapMessage &SimpleFixed64StringMapMessage::operator =(const SimpleFixed64StringMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleFixed64StringMapMessage::SimpleFixed64StringMapMessage(SimpleFixed64StringMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleFixed64StringMapMessage &SimpleFixed64StringMapMessage::operator =(SimpleFixed64StringMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleFixed64StringMapMessage::operator ==(const SimpleFixed64StringMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleFixed64StringMapMessage::operator !=(const SimpleFixed64StringMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleFixed64StringMapMessage::setMapField(const SimpleFixed64StringMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSFixed32StringMapMessage::~SimpleSFixed32StringMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixed32StringMapMessage_uint_data;
    const char qt_protobuf_SimpleSFixed32StringMapMessage_char_data[10];
} qt_protobuf_SimpleSFixed32StringMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        9, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixed32StringMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSFixed32StringMapMessage_metadata.data
};

void SimpleSFixed32StringMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSFixed32StringMapMessage>();
    qRegisterMetaType<SimpleSFixed32StringMapMessageRepeated>();
    qRegisterMetaType<SimpleSFixed32StringMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sfixed32, QString>();
}
SimpleSFixed32StringMapMessage::SimpleSFixed32StringMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSFixed32StringMapMessage::SimpleSFixed32StringMapMessage(const SimpleSFixed32StringMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSFixed32StringMapMessage &SimpleSFixed32StringMapMessage::operator =(const SimpleSFixed32StringMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSFixed32StringMapMessage::SimpleSFixed32StringMapMessage(SimpleSFixed32StringMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSFixed32StringMapMessage &SimpleSFixed32StringMapMessage::operator =(SimpleSFixed32StringMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSFixed32StringMapMessage::operator ==(const SimpleSFixed32StringMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSFixed32StringMapMessage::operator !=(const SimpleSFixed32StringMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSFixed32StringMapMessage::setMapField(const SimpleSFixed32StringMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSFixed64StringMapMessage::~SimpleSFixed64StringMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixed64StringMapMessage_uint_data;
    const char qt_protobuf_SimpleSFixed64StringMapMessage_char_data[10];
} qt_protobuf_SimpleSFixed64StringMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        10, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixed64StringMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSFixed64StringMapMessage_metadata.data
};

void SimpleSFixed64StringMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSFixed64StringMapMessage>();
    qRegisterMetaType<SimpleSFixed64StringMapMessageRepeated>();
    qRegisterMetaType<SimpleSFixed64StringMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sfixed64, QString>();
}
SimpleSFixed64StringMapMessage::SimpleSFixed64StringMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSFixed64StringMapMessage::SimpleSFixed64StringMapMessage(const SimpleSFixed64StringMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSFixed64StringMapMessage &SimpleSFixed64StringMapMessage::operator =(const SimpleSFixed64StringMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSFixed64StringMapMessage::SimpleSFixed64StringMapMessage(SimpleSFixed64StringMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSFixed64StringMapMessage &SimpleSFixed64StringMapMessage::operator =(SimpleSFixed64StringMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSFixed64StringMapMessage::operator ==(const SimpleSFixed64StringMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSFixed64StringMapMessage::operator !=(const SimpleSFixed64StringMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSFixed64StringMapMessage::setMapField(const SimpleSFixed64StringMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleStringStringMapMessage::~SimpleStringStringMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleStringStringMapMessage_uint_data;
    const char qt_protobuf_SimpleStringStringMapMessage_char_data[10];
} qt_protobuf_SimpleStringStringMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        13, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleStringStringMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleStringStringMapMessage_metadata.data
};

void SimpleStringStringMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleStringStringMapMessage>();
    qRegisterMetaType<SimpleStringStringMapMessageRepeated>();
    qRegisterMetaType<SimpleStringStringMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QString, QString>();
}
SimpleStringStringMapMessage::SimpleStringStringMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleStringStringMapMessage::SimpleStringStringMapMessage(const SimpleStringStringMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleStringStringMapMessage &SimpleStringStringMapMessage::operator =(const SimpleStringStringMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleStringStringMapMessage::SimpleStringStringMapMessage(SimpleStringStringMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleStringStringMapMessage &SimpleStringStringMapMessage::operator =(SimpleStringStringMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleStringStringMapMessage::operator ==(const SimpleStringStringMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleStringStringMapMessage::operator !=(const SimpleStringStringMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleStringStringMapMessage::setMapField(const SimpleStringStringMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSInt32SInt32MapMessage::~SimpleSInt32SInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSInt32SInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleSInt32SInt32MapMessage_char_data[10];
} qt_protobuf_SimpleSInt32SInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        1, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSInt32SInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSInt32SInt32MapMessage_metadata.data
};

void SimpleSInt32SInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSInt32SInt32MapMessage>();
    qRegisterMetaType<SimpleSInt32SInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleSInt32SInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sint32, QtProtobuf::sint32>();
}
SimpleSInt32SInt32MapMessage::SimpleSInt32SInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSInt32SInt32MapMessage::SimpleSInt32SInt32MapMessage(const SimpleSInt32SInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSInt32SInt32MapMessage &SimpleSInt32SInt32MapMessage::operator =(const SimpleSInt32SInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSInt32SInt32MapMessage::SimpleSInt32SInt32MapMessage(SimpleSInt32SInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSInt32SInt32MapMessage &SimpleSInt32SInt32MapMessage::operator =(SimpleSInt32SInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSInt32SInt32MapMessage::operator ==(const SimpleSInt32SInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSInt32SInt32MapMessage::operator !=(const SimpleSInt32SInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSInt32SInt32MapMessage::setMapField(const SimpleSInt32SInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSInt64SInt32MapMessage::~SimpleSInt64SInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSInt64SInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleSInt64SInt32MapMessage_char_data[10];
} qt_protobuf_SimpleSInt64SInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        2, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSInt64SInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSInt64SInt32MapMessage_metadata.data
};

void SimpleSInt64SInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSInt64SInt32MapMessage>();
    qRegisterMetaType<SimpleSInt64SInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleSInt64SInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sint64, QtProtobuf::sint32>();
}
SimpleSInt64SInt32MapMessage::SimpleSInt64SInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSInt64SInt32MapMessage::SimpleSInt64SInt32MapMessage(const SimpleSInt64SInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSInt64SInt32MapMessage &SimpleSInt64SInt32MapMessage::operator =(const SimpleSInt64SInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSInt64SInt32MapMessage::SimpleSInt64SInt32MapMessage(SimpleSInt64SInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSInt64SInt32MapMessage &SimpleSInt64SInt32MapMessage::operator =(SimpleSInt64SInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSInt64SInt32MapMessage::operator ==(const SimpleSInt64SInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSInt64SInt32MapMessage::operator !=(const SimpleSInt64SInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSInt64SInt32MapMessage::setMapField(const SimpleSInt64SInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleInt32SInt32MapMessage::~SimpleInt32SInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleInt32SInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleInt32SInt32MapMessage_char_data[10];
} qt_protobuf_SimpleInt32SInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        3, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleInt32SInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleInt32SInt32MapMessage_metadata.data
};

void SimpleInt32SInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleInt32SInt32MapMessage>();
    qRegisterMetaType<SimpleInt32SInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleInt32SInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::int32, QtProtobuf::sint32>();
}
SimpleInt32SInt32MapMessage::SimpleInt32SInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleInt32SInt32MapMessage::SimpleInt32SInt32MapMessage(const SimpleInt32SInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleInt32SInt32MapMessage &SimpleInt32SInt32MapMessage::operator =(const SimpleInt32SInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleInt32SInt32MapMessage::SimpleInt32SInt32MapMessage(SimpleInt32SInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleInt32SInt32MapMessage &SimpleInt32SInt32MapMessage::operator =(SimpleInt32SInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleInt32SInt32MapMessage::operator ==(const SimpleInt32SInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleInt32SInt32MapMessage::operator !=(const SimpleInt32SInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleInt32SInt32MapMessage::setMapField(const SimpleInt32SInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleInt64SInt32MapMessage::~SimpleInt64SInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleInt64SInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleInt64SInt32MapMessage_char_data[10];
} qt_protobuf_SimpleInt64SInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        4, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleInt64SInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleInt64SInt32MapMessage_metadata.data
};

void SimpleInt64SInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleInt64SInt32MapMessage>();
    qRegisterMetaType<SimpleInt64SInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleInt64SInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::int64, QtProtobuf::sint32>();
}
SimpleInt64SInt32MapMessage::SimpleInt64SInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleInt64SInt32MapMessage::SimpleInt64SInt32MapMessage(const SimpleInt64SInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleInt64SInt32MapMessage &SimpleInt64SInt32MapMessage::operator =(const SimpleInt64SInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleInt64SInt32MapMessage::SimpleInt64SInt32MapMessage(SimpleInt64SInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleInt64SInt32MapMessage &SimpleInt64SInt32MapMessage::operator =(SimpleInt64SInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleInt64SInt32MapMessage::operator ==(const SimpleInt64SInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleInt64SInt32MapMessage::operator !=(const SimpleInt64SInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleInt64SInt32MapMessage::setMapField(const SimpleInt64SInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleUInt32SInt32MapMessage::~SimpleUInt32SInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUInt32SInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleUInt32SInt32MapMessage_char_data[10];
} qt_protobuf_SimpleUInt32SInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        5, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUInt32SInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleUInt32SInt32MapMessage_metadata.data
};

void SimpleUInt32SInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleUInt32SInt32MapMessage>();
    qRegisterMetaType<SimpleUInt32SInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleUInt32SInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::uint32, QtProtobuf::sint32>();
}
SimpleUInt32SInt32MapMessage::SimpleUInt32SInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleUInt32SInt32MapMessage::SimpleUInt32SInt32MapMessage(const SimpleUInt32SInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleUInt32SInt32MapMessage &SimpleUInt32SInt32MapMessage::operator =(const SimpleUInt32SInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleUInt32SInt32MapMessage::SimpleUInt32SInt32MapMessage(SimpleUInt32SInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleUInt32SInt32MapMessage &SimpleUInt32SInt32MapMessage::operator =(SimpleUInt32SInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleUInt32SInt32MapMessage::operator ==(const SimpleUInt32SInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleUInt32SInt32MapMessage::operator !=(const SimpleUInt32SInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleUInt32SInt32MapMessage::setMapField(const SimpleUInt32SInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleUInt64SInt32MapMessage::~SimpleUInt64SInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUInt64SInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleUInt64SInt32MapMessage_char_data[10];
} qt_protobuf_SimpleUInt64SInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        6, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUInt64SInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleUInt64SInt32MapMessage_metadata.data
};

void SimpleUInt64SInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleUInt64SInt32MapMessage>();
    qRegisterMetaType<SimpleUInt64SInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleUInt64SInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::uint64, QtProtobuf::sint32>();
}
SimpleUInt64SInt32MapMessage::SimpleUInt64SInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleUInt64SInt32MapMessage::SimpleUInt64SInt32MapMessage(const SimpleUInt64SInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleUInt64SInt32MapMessage &SimpleUInt64SInt32MapMessage::operator =(const SimpleUInt64SInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleUInt64SInt32MapMessage::SimpleUInt64SInt32MapMessage(SimpleUInt64SInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleUInt64SInt32MapMessage &SimpleUInt64SInt32MapMessage::operator =(SimpleUInt64SInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleUInt64SInt32MapMessage::operator ==(const SimpleUInt64SInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleUInt64SInt32MapMessage::operator !=(const SimpleUInt64SInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleUInt64SInt32MapMessage::setMapField(const SimpleUInt64SInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleFixed32SInt32MapMessage::~SimpleFixed32SInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixed32SInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleFixed32SInt32MapMessage_char_data[10];
} qt_protobuf_SimpleFixed32SInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        7, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixed32SInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleFixed32SInt32MapMessage_metadata.data
};

void SimpleFixed32SInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleFixed32SInt32MapMessage>();
    qRegisterMetaType<SimpleFixed32SInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleFixed32SInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::fixed32, QtProtobuf::sint32>();
}
SimpleFixed32SInt32MapMessage::SimpleFixed32SInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleFixed32SInt32MapMessage::SimpleFixed32SInt32MapMessage(const SimpleFixed32SInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleFixed32SInt32MapMessage &SimpleFixed32SInt32MapMessage::operator =(const SimpleFixed32SInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleFixed32SInt32MapMessage::SimpleFixed32SInt32MapMessage(SimpleFixed32SInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleFixed32SInt32MapMessage &SimpleFixed32SInt32MapMessage::operator =(SimpleFixed32SInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleFixed32SInt32MapMessage::operator ==(const SimpleFixed32SInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleFixed32SInt32MapMessage::operator !=(const SimpleFixed32SInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleFixed32SInt32MapMessage::setMapField(const SimpleFixed32SInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleFixed64SInt32MapMessage::~SimpleFixed64SInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixed64SInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleFixed64SInt32MapMessage_char_data[10];
} qt_protobuf_SimpleFixed64SInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        8, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixed64SInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleFixed64SInt32MapMessage_metadata.data
};

void SimpleFixed64SInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleFixed64SInt32MapMessage>();
    qRegisterMetaType<SimpleFixed64SInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleFixed64SInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::fixed64, QtProtobuf::sint32>();
}
SimpleFixed64SInt32MapMessage::SimpleFixed64SInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleFixed64SInt32MapMessage::SimpleFixed64SInt32MapMessage(const SimpleFixed64SInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleFixed64SInt32MapMessage &SimpleFixed64SInt32MapMessage::operator =(const SimpleFixed64SInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleFixed64SInt32MapMessage::SimpleFixed64SInt32MapMessage(SimpleFixed64SInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleFixed64SInt32MapMessage &SimpleFixed64SInt32MapMessage::operator =(SimpleFixed64SInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleFixed64SInt32MapMessage::operator ==(const SimpleFixed64SInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleFixed64SInt32MapMessage::operator !=(const SimpleFixed64SInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleFixed64SInt32MapMessage::setMapField(const SimpleFixed64SInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSFixed32SInt32MapMessage::~SimpleSFixed32SInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixed32SInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleSFixed32SInt32MapMessage_char_data[10];
} qt_protobuf_SimpleSFixed32SInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        9, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixed32SInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSFixed32SInt32MapMessage_metadata.data
};

void SimpleSFixed32SInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSFixed32SInt32MapMessage>();
    qRegisterMetaType<SimpleSFixed32SInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleSFixed32SInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sfixed32, QtProtobuf::sint32>();
}
SimpleSFixed32SInt32MapMessage::SimpleSFixed32SInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSFixed32SInt32MapMessage::SimpleSFixed32SInt32MapMessage(const SimpleSFixed32SInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSFixed32SInt32MapMessage &SimpleSFixed32SInt32MapMessage::operator =(const SimpleSFixed32SInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSFixed32SInt32MapMessage::SimpleSFixed32SInt32MapMessage(SimpleSFixed32SInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSFixed32SInt32MapMessage &SimpleSFixed32SInt32MapMessage::operator =(SimpleSFixed32SInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSFixed32SInt32MapMessage::operator ==(const SimpleSFixed32SInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSFixed32SInt32MapMessage::operator !=(const SimpleSFixed32SInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSFixed32SInt32MapMessage::setMapField(const SimpleSFixed32SInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSFixed64SInt32MapMessage::~SimpleSFixed64SInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixed64SInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleSFixed64SInt32MapMessage_char_data[10];
} qt_protobuf_SimpleSFixed64SInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        10, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixed64SInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSFixed64SInt32MapMessage_metadata.data
};

void SimpleSFixed64SInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSFixed64SInt32MapMessage>();
    qRegisterMetaType<SimpleSFixed64SInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleSFixed64SInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sfixed64, QtProtobuf::sint32>();
}
SimpleSFixed64SInt32MapMessage::SimpleSFixed64SInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSFixed64SInt32MapMessage::SimpleSFixed64SInt32MapMessage(const SimpleSFixed64SInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSFixed64SInt32MapMessage &SimpleSFixed64SInt32MapMessage::operator =(const SimpleSFixed64SInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSFixed64SInt32MapMessage::SimpleSFixed64SInt32MapMessage(SimpleSFixed64SInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSFixed64SInt32MapMessage &SimpleSFixed64SInt32MapMessage::operator =(SimpleSFixed64SInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSFixed64SInt32MapMessage::operator ==(const SimpleSFixed64SInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSFixed64SInt32MapMessage::operator !=(const SimpleSFixed64SInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSFixed64SInt32MapMessage::setMapField(const SimpleSFixed64SInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleStringSInt32MapMessage::~SimpleStringSInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleStringSInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleStringSInt32MapMessage_char_data[10];
} qt_protobuf_SimpleStringSInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        13, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleStringSInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleStringSInt32MapMessage_metadata.data
};

void SimpleStringSInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleStringSInt32MapMessage>();
    qRegisterMetaType<SimpleStringSInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleStringSInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QString, QtProtobuf::sint32>();
}
SimpleStringSInt32MapMessage::SimpleStringSInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleStringSInt32MapMessage::SimpleStringSInt32MapMessage(const SimpleStringSInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleStringSInt32MapMessage &SimpleStringSInt32MapMessage::operator =(const SimpleStringSInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleStringSInt32MapMessage::SimpleStringSInt32MapMessage(SimpleStringSInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleStringSInt32MapMessage &SimpleStringSInt32MapMessage::operator =(SimpleStringSInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleStringSInt32MapMessage::operator ==(const SimpleStringSInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleStringSInt32MapMessage::operator !=(const SimpleStringSInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleStringSInt32MapMessage::setMapField(const SimpleStringSInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSInt32SInt64MapMessage::~SimpleSInt32SInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSInt32SInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleSInt32SInt64MapMessage_char_data[10];
} qt_protobuf_SimpleSInt32SInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        1, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSInt32SInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSInt32SInt64MapMessage_metadata.data
};

void SimpleSInt32SInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSInt32SInt64MapMessage>();
    qRegisterMetaType<SimpleSInt32SInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleSInt32SInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sint32, QtProtobuf::sint64>();
}
SimpleSInt32SInt64MapMessage::SimpleSInt32SInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSInt32SInt64MapMessage::SimpleSInt32SInt64MapMessage(const SimpleSInt32SInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSInt32SInt64MapMessage &SimpleSInt32SInt64MapMessage::operator =(const SimpleSInt32SInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSInt32SInt64MapMessage::SimpleSInt32SInt64MapMessage(SimpleSInt32SInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSInt32SInt64MapMessage &SimpleSInt32SInt64MapMessage::operator =(SimpleSInt32SInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSInt32SInt64MapMessage::operator ==(const SimpleSInt32SInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSInt32SInt64MapMessage::operator !=(const SimpleSInt32SInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSInt32SInt64MapMessage::setMapField(const SimpleSInt32SInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSInt64SInt64MapMessage::~SimpleSInt64SInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSInt64SInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleSInt64SInt64MapMessage_char_data[10];
} qt_protobuf_SimpleSInt64SInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        2, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSInt64SInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSInt64SInt64MapMessage_metadata.data
};

void SimpleSInt64SInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSInt64SInt64MapMessage>();
    qRegisterMetaType<SimpleSInt64SInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleSInt64SInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sint64, QtProtobuf::sint64>();
}
SimpleSInt64SInt64MapMessage::SimpleSInt64SInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSInt64SInt64MapMessage::SimpleSInt64SInt64MapMessage(const SimpleSInt64SInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSInt64SInt64MapMessage &SimpleSInt64SInt64MapMessage::operator =(const SimpleSInt64SInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSInt64SInt64MapMessage::SimpleSInt64SInt64MapMessage(SimpleSInt64SInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSInt64SInt64MapMessage &SimpleSInt64SInt64MapMessage::operator =(SimpleSInt64SInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSInt64SInt64MapMessage::operator ==(const SimpleSInt64SInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSInt64SInt64MapMessage::operator !=(const SimpleSInt64SInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSInt64SInt64MapMessage::setMapField(const SimpleSInt64SInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleInt32SInt64MapMessage::~SimpleInt32SInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleInt32SInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleInt32SInt64MapMessage_char_data[10];
} qt_protobuf_SimpleInt32SInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        3, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleInt32SInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleInt32SInt64MapMessage_metadata.data
};

void SimpleInt32SInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleInt32SInt64MapMessage>();
    qRegisterMetaType<SimpleInt32SInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleInt32SInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::int32, QtProtobuf::sint64>();
}
SimpleInt32SInt64MapMessage::SimpleInt32SInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleInt32SInt64MapMessage::SimpleInt32SInt64MapMessage(const SimpleInt32SInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleInt32SInt64MapMessage &SimpleInt32SInt64MapMessage::operator =(const SimpleInt32SInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleInt32SInt64MapMessage::SimpleInt32SInt64MapMessage(SimpleInt32SInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleInt32SInt64MapMessage &SimpleInt32SInt64MapMessage::operator =(SimpleInt32SInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleInt32SInt64MapMessage::operator ==(const SimpleInt32SInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleInt32SInt64MapMessage::operator !=(const SimpleInt32SInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleInt32SInt64MapMessage::setMapField(const SimpleInt32SInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleInt64SInt64MapMessage::~SimpleInt64SInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleInt64SInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleInt64SInt64MapMessage_char_data[10];
} qt_protobuf_SimpleInt64SInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        4, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleInt64SInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleInt64SInt64MapMessage_metadata.data
};

void SimpleInt64SInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleInt64SInt64MapMessage>();
    qRegisterMetaType<SimpleInt64SInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleInt64SInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::int64, QtProtobuf::sint64>();
}
SimpleInt64SInt64MapMessage::SimpleInt64SInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleInt64SInt64MapMessage::SimpleInt64SInt64MapMessage(const SimpleInt64SInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleInt64SInt64MapMessage &SimpleInt64SInt64MapMessage::operator =(const SimpleInt64SInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleInt64SInt64MapMessage::SimpleInt64SInt64MapMessage(SimpleInt64SInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleInt64SInt64MapMessage &SimpleInt64SInt64MapMessage::operator =(SimpleInt64SInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleInt64SInt64MapMessage::operator ==(const SimpleInt64SInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleInt64SInt64MapMessage::operator !=(const SimpleInt64SInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleInt64SInt64MapMessage::setMapField(const SimpleInt64SInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleUInt32SInt64MapMessage::~SimpleUInt32SInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUInt32SInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleUInt32SInt64MapMessage_char_data[10];
} qt_protobuf_SimpleUInt32SInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        5, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUInt32SInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleUInt32SInt64MapMessage_metadata.data
};

void SimpleUInt32SInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleUInt32SInt64MapMessage>();
    qRegisterMetaType<SimpleUInt32SInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleUInt32SInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::uint32, QtProtobuf::sint64>();
}
SimpleUInt32SInt64MapMessage::SimpleUInt32SInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleUInt32SInt64MapMessage::SimpleUInt32SInt64MapMessage(const SimpleUInt32SInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleUInt32SInt64MapMessage &SimpleUInt32SInt64MapMessage::operator =(const SimpleUInt32SInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleUInt32SInt64MapMessage::SimpleUInt32SInt64MapMessage(SimpleUInt32SInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleUInt32SInt64MapMessage &SimpleUInt32SInt64MapMessage::operator =(SimpleUInt32SInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleUInt32SInt64MapMessage::operator ==(const SimpleUInt32SInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleUInt32SInt64MapMessage::operator !=(const SimpleUInt32SInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleUInt32SInt64MapMessage::setMapField(const SimpleUInt32SInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleUInt64SInt64MapMessage::~SimpleUInt64SInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUInt64SInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleUInt64SInt64MapMessage_char_data[10];
} qt_protobuf_SimpleUInt64SInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        6, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUInt64SInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleUInt64SInt64MapMessage_metadata.data
};

void SimpleUInt64SInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleUInt64SInt64MapMessage>();
    qRegisterMetaType<SimpleUInt64SInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleUInt64SInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::uint64, QtProtobuf::sint64>();
}
SimpleUInt64SInt64MapMessage::SimpleUInt64SInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleUInt64SInt64MapMessage::SimpleUInt64SInt64MapMessage(const SimpleUInt64SInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleUInt64SInt64MapMessage &SimpleUInt64SInt64MapMessage::operator =(const SimpleUInt64SInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleUInt64SInt64MapMessage::SimpleUInt64SInt64MapMessage(SimpleUInt64SInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleUInt64SInt64MapMessage &SimpleUInt64SInt64MapMessage::operator =(SimpleUInt64SInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleUInt64SInt64MapMessage::operator ==(const SimpleUInt64SInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleUInt64SInt64MapMessage::operator !=(const SimpleUInt64SInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleUInt64SInt64MapMessage::setMapField(const SimpleUInt64SInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleFixed32SInt64MapMessage::~SimpleFixed32SInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixed32SInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleFixed32SInt64MapMessage_char_data[10];
} qt_protobuf_SimpleFixed32SInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        7, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixed32SInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleFixed32SInt64MapMessage_metadata.data
};

void SimpleFixed32SInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleFixed32SInt64MapMessage>();
    qRegisterMetaType<SimpleFixed32SInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleFixed32SInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::fixed32, QtProtobuf::sint64>();
}
SimpleFixed32SInt64MapMessage::SimpleFixed32SInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleFixed32SInt64MapMessage::SimpleFixed32SInt64MapMessage(const SimpleFixed32SInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleFixed32SInt64MapMessage &SimpleFixed32SInt64MapMessage::operator =(const SimpleFixed32SInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleFixed32SInt64MapMessage::SimpleFixed32SInt64MapMessage(SimpleFixed32SInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleFixed32SInt64MapMessage &SimpleFixed32SInt64MapMessage::operator =(SimpleFixed32SInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleFixed32SInt64MapMessage::operator ==(const SimpleFixed32SInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleFixed32SInt64MapMessage::operator !=(const SimpleFixed32SInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleFixed32SInt64MapMessage::setMapField(const SimpleFixed32SInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleFixed64SInt64MapMessage::~SimpleFixed64SInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixed64SInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleFixed64SInt64MapMessage_char_data[10];
} qt_protobuf_SimpleFixed64SInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        8, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixed64SInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleFixed64SInt64MapMessage_metadata.data
};

void SimpleFixed64SInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleFixed64SInt64MapMessage>();
    qRegisterMetaType<SimpleFixed64SInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleFixed64SInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::fixed64, QtProtobuf::sint64>();
}
SimpleFixed64SInt64MapMessage::SimpleFixed64SInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleFixed64SInt64MapMessage::SimpleFixed64SInt64MapMessage(const SimpleFixed64SInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleFixed64SInt64MapMessage &SimpleFixed64SInt64MapMessage::operator =(const SimpleFixed64SInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleFixed64SInt64MapMessage::SimpleFixed64SInt64MapMessage(SimpleFixed64SInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleFixed64SInt64MapMessage &SimpleFixed64SInt64MapMessage::operator =(SimpleFixed64SInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleFixed64SInt64MapMessage::operator ==(const SimpleFixed64SInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleFixed64SInt64MapMessage::operator !=(const SimpleFixed64SInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleFixed64SInt64MapMessage::setMapField(const SimpleFixed64SInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSFixed32SInt64MapMessage::~SimpleSFixed32SInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixed32SInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleSFixed32SInt64MapMessage_char_data[10];
} qt_protobuf_SimpleSFixed32SInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        9, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixed32SInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSFixed32SInt64MapMessage_metadata.data
};

void SimpleSFixed32SInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSFixed32SInt64MapMessage>();
    qRegisterMetaType<SimpleSFixed32SInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleSFixed32SInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sfixed32, QtProtobuf::sint64>();
}
SimpleSFixed32SInt64MapMessage::SimpleSFixed32SInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSFixed32SInt64MapMessage::SimpleSFixed32SInt64MapMessage(const SimpleSFixed32SInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSFixed32SInt64MapMessage &SimpleSFixed32SInt64MapMessage::operator =(const SimpleSFixed32SInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSFixed32SInt64MapMessage::SimpleSFixed32SInt64MapMessage(SimpleSFixed32SInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSFixed32SInt64MapMessage &SimpleSFixed32SInt64MapMessage::operator =(SimpleSFixed32SInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSFixed32SInt64MapMessage::operator ==(const SimpleSFixed32SInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSFixed32SInt64MapMessage::operator !=(const SimpleSFixed32SInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSFixed32SInt64MapMessage::setMapField(const SimpleSFixed32SInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSFixed64SInt64MapMessage::~SimpleSFixed64SInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixed64SInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleSFixed64SInt64MapMessage_char_data[10];
} qt_protobuf_SimpleSFixed64SInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        10, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixed64SInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSFixed64SInt64MapMessage_metadata.data
};

void SimpleSFixed64SInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSFixed64SInt64MapMessage>();
    qRegisterMetaType<SimpleSFixed64SInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleSFixed64SInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sfixed64, QtProtobuf::sint64>();
}
SimpleSFixed64SInt64MapMessage::SimpleSFixed64SInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSFixed64SInt64MapMessage::SimpleSFixed64SInt64MapMessage(const SimpleSFixed64SInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSFixed64SInt64MapMessage &SimpleSFixed64SInt64MapMessage::operator =(const SimpleSFixed64SInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSFixed64SInt64MapMessage::SimpleSFixed64SInt64MapMessage(SimpleSFixed64SInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSFixed64SInt64MapMessage &SimpleSFixed64SInt64MapMessage::operator =(SimpleSFixed64SInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSFixed64SInt64MapMessage::operator ==(const SimpleSFixed64SInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSFixed64SInt64MapMessage::operator !=(const SimpleSFixed64SInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSFixed64SInt64MapMessage::setMapField(const SimpleSFixed64SInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleStringSInt64MapMessage::~SimpleStringSInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleStringSInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleStringSInt64MapMessage_char_data[10];
} qt_protobuf_SimpleStringSInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        13, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleStringSInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleStringSInt64MapMessage_metadata.data
};

void SimpleStringSInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleStringSInt64MapMessage>();
    qRegisterMetaType<SimpleStringSInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleStringSInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QString, QtProtobuf::sint64>();
}
SimpleStringSInt64MapMessage::SimpleStringSInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleStringSInt64MapMessage::SimpleStringSInt64MapMessage(const SimpleStringSInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleStringSInt64MapMessage &SimpleStringSInt64MapMessage::operator =(const SimpleStringSInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleStringSInt64MapMessage::SimpleStringSInt64MapMessage(SimpleStringSInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleStringSInt64MapMessage &SimpleStringSInt64MapMessage::operator =(SimpleStringSInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleStringSInt64MapMessage::operator ==(const SimpleStringSInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleStringSInt64MapMessage::operator !=(const SimpleStringSInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleStringSInt64MapMessage::setMapField(const SimpleStringSInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSInt32UInt32MapMessage::~SimpleSInt32UInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSInt32UInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleSInt32UInt32MapMessage_char_data[10];
} qt_protobuf_SimpleSInt32UInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        1, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSInt32UInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSInt32UInt32MapMessage_metadata.data
};

void SimpleSInt32UInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSInt32UInt32MapMessage>();
    qRegisterMetaType<SimpleSInt32UInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleSInt32UInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sint32, QtProtobuf::uint32>();
}
SimpleSInt32UInt32MapMessage::SimpleSInt32UInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSInt32UInt32MapMessage::SimpleSInt32UInt32MapMessage(const SimpleSInt32UInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSInt32UInt32MapMessage &SimpleSInt32UInt32MapMessage::operator =(const SimpleSInt32UInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSInt32UInt32MapMessage::SimpleSInt32UInt32MapMessage(SimpleSInt32UInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSInt32UInt32MapMessage &SimpleSInt32UInt32MapMessage::operator =(SimpleSInt32UInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSInt32UInt32MapMessage::operator ==(const SimpleSInt32UInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSInt32UInt32MapMessage::operator !=(const SimpleSInt32UInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSInt32UInt32MapMessage::setMapField(const SimpleSInt32UInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSInt64UInt32MapMessage::~SimpleSInt64UInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSInt64UInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleSInt64UInt32MapMessage_char_data[10];
} qt_protobuf_SimpleSInt64UInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        2, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSInt64UInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSInt64UInt32MapMessage_metadata.data
};

void SimpleSInt64UInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSInt64UInt32MapMessage>();
    qRegisterMetaType<SimpleSInt64UInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleSInt64UInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sint64, QtProtobuf::uint32>();
}
SimpleSInt64UInt32MapMessage::SimpleSInt64UInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSInt64UInt32MapMessage::SimpleSInt64UInt32MapMessage(const SimpleSInt64UInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSInt64UInt32MapMessage &SimpleSInt64UInt32MapMessage::operator =(const SimpleSInt64UInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSInt64UInt32MapMessage::SimpleSInt64UInt32MapMessage(SimpleSInt64UInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSInt64UInt32MapMessage &SimpleSInt64UInt32MapMessage::operator =(SimpleSInt64UInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSInt64UInt32MapMessage::operator ==(const SimpleSInt64UInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSInt64UInt32MapMessage::operator !=(const SimpleSInt64UInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSInt64UInt32MapMessage::setMapField(const SimpleSInt64UInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleInt32UInt32MapMessage::~SimpleInt32UInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleInt32UInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleInt32UInt32MapMessage_char_data[10];
} qt_protobuf_SimpleInt32UInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        3, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleInt32UInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleInt32UInt32MapMessage_metadata.data
};

void SimpleInt32UInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleInt32UInt32MapMessage>();
    qRegisterMetaType<SimpleInt32UInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleInt32UInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::int32, QtProtobuf::uint32>();
}
SimpleInt32UInt32MapMessage::SimpleInt32UInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleInt32UInt32MapMessage::SimpleInt32UInt32MapMessage(const SimpleInt32UInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleInt32UInt32MapMessage &SimpleInt32UInt32MapMessage::operator =(const SimpleInt32UInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleInt32UInt32MapMessage::SimpleInt32UInt32MapMessage(SimpleInt32UInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleInt32UInt32MapMessage &SimpleInt32UInt32MapMessage::operator =(SimpleInt32UInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleInt32UInt32MapMessage::operator ==(const SimpleInt32UInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleInt32UInt32MapMessage::operator !=(const SimpleInt32UInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleInt32UInt32MapMessage::setMapField(const SimpleInt32UInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleInt64UInt32MapMessage::~SimpleInt64UInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleInt64UInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleInt64UInt32MapMessage_char_data[10];
} qt_protobuf_SimpleInt64UInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        4, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleInt64UInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleInt64UInt32MapMessage_metadata.data
};

void SimpleInt64UInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleInt64UInt32MapMessage>();
    qRegisterMetaType<SimpleInt64UInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleInt64UInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::int64, QtProtobuf::uint32>();
}
SimpleInt64UInt32MapMessage::SimpleInt64UInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleInt64UInt32MapMessage::SimpleInt64UInt32MapMessage(const SimpleInt64UInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleInt64UInt32MapMessage &SimpleInt64UInt32MapMessage::operator =(const SimpleInt64UInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleInt64UInt32MapMessage::SimpleInt64UInt32MapMessage(SimpleInt64UInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleInt64UInt32MapMessage &SimpleInt64UInt32MapMessage::operator =(SimpleInt64UInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleInt64UInt32MapMessage::operator ==(const SimpleInt64UInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleInt64UInt32MapMessage::operator !=(const SimpleInt64UInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleInt64UInt32MapMessage::setMapField(const SimpleInt64UInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleUInt32UInt32MapMessage::~SimpleUInt32UInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUInt32UInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleUInt32UInt32MapMessage_char_data[10];
} qt_protobuf_SimpleUInt32UInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        5, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUInt32UInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleUInt32UInt32MapMessage_metadata.data
};

void SimpleUInt32UInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleUInt32UInt32MapMessage>();
    qRegisterMetaType<SimpleUInt32UInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleUInt32UInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::uint32, QtProtobuf::uint32>();
}
SimpleUInt32UInt32MapMessage::SimpleUInt32UInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleUInt32UInt32MapMessage::SimpleUInt32UInt32MapMessage(const SimpleUInt32UInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleUInt32UInt32MapMessage &SimpleUInt32UInt32MapMessage::operator =(const SimpleUInt32UInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleUInt32UInt32MapMessage::SimpleUInt32UInt32MapMessage(SimpleUInt32UInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleUInt32UInt32MapMessage &SimpleUInt32UInt32MapMessage::operator =(SimpleUInt32UInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleUInt32UInt32MapMessage::operator ==(const SimpleUInt32UInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleUInt32UInt32MapMessage::operator !=(const SimpleUInt32UInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleUInt32UInt32MapMessage::setMapField(const SimpleUInt32UInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleUInt64UInt32MapMessage::~SimpleUInt64UInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUInt64UInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleUInt64UInt32MapMessage_char_data[10];
} qt_protobuf_SimpleUInt64UInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        6, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUInt64UInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleUInt64UInt32MapMessage_metadata.data
};

void SimpleUInt64UInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleUInt64UInt32MapMessage>();
    qRegisterMetaType<SimpleUInt64UInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleUInt64UInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::uint64, QtProtobuf::uint32>();
}
SimpleUInt64UInt32MapMessage::SimpleUInt64UInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleUInt64UInt32MapMessage::SimpleUInt64UInt32MapMessage(const SimpleUInt64UInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleUInt64UInt32MapMessage &SimpleUInt64UInt32MapMessage::operator =(const SimpleUInt64UInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleUInt64UInt32MapMessage::SimpleUInt64UInt32MapMessage(SimpleUInt64UInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleUInt64UInt32MapMessage &SimpleUInt64UInt32MapMessage::operator =(SimpleUInt64UInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleUInt64UInt32MapMessage::operator ==(const SimpleUInt64UInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleUInt64UInt32MapMessage::operator !=(const SimpleUInt64UInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleUInt64UInt32MapMessage::setMapField(const SimpleUInt64UInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleFixed32UInt32MapMessage::~SimpleFixed32UInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixed32UInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleFixed32UInt32MapMessage_char_data[10];
} qt_protobuf_SimpleFixed32UInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        7, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixed32UInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleFixed32UInt32MapMessage_metadata.data
};

void SimpleFixed32UInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleFixed32UInt32MapMessage>();
    qRegisterMetaType<SimpleFixed32UInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleFixed32UInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::fixed32, QtProtobuf::uint32>();
}
SimpleFixed32UInt32MapMessage::SimpleFixed32UInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleFixed32UInt32MapMessage::SimpleFixed32UInt32MapMessage(const SimpleFixed32UInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleFixed32UInt32MapMessage &SimpleFixed32UInt32MapMessage::operator =(const SimpleFixed32UInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleFixed32UInt32MapMessage::SimpleFixed32UInt32MapMessage(SimpleFixed32UInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleFixed32UInt32MapMessage &SimpleFixed32UInt32MapMessage::operator =(SimpleFixed32UInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleFixed32UInt32MapMessage::operator ==(const SimpleFixed32UInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleFixed32UInt32MapMessage::operator !=(const SimpleFixed32UInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleFixed32UInt32MapMessage::setMapField(const SimpleFixed32UInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleFixed64UInt32MapMessage::~SimpleFixed64UInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixed64UInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleFixed64UInt32MapMessage_char_data[10];
} qt_protobuf_SimpleFixed64UInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        8, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixed64UInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleFixed64UInt32MapMessage_metadata.data
};

void SimpleFixed64UInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleFixed64UInt32MapMessage>();
    qRegisterMetaType<SimpleFixed64UInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleFixed64UInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::fixed64, QtProtobuf::uint32>();
}
SimpleFixed64UInt32MapMessage::SimpleFixed64UInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleFixed64UInt32MapMessage::SimpleFixed64UInt32MapMessage(const SimpleFixed64UInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleFixed64UInt32MapMessage &SimpleFixed64UInt32MapMessage::operator =(const SimpleFixed64UInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleFixed64UInt32MapMessage::SimpleFixed64UInt32MapMessage(SimpleFixed64UInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleFixed64UInt32MapMessage &SimpleFixed64UInt32MapMessage::operator =(SimpleFixed64UInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleFixed64UInt32MapMessage::operator ==(const SimpleFixed64UInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleFixed64UInt32MapMessage::operator !=(const SimpleFixed64UInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleFixed64UInt32MapMessage::setMapField(const SimpleFixed64UInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSFixed32UInt32MapMessage::~SimpleSFixed32UInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixed32UInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleSFixed32UInt32MapMessage_char_data[10];
} qt_protobuf_SimpleSFixed32UInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        9, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixed32UInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSFixed32UInt32MapMessage_metadata.data
};

void SimpleSFixed32UInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSFixed32UInt32MapMessage>();
    qRegisterMetaType<SimpleSFixed32UInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleSFixed32UInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sfixed32, QtProtobuf::uint32>();
}
SimpleSFixed32UInt32MapMessage::SimpleSFixed32UInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSFixed32UInt32MapMessage::SimpleSFixed32UInt32MapMessage(const SimpleSFixed32UInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSFixed32UInt32MapMessage &SimpleSFixed32UInt32MapMessage::operator =(const SimpleSFixed32UInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSFixed32UInt32MapMessage::SimpleSFixed32UInt32MapMessage(SimpleSFixed32UInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSFixed32UInt32MapMessage &SimpleSFixed32UInt32MapMessage::operator =(SimpleSFixed32UInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSFixed32UInt32MapMessage::operator ==(const SimpleSFixed32UInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSFixed32UInt32MapMessage::operator !=(const SimpleSFixed32UInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSFixed32UInt32MapMessage::setMapField(const SimpleSFixed32UInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSFixed64UInt32MapMessage::~SimpleSFixed64UInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixed64UInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleSFixed64UInt32MapMessage_char_data[10];
} qt_protobuf_SimpleSFixed64UInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        10, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixed64UInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSFixed64UInt32MapMessage_metadata.data
};

void SimpleSFixed64UInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSFixed64UInt32MapMessage>();
    qRegisterMetaType<SimpleSFixed64UInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleSFixed64UInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sfixed64, QtProtobuf::uint32>();
}
SimpleSFixed64UInt32MapMessage::SimpleSFixed64UInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSFixed64UInt32MapMessage::SimpleSFixed64UInt32MapMessage(const SimpleSFixed64UInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSFixed64UInt32MapMessage &SimpleSFixed64UInt32MapMessage::operator =(const SimpleSFixed64UInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSFixed64UInt32MapMessage::SimpleSFixed64UInt32MapMessage(SimpleSFixed64UInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSFixed64UInt32MapMessage &SimpleSFixed64UInt32MapMessage::operator =(SimpleSFixed64UInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSFixed64UInt32MapMessage::operator ==(const SimpleSFixed64UInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSFixed64UInt32MapMessage::operator !=(const SimpleSFixed64UInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSFixed64UInt32MapMessage::setMapField(const SimpleSFixed64UInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleStringUInt32MapMessage::~SimpleStringUInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleStringUInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleStringUInt32MapMessage_char_data[10];
} qt_protobuf_SimpleStringUInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        13, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleStringUInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleStringUInt32MapMessage_metadata.data
};

void SimpleStringUInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleStringUInt32MapMessage>();
    qRegisterMetaType<SimpleStringUInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleStringUInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QString, QtProtobuf::uint32>();
}
SimpleStringUInt32MapMessage::SimpleStringUInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleStringUInt32MapMessage::SimpleStringUInt32MapMessage(const SimpleStringUInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleStringUInt32MapMessage &SimpleStringUInt32MapMessage::operator =(const SimpleStringUInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleStringUInt32MapMessage::SimpleStringUInt32MapMessage(SimpleStringUInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleStringUInt32MapMessage &SimpleStringUInt32MapMessage::operator =(SimpleStringUInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleStringUInt32MapMessage::operator ==(const SimpleStringUInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleStringUInt32MapMessage::operator !=(const SimpleStringUInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleStringUInt32MapMessage::setMapField(const SimpleStringUInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSInt32UInt64MapMessage::~SimpleSInt32UInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSInt32UInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleSInt32UInt64MapMessage_char_data[10];
} qt_protobuf_SimpleSInt32UInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        1, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSInt32UInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSInt32UInt64MapMessage_metadata.data
};

void SimpleSInt32UInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSInt32UInt64MapMessage>();
    qRegisterMetaType<SimpleSInt32UInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleSInt32UInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sint32, QtProtobuf::uint64>();
}
SimpleSInt32UInt64MapMessage::SimpleSInt32UInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSInt32UInt64MapMessage::SimpleSInt32UInt64MapMessage(const SimpleSInt32UInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSInt32UInt64MapMessage &SimpleSInt32UInt64MapMessage::operator =(const SimpleSInt32UInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSInt32UInt64MapMessage::SimpleSInt32UInt64MapMessage(SimpleSInt32UInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSInt32UInt64MapMessage &SimpleSInt32UInt64MapMessage::operator =(SimpleSInt32UInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSInt32UInt64MapMessage::operator ==(const SimpleSInt32UInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSInt32UInt64MapMessage::operator !=(const SimpleSInt32UInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSInt32UInt64MapMessage::setMapField(const SimpleSInt32UInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSInt64UInt64MapMessage::~SimpleSInt64UInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSInt64UInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleSInt64UInt64MapMessage_char_data[10];
} qt_protobuf_SimpleSInt64UInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        2, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSInt64UInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSInt64UInt64MapMessage_metadata.data
};

void SimpleSInt64UInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSInt64UInt64MapMessage>();
    qRegisterMetaType<SimpleSInt64UInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleSInt64UInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sint64, QtProtobuf::uint64>();
}
SimpleSInt64UInt64MapMessage::SimpleSInt64UInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSInt64UInt64MapMessage::SimpleSInt64UInt64MapMessage(const SimpleSInt64UInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSInt64UInt64MapMessage &SimpleSInt64UInt64MapMessage::operator =(const SimpleSInt64UInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSInt64UInt64MapMessage::SimpleSInt64UInt64MapMessage(SimpleSInt64UInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSInt64UInt64MapMessage &SimpleSInt64UInt64MapMessage::operator =(SimpleSInt64UInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSInt64UInt64MapMessage::operator ==(const SimpleSInt64UInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSInt64UInt64MapMessage::operator !=(const SimpleSInt64UInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSInt64UInt64MapMessage::setMapField(const SimpleSInt64UInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleInt32UInt64MapMessage::~SimpleInt32UInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleInt32UInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleInt32UInt64MapMessage_char_data[10];
} qt_protobuf_SimpleInt32UInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        3, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleInt32UInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleInt32UInt64MapMessage_metadata.data
};

void SimpleInt32UInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleInt32UInt64MapMessage>();
    qRegisterMetaType<SimpleInt32UInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleInt32UInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::int32, QtProtobuf::uint64>();
}
SimpleInt32UInt64MapMessage::SimpleInt32UInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleInt32UInt64MapMessage::SimpleInt32UInt64MapMessage(const SimpleInt32UInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleInt32UInt64MapMessage &SimpleInt32UInt64MapMessage::operator =(const SimpleInt32UInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleInt32UInt64MapMessage::SimpleInt32UInt64MapMessage(SimpleInt32UInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleInt32UInt64MapMessage &SimpleInt32UInt64MapMessage::operator =(SimpleInt32UInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleInt32UInt64MapMessage::operator ==(const SimpleInt32UInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleInt32UInt64MapMessage::operator !=(const SimpleInt32UInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleInt32UInt64MapMessage::setMapField(const SimpleInt32UInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleInt64UInt64MapMessage::~SimpleInt64UInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleInt64UInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleInt64UInt64MapMessage_char_data[10];
} qt_protobuf_SimpleInt64UInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        4, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleInt64UInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleInt64UInt64MapMessage_metadata.data
};

void SimpleInt64UInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleInt64UInt64MapMessage>();
    qRegisterMetaType<SimpleInt64UInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleInt64UInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::int64, QtProtobuf::uint64>();
}
SimpleInt64UInt64MapMessage::SimpleInt64UInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleInt64UInt64MapMessage::SimpleInt64UInt64MapMessage(const SimpleInt64UInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleInt64UInt64MapMessage &SimpleInt64UInt64MapMessage::operator =(const SimpleInt64UInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleInt64UInt64MapMessage::SimpleInt64UInt64MapMessage(SimpleInt64UInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleInt64UInt64MapMessage &SimpleInt64UInt64MapMessage::operator =(SimpleInt64UInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleInt64UInt64MapMessage::operator ==(const SimpleInt64UInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleInt64UInt64MapMessage::operator !=(const SimpleInt64UInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleInt64UInt64MapMessage::setMapField(const SimpleInt64UInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleUInt32UInt64MapMessage::~SimpleUInt32UInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUInt32UInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleUInt32UInt64MapMessage_char_data[10];
} qt_protobuf_SimpleUInt32UInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        5, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUInt32UInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleUInt32UInt64MapMessage_metadata.data
};

void SimpleUInt32UInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleUInt32UInt64MapMessage>();
    qRegisterMetaType<SimpleUInt32UInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleUInt32UInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::uint32, QtProtobuf::uint64>();
}
SimpleUInt32UInt64MapMessage::SimpleUInt32UInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleUInt32UInt64MapMessage::SimpleUInt32UInt64MapMessage(const SimpleUInt32UInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleUInt32UInt64MapMessage &SimpleUInt32UInt64MapMessage::operator =(const SimpleUInt32UInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleUInt32UInt64MapMessage::SimpleUInt32UInt64MapMessage(SimpleUInt32UInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleUInt32UInt64MapMessage &SimpleUInt32UInt64MapMessage::operator =(SimpleUInt32UInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleUInt32UInt64MapMessage::operator ==(const SimpleUInt32UInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleUInt32UInt64MapMessage::operator !=(const SimpleUInt32UInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleUInt32UInt64MapMessage::setMapField(const SimpleUInt32UInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleUInt64UInt64MapMessage::~SimpleUInt64UInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUInt64UInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleUInt64UInt64MapMessage_char_data[10];
} qt_protobuf_SimpleUInt64UInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        6, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUInt64UInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleUInt64UInt64MapMessage_metadata.data
};

void SimpleUInt64UInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleUInt64UInt64MapMessage>();
    qRegisterMetaType<SimpleUInt64UInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleUInt64UInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::uint64, QtProtobuf::uint64>();
}
SimpleUInt64UInt64MapMessage::SimpleUInt64UInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleUInt64UInt64MapMessage::SimpleUInt64UInt64MapMessage(const SimpleUInt64UInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleUInt64UInt64MapMessage &SimpleUInt64UInt64MapMessage::operator =(const SimpleUInt64UInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleUInt64UInt64MapMessage::SimpleUInt64UInt64MapMessage(SimpleUInt64UInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleUInt64UInt64MapMessage &SimpleUInt64UInt64MapMessage::operator =(SimpleUInt64UInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleUInt64UInt64MapMessage::operator ==(const SimpleUInt64UInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleUInt64UInt64MapMessage::operator !=(const SimpleUInt64UInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleUInt64UInt64MapMessage::setMapField(const SimpleUInt64UInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleFixed32UInt64MapMessage::~SimpleFixed32UInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixed32UInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleFixed32UInt64MapMessage_char_data[10];
} qt_protobuf_SimpleFixed32UInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        7, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixed32UInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleFixed32UInt64MapMessage_metadata.data
};

void SimpleFixed32UInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleFixed32UInt64MapMessage>();
    qRegisterMetaType<SimpleFixed32UInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleFixed32UInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::fixed32, QtProtobuf::uint64>();
}
SimpleFixed32UInt64MapMessage::SimpleFixed32UInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleFixed32UInt64MapMessage::SimpleFixed32UInt64MapMessage(const SimpleFixed32UInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleFixed32UInt64MapMessage &SimpleFixed32UInt64MapMessage::operator =(const SimpleFixed32UInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleFixed32UInt64MapMessage::SimpleFixed32UInt64MapMessage(SimpleFixed32UInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleFixed32UInt64MapMessage &SimpleFixed32UInt64MapMessage::operator =(SimpleFixed32UInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleFixed32UInt64MapMessage::operator ==(const SimpleFixed32UInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleFixed32UInt64MapMessage::operator !=(const SimpleFixed32UInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleFixed32UInt64MapMessage::setMapField(const SimpleFixed32UInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleFixed64UInt64MapMessage::~SimpleFixed64UInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixed64UInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleFixed64UInt64MapMessage_char_data[10];
} qt_protobuf_SimpleFixed64UInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        8, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixed64UInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleFixed64UInt64MapMessage_metadata.data
};

void SimpleFixed64UInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleFixed64UInt64MapMessage>();
    qRegisterMetaType<SimpleFixed64UInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleFixed64UInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::fixed64, QtProtobuf::uint64>();
}
SimpleFixed64UInt64MapMessage::SimpleFixed64UInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleFixed64UInt64MapMessage::SimpleFixed64UInt64MapMessage(const SimpleFixed64UInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleFixed64UInt64MapMessage &SimpleFixed64UInt64MapMessage::operator =(const SimpleFixed64UInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleFixed64UInt64MapMessage::SimpleFixed64UInt64MapMessage(SimpleFixed64UInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleFixed64UInt64MapMessage &SimpleFixed64UInt64MapMessage::operator =(SimpleFixed64UInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleFixed64UInt64MapMessage::operator ==(const SimpleFixed64UInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleFixed64UInt64MapMessage::operator !=(const SimpleFixed64UInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleFixed64UInt64MapMessage::setMapField(const SimpleFixed64UInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSFixed32UInt64MapMessage::~SimpleSFixed32UInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixed32UInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleSFixed32UInt64MapMessage_char_data[10];
} qt_protobuf_SimpleSFixed32UInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        9, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixed32UInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSFixed32UInt64MapMessage_metadata.data
};

void SimpleSFixed32UInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSFixed32UInt64MapMessage>();
    qRegisterMetaType<SimpleSFixed32UInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleSFixed32UInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sfixed32, QtProtobuf::uint64>();
}
SimpleSFixed32UInt64MapMessage::SimpleSFixed32UInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSFixed32UInt64MapMessage::SimpleSFixed32UInt64MapMessage(const SimpleSFixed32UInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSFixed32UInt64MapMessage &SimpleSFixed32UInt64MapMessage::operator =(const SimpleSFixed32UInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSFixed32UInt64MapMessage::SimpleSFixed32UInt64MapMessage(SimpleSFixed32UInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSFixed32UInt64MapMessage &SimpleSFixed32UInt64MapMessage::operator =(SimpleSFixed32UInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSFixed32UInt64MapMessage::operator ==(const SimpleSFixed32UInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSFixed32UInt64MapMessage::operator !=(const SimpleSFixed32UInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSFixed32UInt64MapMessage::setMapField(const SimpleSFixed32UInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSFixed64UInt64MapMessage::~SimpleSFixed64UInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixed64UInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleSFixed64UInt64MapMessage_char_data[10];
} qt_protobuf_SimpleSFixed64UInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        10, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixed64UInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSFixed64UInt64MapMessage_metadata.data
};

void SimpleSFixed64UInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSFixed64UInt64MapMessage>();
    qRegisterMetaType<SimpleSFixed64UInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleSFixed64UInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sfixed64, QtProtobuf::uint64>();
}
SimpleSFixed64UInt64MapMessage::SimpleSFixed64UInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSFixed64UInt64MapMessage::SimpleSFixed64UInt64MapMessage(const SimpleSFixed64UInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSFixed64UInt64MapMessage &SimpleSFixed64UInt64MapMessage::operator =(const SimpleSFixed64UInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSFixed64UInt64MapMessage::SimpleSFixed64UInt64MapMessage(SimpleSFixed64UInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSFixed64UInt64MapMessage &SimpleSFixed64UInt64MapMessage::operator =(SimpleSFixed64UInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSFixed64UInt64MapMessage::operator ==(const SimpleSFixed64UInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSFixed64UInt64MapMessage::operator !=(const SimpleSFixed64UInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSFixed64UInt64MapMessage::setMapField(const SimpleSFixed64UInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleStringUInt64MapMessage::~SimpleStringUInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleStringUInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleStringUInt64MapMessage_char_data[10];
} qt_protobuf_SimpleStringUInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        13, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleStringUInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleStringUInt64MapMessage_metadata.data
};

void SimpleStringUInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleStringUInt64MapMessage>();
    qRegisterMetaType<SimpleStringUInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleStringUInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QString, QtProtobuf::uint64>();
}
SimpleStringUInt64MapMessage::SimpleStringUInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleStringUInt64MapMessage::SimpleStringUInt64MapMessage(const SimpleStringUInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleStringUInt64MapMessage &SimpleStringUInt64MapMessage::operator =(const SimpleStringUInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleStringUInt64MapMessage::SimpleStringUInt64MapMessage(SimpleStringUInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleStringUInt64MapMessage &SimpleStringUInt64MapMessage::operator =(SimpleStringUInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleStringUInt64MapMessage::operator ==(const SimpleStringUInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleStringUInt64MapMessage::operator !=(const SimpleStringUInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleStringUInt64MapMessage::setMapField(const SimpleStringUInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSInt32Int32MapMessage::~SimpleSInt32Int32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSInt32Int32MapMessage_uint_data;
    const char qt_protobuf_SimpleSInt32Int32MapMessage_char_data[10];
} qt_protobuf_SimpleSInt32Int32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        1, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSInt32Int32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSInt32Int32MapMessage_metadata.data
};

void SimpleSInt32Int32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSInt32Int32MapMessage>();
    qRegisterMetaType<SimpleSInt32Int32MapMessageRepeated>();
    qRegisterMetaType<SimpleSInt32Int32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sint32, QtProtobuf::int32>();
}
SimpleSInt32Int32MapMessage::SimpleSInt32Int32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSInt32Int32MapMessage::SimpleSInt32Int32MapMessage(const SimpleSInt32Int32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSInt32Int32MapMessage &SimpleSInt32Int32MapMessage::operator =(const SimpleSInt32Int32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSInt32Int32MapMessage::SimpleSInt32Int32MapMessage(SimpleSInt32Int32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSInt32Int32MapMessage &SimpleSInt32Int32MapMessage::operator =(SimpleSInt32Int32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSInt32Int32MapMessage::operator ==(const SimpleSInt32Int32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSInt32Int32MapMessage::operator !=(const SimpleSInt32Int32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSInt32Int32MapMessage::setMapField(const SimpleSInt32Int32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSInt64Int32MapMessage::~SimpleSInt64Int32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSInt64Int32MapMessage_uint_data;
    const char qt_protobuf_SimpleSInt64Int32MapMessage_char_data[10];
} qt_protobuf_SimpleSInt64Int32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        2, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSInt64Int32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSInt64Int32MapMessage_metadata.data
};

void SimpleSInt64Int32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSInt64Int32MapMessage>();
    qRegisterMetaType<SimpleSInt64Int32MapMessageRepeated>();
    qRegisterMetaType<SimpleSInt64Int32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sint64, QtProtobuf::int32>();
}
SimpleSInt64Int32MapMessage::SimpleSInt64Int32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSInt64Int32MapMessage::SimpleSInt64Int32MapMessage(const SimpleSInt64Int32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSInt64Int32MapMessage &SimpleSInt64Int32MapMessage::operator =(const SimpleSInt64Int32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSInt64Int32MapMessage::SimpleSInt64Int32MapMessage(SimpleSInt64Int32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSInt64Int32MapMessage &SimpleSInt64Int32MapMessage::operator =(SimpleSInt64Int32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSInt64Int32MapMessage::operator ==(const SimpleSInt64Int32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSInt64Int32MapMessage::operator !=(const SimpleSInt64Int32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSInt64Int32MapMessage::setMapField(const SimpleSInt64Int32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleInt32Int32MapMessage::~SimpleInt32Int32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleInt32Int32MapMessage_uint_data;
    const char qt_protobuf_SimpleInt32Int32MapMessage_char_data[10];
} qt_protobuf_SimpleInt32Int32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        3, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleInt32Int32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleInt32Int32MapMessage_metadata.data
};

void SimpleInt32Int32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleInt32Int32MapMessage>();
    qRegisterMetaType<SimpleInt32Int32MapMessageRepeated>();
    qRegisterMetaType<SimpleInt32Int32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::int32, QtProtobuf::int32>();
}
SimpleInt32Int32MapMessage::SimpleInt32Int32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleInt32Int32MapMessage::SimpleInt32Int32MapMessage(const SimpleInt32Int32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleInt32Int32MapMessage &SimpleInt32Int32MapMessage::operator =(const SimpleInt32Int32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleInt32Int32MapMessage::SimpleInt32Int32MapMessage(SimpleInt32Int32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleInt32Int32MapMessage &SimpleInt32Int32MapMessage::operator =(SimpleInt32Int32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleInt32Int32MapMessage::operator ==(const SimpleInt32Int32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleInt32Int32MapMessage::operator !=(const SimpleInt32Int32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleInt32Int32MapMessage::setMapField(const SimpleInt32Int32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleInt64Int32MapMessage::~SimpleInt64Int32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleInt64Int32MapMessage_uint_data;
    const char qt_protobuf_SimpleInt64Int32MapMessage_char_data[10];
} qt_protobuf_SimpleInt64Int32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        4, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleInt64Int32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleInt64Int32MapMessage_metadata.data
};

void SimpleInt64Int32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleInt64Int32MapMessage>();
    qRegisterMetaType<SimpleInt64Int32MapMessageRepeated>();
    qRegisterMetaType<SimpleInt64Int32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::int64, QtProtobuf::int32>();
}
SimpleInt64Int32MapMessage::SimpleInt64Int32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleInt64Int32MapMessage::SimpleInt64Int32MapMessage(const SimpleInt64Int32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleInt64Int32MapMessage &SimpleInt64Int32MapMessage::operator =(const SimpleInt64Int32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleInt64Int32MapMessage::SimpleInt64Int32MapMessage(SimpleInt64Int32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleInt64Int32MapMessage &SimpleInt64Int32MapMessage::operator =(SimpleInt64Int32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleInt64Int32MapMessage::operator ==(const SimpleInt64Int32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleInt64Int32MapMessage::operator !=(const SimpleInt64Int32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleInt64Int32MapMessage::setMapField(const SimpleInt64Int32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleUInt32Int32MapMessage::~SimpleUInt32Int32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUInt32Int32MapMessage_uint_data;
    const char qt_protobuf_SimpleUInt32Int32MapMessage_char_data[10];
} qt_protobuf_SimpleUInt32Int32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        5, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUInt32Int32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleUInt32Int32MapMessage_metadata.data
};

void SimpleUInt32Int32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleUInt32Int32MapMessage>();
    qRegisterMetaType<SimpleUInt32Int32MapMessageRepeated>();
    qRegisterMetaType<SimpleUInt32Int32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::uint32, QtProtobuf::int32>();
}
SimpleUInt32Int32MapMessage::SimpleUInt32Int32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleUInt32Int32MapMessage::SimpleUInt32Int32MapMessage(const SimpleUInt32Int32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleUInt32Int32MapMessage &SimpleUInt32Int32MapMessage::operator =(const SimpleUInt32Int32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleUInt32Int32MapMessage::SimpleUInt32Int32MapMessage(SimpleUInt32Int32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleUInt32Int32MapMessage &SimpleUInt32Int32MapMessage::operator =(SimpleUInt32Int32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleUInt32Int32MapMessage::operator ==(const SimpleUInt32Int32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleUInt32Int32MapMessage::operator !=(const SimpleUInt32Int32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleUInt32Int32MapMessage::setMapField(const SimpleUInt32Int32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleUInt64Int32MapMessage::~SimpleUInt64Int32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUInt64Int32MapMessage_uint_data;
    const char qt_protobuf_SimpleUInt64Int32MapMessage_char_data[10];
} qt_protobuf_SimpleUInt64Int32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        6, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUInt64Int32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleUInt64Int32MapMessage_metadata.data
};

void SimpleUInt64Int32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleUInt64Int32MapMessage>();
    qRegisterMetaType<SimpleUInt64Int32MapMessageRepeated>();
    qRegisterMetaType<SimpleUInt64Int32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::uint64, QtProtobuf::int32>();
}
SimpleUInt64Int32MapMessage::SimpleUInt64Int32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleUInt64Int32MapMessage::SimpleUInt64Int32MapMessage(const SimpleUInt64Int32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleUInt64Int32MapMessage &SimpleUInt64Int32MapMessage::operator =(const SimpleUInt64Int32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleUInt64Int32MapMessage::SimpleUInt64Int32MapMessage(SimpleUInt64Int32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleUInt64Int32MapMessage &SimpleUInt64Int32MapMessage::operator =(SimpleUInt64Int32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleUInt64Int32MapMessage::operator ==(const SimpleUInt64Int32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleUInt64Int32MapMessage::operator !=(const SimpleUInt64Int32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleUInt64Int32MapMessage::setMapField(const SimpleUInt64Int32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleFixed32Int32MapMessage::~SimpleFixed32Int32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixed32Int32MapMessage_uint_data;
    const char qt_protobuf_SimpleFixed32Int32MapMessage_char_data[10];
} qt_protobuf_SimpleFixed32Int32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        7, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixed32Int32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleFixed32Int32MapMessage_metadata.data
};

void SimpleFixed32Int32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleFixed32Int32MapMessage>();
    qRegisterMetaType<SimpleFixed32Int32MapMessageRepeated>();
    qRegisterMetaType<SimpleFixed32Int32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::fixed32, QtProtobuf::int32>();
}
SimpleFixed32Int32MapMessage::SimpleFixed32Int32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleFixed32Int32MapMessage::SimpleFixed32Int32MapMessage(const SimpleFixed32Int32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleFixed32Int32MapMessage &SimpleFixed32Int32MapMessage::operator =(const SimpleFixed32Int32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleFixed32Int32MapMessage::SimpleFixed32Int32MapMessage(SimpleFixed32Int32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleFixed32Int32MapMessage &SimpleFixed32Int32MapMessage::operator =(SimpleFixed32Int32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleFixed32Int32MapMessage::operator ==(const SimpleFixed32Int32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleFixed32Int32MapMessage::operator !=(const SimpleFixed32Int32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleFixed32Int32MapMessage::setMapField(const SimpleFixed32Int32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleFixed64Int32MapMessage::~SimpleFixed64Int32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixed64Int32MapMessage_uint_data;
    const char qt_protobuf_SimpleFixed64Int32MapMessage_char_data[10];
} qt_protobuf_SimpleFixed64Int32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        8, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixed64Int32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleFixed64Int32MapMessage_metadata.data
};

void SimpleFixed64Int32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleFixed64Int32MapMessage>();
    qRegisterMetaType<SimpleFixed64Int32MapMessageRepeated>();
    qRegisterMetaType<SimpleFixed64Int32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::fixed64, QtProtobuf::int32>();
}
SimpleFixed64Int32MapMessage::SimpleFixed64Int32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleFixed64Int32MapMessage::SimpleFixed64Int32MapMessage(const SimpleFixed64Int32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleFixed64Int32MapMessage &SimpleFixed64Int32MapMessage::operator =(const SimpleFixed64Int32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleFixed64Int32MapMessage::SimpleFixed64Int32MapMessage(SimpleFixed64Int32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleFixed64Int32MapMessage &SimpleFixed64Int32MapMessage::operator =(SimpleFixed64Int32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleFixed64Int32MapMessage::operator ==(const SimpleFixed64Int32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleFixed64Int32MapMessage::operator !=(const SimpleFixed64Int32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleFixed64Int32MapMessage::setMapField(const SimpleFixed64Int32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSFixed32Int32MapMessage::~SimpleSFixed32Int32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixed32Int32MapMessage_uint_data;
    const char qt_protobuf_SimpleSFixed32Int32MapMessage_char_data[10];
} qt_protobuf_SimpleSFixed32Int32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        9, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixed32Int32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSFixed32Int32MapMessage_metadata.data
};

void SimpleSFixed32Int32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSFixed32Int32MapMessage>();
    qRegisterMetaType<SimpleSFixed32Int32MapMessageRepeated>();
    qRegisterMetaType<SimpleSFixed32Int32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sfixed32, QtProtobuf::int32>();
}
SimpleSFixed32Int32MapMessage::SimpleSFixed32Int32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSFixed32Int32MapMessage::SimpleSFixed32Int32MapMessage(const SimpleSFixed32Int32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSFixed32Int32MapMessage &SimpleSFixed32Int32MapMessage::operator =(const SimpleSFixed32Int32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSFixed32Int32MapMessage::SimpleSFixed32Int32MapMessage(SimpleSFixed32Int32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSFixed32Int32MapMessage &SimpleSFixed32Int32MapMessage::operator =(SimpleSFixed32Int32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSFixed32Int32MapMessage::operator ==(const SimpleSFixed32Int32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSFixed32Int32MapMessage::operator !=(const SimpleSFixed32Int32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSFixed32Int32MapMessage::setMapField(const SimpleSFixed32Int32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSFixed64Int32MapMessage::~SimpleSFixed64Int32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixed64Int32MapMessage_uint_data;
    const char qt_protobuf_SimpleSFixed64Int32MapMessage_char_data[10];
} qt_protobuf_SimpleSFixed64Int32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        10, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixed64Int32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSFixed64Int32MapMessage_metadata.data
};

void SimpleSFixed64Int32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSFixed64Int32MapMessage>();
    qRegisterMetaType<SimpleSFixed64Int32MapMessageRepeated>();
    qRegisterMetaType<SimpleSFixed64Int32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sfixed64, QtProtobuf::int32>();
}
SimpleSFixed64Int32MapMessage::SimpleSFixed64Int32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSFixed64Int32MapMessage::SimpleSFixed64Int32MapMessage(const SimpleSFixed64Int32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSFixed64Int32MapMessage &SimpleSFixed64Int32MapMessage::operator =(const SimpleSFixed64Int32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSFixed64Int32MapMessage::SimpleSFixed64Int32MapMessage(SimpleSFixed64Int32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSFixed64Int32MapMessage &SimpleSFixed64Int32MapMessage::operator =(SimpleSFixed64Int32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSFixed64Int32MapMessage::operator ==(const SimpleSFixed64Int32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSFixed64Int32MapMessage::operator !=(const SimpleSFixed64Int32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSFixed64Int32MapMessage::setMapField(const SimpleSFixed64Int32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleStringInt32MapMessage::~SimpleStringInt32MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleStringInt32MapMessage_uint_data;
    const char qt_protobuf_SimpleStringInt32MapMessage_char_data[10];
} qt_protobuf_SimpleStringInt32MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        13, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleStringInt32MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleStringInt32MapMessage_metadata.data
};

void SimpleStringInt32MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleStringInt32MapMessage>();
    qRegisterMetaType<SimpleStringInt32MapMessageRepeated>();
    qRegisterMetaType<SimpleStringInt32MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QString, QtProtobuf::int32>();
}
SimpleStringInt32MapMessage::SimpleStringInt32MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleStringInt32MapMessage::SimpleStringInt32MapMessage(const SimpleStringInt32MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleStringInt32MapMessage &SimpleStringInt32MapMessage::operator =(const SimpleStringInt32MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleStringInt32MapMessage::SimpleStringInt32MapMessage(SimpleStringInt32MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleStringInt32MapMessage &SimpleStringInt32MapMessage::operator =(SimpleStringInt32MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleStringInt32MapMessage::operator ==(const SimpleStringInt32MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleStringInt32MapMessage::operator !=(const SimpleStringInt32MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleStringInt32MapMessage::setMapField(const SimpleStringInt32MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSInt32Int64MapMessage::~SimpleSInt32Int64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSInt32Int64MapMessage_uint_data;
    const char qt_protobuf_SimpleSInt32Int64MapMessage_char_data[10];
} qt_protobuf_SimpleSInt32Int64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        1, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSInt32Int64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSInt32Int64MapMessage_metadata.data
};

void SimpleSInt32Int64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSInt32Int64MapMessage>();
    qRegisterMetaType<SimpleSInt32Int64MapMessageRepeated>();
    qRegisterMetaType<SimpleSInt32Int64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sint32, QtProtobuf::int64>();
}
SimpleSInt32Int64MapMessage::SimpleSInt32Int64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSInt32Int64MapMessage::SimpleSInt32Int64MapMessage(const SimpleSInt32Int64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSInt32Int64MapMessage &SimpleSInt32Int64MapMessage::operator =(const SimpleSInt32Int64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSInt32Int64MapMessage::SimpleSInt32Int64MapMessage(SimpleSInt32Int64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSInt32Int64MapMessage &SimpleSInt32Int64MapMessage::operator =(SimpleSInt32Int64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSInt32Int64MapMessage::operator ==(const SimpleSInt32Int64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSInt32Int64MapMessage::operator !=(const SimpleSInt32Int64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSInt32Int64MapMessage::setMapField(const SimpleSInt32Int64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSInt64Int64MapMessage::~SimpleSInt64Int64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSInt64Int64MapMessage_uint_data;
    const char qt_protobuf_SimpleSInt64Int64MapMessage_char_data[10];
} qt_protobuf_SimpleSInt64Int64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        2, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSInt64Int64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSInt64Int64MapMessage_metadata.data
};

void SimpleSInt64Int64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSInt64Int64MapMessage>();
    qRegisterMetaType<SimpleSInt64Int64MapMessageRepeated>();
    qRegisterMetaType<SimpleSInt64Int64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sint64, QtProtobuf::int64>();
}
SimpleSInt64Int64MapMessage::SimpleSInt64Int64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSInt64Int64MapMessage::SimpleSInt64Int64MapMessage(const SimpleSInt64Int64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSInt64Int64MapMessage &SimpleSInt64Int64MapMessage::operator =(const SimpleSInt64Int64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSInt64Int64MapMessage::SimpleSInt64Int64MapMessage(SimpleSInt64Int64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSInt64Int64MapMessage &SimpleSInt64Int64MapMessage::operator =(SimpleSInt64Int64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSInt64Int64MapMessage::operator ==(const SimpleSInt64Int64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSInt64Int64MapMessage::operator !=(const SimpleSInt64Int64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSInt64Int64MapMessage::setMapField(const SimpleSInt64Int64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleInt32Int64MapMessage::~SimpleInt32Int64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleInt32Int64MapMessage_uint_data;
    const char qt_protobuf_SimpleInt32Int64MapMessage_char_data[10];
} qt_protobuf_SimpleInt32Int64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        3, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleInt32Int64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleInt32Int64MapMessage_metadata.data
};

void SimpleInt32Int64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleInt32Int64MapMessage>();
    qRegisterMetaType<SimpleInt32Int64MapMessageRepeated>();
    qRegisterMetaType<SimpleInt32Int64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::int32, QtProtobuf::int64>();
}
SimpleInt32Int64MapMessage::SimpleInt32Int64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleInt32Int64MapMessage::SimpleInt32Int64MapMessage(const SimpleInt32Int64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleInt32Int64MapMessage &SimpleInt32Int64MapMessage::operator =(const SimpleInt32Int64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleInt32Int64MapMessage::SimpleInt32Int64MapMessage(SimpleInt32Int64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleInt32Int64MapMessage &SimpleInt32Int64MapMessage::operator =(SimpleInt32Int64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleInt32Int64MapMessage::operator ==(const SimpleInt32Int64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleInt32Int64MapMessage::operator !=(const SimpleInt32Int64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleInt32Int64MapMessage::setMapField(const SimpleInt32Int64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleInt64Int64MapMessage::~SimpleInt64Int64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleInt64Int64MapMessage_uint_data;
    const char qt_protobuf_SimpleInt64Int64MapMessage_char_data[10];
} qt_protobuf_SimpleInt64Int64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        4, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleInt64Int64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleInt64Int64MapMessage_metadata.data
};

void SimpleInt64Int64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleInt64Int64MapMessage>();
    qRegisterMetaType<SimpleInt64Int64MapMessageRepeated>();
    qRegisterMetaType<SimpleInt64Int64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::int64, QtProtobuf::int64>();
}
SimpleInt64Int64MapMessage::SimpleInt64Int64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleInt64Int64MapMessage::SimpleInt64Int64MapMessage(const SimpleInt64Int64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleInt64Int64MapMessage &SimpleInt64Int64MapMessage::operator =(const SimpleInt64Int64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleInt64Int64MapMessage::SimpleInt64Int64MapMessage(SimpleInt64Int64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleInt64Int64MapMessage &SimpleInt64Int64MapMessage::operator =(SimpleInt64Int64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleInt64Int64MapMessage::operator ==(const SimpleInt64Int64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleInt64Int64MapMessage::operator !=(const SimpleInt64Int64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleInt64Int64MapMessage::setMapField(const SimpleInt64Int64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleUInt32Int64MapMessage::~SimpleUInt32Int64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUInt32Int64MapMessage_uint_data;
    const char qt_protobuf_SimpleUInt32Int64MapMessage_char_data[10];
} qt_protobuf_SimpleUInt32Int64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        5, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUInt32Int64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleUInt32Int64MapMessage_metadata.data
};

void SimpleUInt32Int64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleUInt32Int64MapMessage>();
    qRegisterMetaType<SimpleUInt32Int64MapMessageRepeated>();
    qRegisterMetaType<SimpleUInt32Int64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::uint32, QtProtobuf::int64>();
}
SimpleUInt32Int64MapMessage::SimpleUInt32Int64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleUInt32Int64MapMessage::SimpleUInt32Int64MapMessage(const SimpleUInt32Int64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleUInt32Int64MapMessage &SimpleUInt32Int64MapMessage::operator =(const SimpleUInt32Int64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleUInt32Int64MapMessage::SimpleUInt32Int64MapMessage(SimpleUInt32Int64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleUInt32Int64MapMessage &SimpleUInt32Int64MapMessage::operator =(SimpleUInt32Int64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleUInt32Int64MapMessage::operator ==(const SimpleUInt32Int64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleUInt32Int64MapMessage::operator !=(const SimpleUInt32Int64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleUInt32Int64MapMessage::setMapField(const SimpleUInt32Int64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleUInt64Int64MapMessage::~SimpleUInt64Int64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUInt64Int64MapMessage_uint_data;
    const char qt_protobuf_SimpleUInt64Int64MapMessage_char_data[10];
} qt_protobuf_SimpleUInt64Int64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        6, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUInt64Int64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleUInt64Int64MapMessage_metadata.data
};

void SimpleUInt64Int64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleUInt64Int64MapMessage>();
    qRegisterMetaType<SimpleUInt64Int64MapMessageRepeated>();
    qRegisterMetaType<SimpleUInt64Int64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::uint64, QtProtobuf::int64>();
}
SimpleUInt64Int64MapMessage::SimpleUInt64Int64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleUInt64Int64MapMessage::SimpleUInt64Int64MapMessage(const SimpleUInt64Int64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleUInt64Int64MapMessage &SimpleUInt64Int64MapMessage::operator =(const SimpleUInt64Int64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleUInt64Int64MapMessage::SimpleUInt64Int64MapMessage(SimpleUInt64Int64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleUInt64Int64MapMessage &SimpleUInt64Int64MapMessage::operator =(SimpleUInt64Int64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleUInt64Int64MapMessage::operator ==(const SimpleUInt64Int64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleUInt64Int64MapMessage::operator !=(const SimpleUInt64Int64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleUInt64Int64MapMessage::setMapField(const SimpleUInt64Int64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleFixed32Int64MapMessage::~SimpleFixed32Int64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixed32Int64MapMessage_uint_data;
    const char qt_protobuf_SimpleFixed32Int64MapMessage_char_data[10];
} qt_protobuf_SimpleFixed32Int64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        7, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixed32Int64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleFixed32Int64MapMessage_metadata.data
};

void SimpleFixed32Int64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleFixed32Int64MapMessage>();
    qRegisterMetaType<SimpleFixed32Int64MapMessageRepeated>();
    qRegisterMetaType<SimpleFixed32Int64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::fixed32, QtProtobuf::int64>();
}
SimpleFixed32Int64MapMessage::SimpleFixed32Int64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleFixed32Int64MapMessage::SimpleFixed32Int64MapMessage(const SimpleFixed32Int64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleFixed32Int64MapMessage &SimpleFixed32Int64MapMessage::operator =(const SimpleFixed32Int64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleFixed32Int64MapMessage::SimpleFixed32Int64MapMessage(SimpleFixed32Int64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleFixed32Int64MapMessage &SimpleFixed32Int64MapMessage::operator =(SimpleFixed32Int64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleFixed32Int64MapMessage::operator ==(const SimpleFixed32Int64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleFixed32Int64MapMessage::operator !=(const SimpleFixed32Int64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleFixed32Int64MapMessage::setMapField(const SimpleFixed32Int64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleFixed64Int64MapMessage::~SimpleFixed64Int64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixed64Int64MapMessage_uint_data;
    const char qt_protobuf_SimpleFixed64Int64MapMessage_char_data[10];
} qt_protobuf_SimpleFixed64Int64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        8, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixed64Int64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleFixed64Int64MapMessage_metadata.data
};

void SimpleFixed64Int64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleFixed64Int64MapMessage>();
    qRegisterMetaType<SimpleFixed64Int64MapMessageRepeated>();
    qRegisterMetaType<SimpleFixed64Int64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::fixed64, QtProtobuf::int64>();
}
SimpleFixed64Int64MapMessage::SimpleFixed64Int64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleFixed64Int64MapMessage::SimpleFixed64Int64MapMessage(const SimpleFixed64Int64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleFixed64Int64MapMessage &SimpleFixed64Int64MapMessage::operator =(const SimpleFixed64Int64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleFixed64Int64MapMessage::SimpleFixed64Int64MapMessage(SimpleFixed64Int64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleFixed64Int64MapMessage &SimpleFixed64Int64MapMessage::operator =(SimpleFixed64Int64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleFixed64Int64MapMessage::operator ==(const SimpleFixed64Int64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleFixed64Int64MapMessage::operator !=(const SimpleFixed64Int64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleFixed64Int64MapMessage::setMapField(const SimpleFixed64Int64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSFixed32Int64MapMessage::~SimpleSFixed32Int64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixed32Int64MapMessage_uint_data;
    const char qt_protobuf_SimpleSFixed32Int64MapMessage_char_data[10];
} qt_protobuf_SimpleSFixed32Int64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        9, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixed32Int64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSFixed32Int64MapMessage_metadata.data
};

void SimpleSFixed32Int64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSFixed32Int64MapMessage>();
    qRegisterMetaType<SimpleSFixed32Int64MapMessageRepeated>();
    qRegisterMetaType<SimpleSFixed32Int64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sfixed32, QtProtobuf::int64>();
}
SimpleSFixed32Int64MapMessage::SimpleSFixed32Int64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSFixed32Int64MapMessage::SimpleSFixed32Int64MapMessage(const SimpleSFixed32Int64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSFixed32Int64MapMessage &SimpleSFixed32Int64MapMessage::operator =(const SimpleSFixed32Int64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSFixed32Int64MapMessage::SimpleSFixed32Int64MapMessage(SimpleSFixed32Int64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSFixed32Int64MapMessage &SimpleSFixed32Int64MapMessage::operator =(SimpleSFixed32Int64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSFixed32Int64MapMessage::operator ==(const SimpleSFixed32Int64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSFixed32Int64MapMessage::operator !=(const SimpleSFixed32Int64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSFixed32Int64MapMessage::setMapField(const SimpleSFixed32Int64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSFixed64Int64MapMessage::~SimpleSFixed64Int64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixed64Int64MapMessage_uint_data;
    const char qt_protobuf_SimpleSFixed64Int64MapMessage_char_data[10];
} qt_protobuf_SimpleSFixed64Int64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        10, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixed64Int64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSFixed64Int64MapMessage_metadata.data
};

void SimpleSFixed64Int64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSFixed64Int64MapMessage>();
    qRegisterMetaType<SimpleSFixed64Int64MapMessageRepeated>();
    qRegisterMetaType<SimpleSFixed64Int64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sfixed64, QtProtobuf::int64>();
}
SimpleSFixed64Int64MapMessage::SimpleSFixed64Int64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSFixed64Int64MapMessage::SimpleSFixed64Int64MapMessage(const SimpleSFixed64Int64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSFixed64Int64MapMessage &SimpleSFixed64Int64MapMessage::operator =(const SimpleSFixed64Int64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSFixed64Int64MapMessage::SimpleSFixed64Int64MapMessage(SimpleSFixed64Int64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSFixed64Int64MapMessage &SimpleSFixed64Int64MapMessage::operator =(SimpleSFixed64Int64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSFixed64Int64MapMessage::operator ==(const SimpleSFixed64Int64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSFixed64Int64MapMessage::operator !=(const SimpleSFixed64Int64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSFixed64Int64MapMessage::setMapField(const SimpleSFixed64Int64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleStringInt64MapMessage::~SimpleStringInt64MapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleStringInt64MapMessage_uint_data;
    const char qt_protobuf_SimpleStringInt64MapMessage_char_data[10];
} qt_protobuf_SimpleStringInt64MapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        13, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleStringInt64MapMessage::propertyOrdering = {
    &qt_protobuf_SimpleStringInt64MapMessage_metadata.data
};

void SimpleStringInt64MapMessage::registerTypes()
{
    qRegisterMetaType<SimpleStringInt64MapMessage>();
    qRegisterMetaType<SimpleStringInt64MapMessageRepeated>();
    qRegisterMetaType<SimpleStringInt64MapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QString, QtProtobuf::int64>();
}
SimpleStringInt64MapMessage::SimpleStringInt64MapMessage(QObject *parent) : QObject(parent)
{
}
SimpleStringInt64MapMessage::SimpleStringInt64MapMessage(const SimpleStringInt64MapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleStringInt64MapMessage &SimpleStringInt64MapMessage::operator =(const SimpleStringInt64MapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleStringInt64MapMessage::SimpleStringInt64MapMessage(SimpleStringInt64MapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleStringInt64MapMessage &SimpleStringInt64MapMessage::operator =(SimpleStringInt64MapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleStringInt64MapMessage::operator ==(const SimpleStringInt64MapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleStringInt64MapMessage::operator !=(const SimpleStringInt64MapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleStringInt64MapMessage::setMapField(const SimpleStringInt64MapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSInt32ComplexMessageMapMessage::~SimpleSInt32ComplexMessageMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSInt32ComplexMessageMapMessage_uint_data;
    const char qt_protobuf_SimpleSInt32ComplexMessageMapMessage_char_data[10];
} qt_protobuf_SimpleSInt32ComplexMessageMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        1, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSInt32ComplexMessageMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSInt32ComplexMessageMapMessage_metadata.data
};

void SimpleSInt32ComplexMessageMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSInt32ComplexMessageMapMessage>();
    qRegisterMetaType<SimpleSInt32ComplexMessageMapMessageRepeated>();
    qRegisterMetaType<SimpleSInt32ComplexMessageMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sint32, ComplexMessage>();
}
SimpleSInt32ComplexMessageMapMessage::SimpleSInt32ComplexMessageMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSInt32ComplexMessageMapMessage::SimpleSInt32ComplexMessageMapMessage(const SimpleSInt32ComplexMessageMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSInt32ComplexMessageMapMessage &SimpleSInt32ComplexMessageMapMessage::operator =(const SimpleSInt32ComplexMessageMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSInt32ComplexMessageMapMessage::SimpleSInt32ComplexMessageMapMessage(SimpleSInt32ComplexMessageMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSInt32ComplexMessageMapMessage &SimpleSInt32ComplexMessageMapMessage::operator =(SimpleSInt32ComplexMessageMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSInt32ComplexMessageMapMessage::operator ==(const SimpleSInt32ComplexMessageMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSInt32ComplexMessageMapMessage::operator !=(const SimpleSInt32ComplexMessageMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSInt32ComplexMessageMapMessage::setMapField(const SimpleSInt32ComplexMessageMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSInt64ComplexMessageMapMessage::~SimpleSInt64ComplexMessageMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSInt64ComplexMessageMapMessage_uint_data;
    const char qt_protobuf_SimpleSInt64ComplexMessageMapMessage_char_data[10];
} qt_protobuf_SimpleSInt64ComplexMessageMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        2, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSInt64ComplexMessageMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSInt64ComplexMessageMapMessage_metadata.data
};

void SimpleSInt64ComplexMessageMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSInt64ComplexMessageMapMessage>();
    qRegisterMetaType<SimpleSInt64ComplexMessageMapMessageRepeated>();
    qRegisterMetaType<SimpleSInt64ComplexMessageMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sint64, ComplexMessage>();
}
SimpleSInt64ComplexMessageMapMessage::SimpleSInt64ComplexMessageMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSInt64ComplexMessageMapMessage::SimpleSInt64ComplexMessageMapMessage(const SimpleSInt64ComplexMessageMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSInt64ComplexMessageMapMessage &SimpleSInt64ComplexMessageMapMessage::operator =(const SimpleSInt64ComplexMessageMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSInt64ComplexMessageMapMessage::SimpleSInt64ComplexMessageMapMessage(SimpleSInt64ComplexMessageMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSInt64ComplexMessageMapMessage &SimpleSInt64ComplexMessageMapMessage::operator =(SimpleSInt64ComplexMessageMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSInt64ComplexMessageMapMessage::operator ==(const SimpleSInt64ComplexMessageMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSInt64ComplexMessageMapMessage::operator !=(const SimpleSInt64ComplexMessageMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSInt64ComplexMessageMapMessage::setMapField(const SimpleSInt64ComplexMessageMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleInt32ComplexMessageMapMessage::~SimpleInt32ComplexMessageMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleInt32ComplexMessageMapMessage_uint_data;
    const char qt_protobuf_SimpleInt32ComplexMessageMapMessage_char_data[10];
} qt_protobuf_SimpleInt32ComplexMessageMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        3, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleInt32ComplexMessageMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleInt32ComplexMessageMapMessage_metadata.data
};

void SimpleInt32ComplexMessageMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleInt32ComplexMessageMapMessage>();
    qRegisterMetaType<SimpleInt32ComplexMessageMapMessageRepeated>();
    qRegisterMetaType<SimpleInt32ComplexMessageMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::int32, ComplexMessage>();
}
SimpleInt32ComplexMessageMapMessage::SimpleInt32ComplexMessageMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleInt32ComplexMessageMapMessage::SimpleInt32ComplexMessageMapMessage(const SimpleInt32ComplexMessageMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleInt32ComplexMessageMapMessage &SimpleInt32ComplexMessageMapMessage::operator =(const SimpleInt32ComplexMessageMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleInt32ComplexMessageMapMessage::SimpleInt32ComplexMessageMapMessage(SimpleInt32ComplexMessageMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleInt32ComplexMessageMapMessage &SimpleInt32ComplexMessageMapMessage::operator =(SimpleInt32ComplexMessageMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleInt32ComplexMessageMapMessage::operator ==(const SimpleInt32ComplexMessageMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleInt32ComplexMessageMapMessage::operator !=(const SimpleInt32ComplexMessageMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleInt32ComplexMessageMapMessage::setMapField(const SimpleInt32ComplexMessageMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleInt64ComplexMessageMapMessage::~SimpleInt64ComplexMessageMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleInt64ComplexMessageMapMessage_uint_data;
    const char qt_protobuf_SimpleInt64ComplexMessageMapMessage_char_data[10];
} qt_protobuf_SimpleInt64ComplexMessageMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        4, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleInt64ComplexMessageMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleInt64ComplexMessageMapMessage_metadata.data
};

void SimpleInt64ComplexMessageMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleInt64ComplexMessageMapMessage>();
    qRegisterMetaType<SimpleInt64ComplexMessageMapMessageRepeated>();
    qRegisterMetaType<SimpleInt64ComplexMessageMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::int64, ComplexMessage>();
}
SimpleInt64ComplexMessageMapMessage::SimpleInt64ComplexMessageMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleInt64ComplexMessageMapMessage::SimpleInt64ComplexMessageMapMessage(const SimpleInt64ComplexMessageMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleInt64ComplexMessageMapMessage &SimpleInt64ComplexMessageMapMessage::operator =(const SimpleInt64ComplexMessageMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleInt64ComplexMessageMapMessage::SimpleInt64ComplexMessageMapMessage(SimpleInt64ComplexMessageMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleInt64ComplexMessageMapMessage &SimpleInt64ComplexMessageMapMessage::operator =(SimpleInt64ComplexMessageMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleInt64ComplexMessageMapMessage::operator ==(const SimpleInt64ComplexMessageMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleInt64ComplexMessageMapMessage::operator !=(const SimpleInt64ComplexMessageMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleInt64ComplexMessageMapMessage::setMapField(const SimpleInt64ComplexMessageMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleUInt32ComplexMessageMapMessage::~SimpleUInt32ComplexMessageMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUInt32ComplexMessageMapMessage_uint_data;
    const char qt_protobuf_SimpleUInt32ComplexMessageMapMessage_char_data[10];
} qt_protobuf_SimpleUInt32ComplexMessageMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        5, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUInt32ComplexMessageMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleUInt32ComplexMessageMapMessage_metadata.data
};

void SimpleUInt32ComplexMessageMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleUInt32ComplexMessageMapMessage>();
    qRegisterMetaType<SimpleUInt32ComplexMessageMapMessageRepeated>();
    qRegisterMetaType<SimpleUInt32ComplexMessageMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::uint32, ComplexMessage>();
}
SimpleUInt32ComplexMessageMapMessage::SimpleUInt32ComplexMessageMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleUInt32ComplexMessageMapMessage::SimpleUInt32ComplexMessageMapMessage(const SimpleUInt32ComplexMessageMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleUInt32ComplexMessageMapMessage &SimpleUInt32ComplexMessageMapMessage::operator =(const SimpleUInt32ComplexMessageMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleUInt32ComplexMessageMapMessage::SimpleUInt32ComplexMessageMapMessage(SimpleUInt32ComplexMessageMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleUInt32ComplexMessageMapMessage &SimpleUInt32ComplexMessageMapMessage::operator =(SimpleUInt32ComplexMessageMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleUInt32ComplexMessageMapMessage::operator ==(const SimpleUInt32ComplexMessageMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleUInt32ComplexMessageMapMessage::operator !=(const SimpleUInt32ComplexMessageMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleUInt32ComplexMessageMapMessage::setMapField(const SimpleUInt32ComplexMessageMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleUInt64ComplexMessageMapMessage::~SimpleUInt64ComplexMessageMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUInt64ComplexMessageMapMessage_uint_data;
    const char qt_protobuf_SimpleUInt64ComplexMessageMapMessage_char_data[10];
} qt_protobuf_SimpleUInt64ComplexMessageMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        6, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUInt64ComplexMessageMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleUInt64ComplexMessageMapMessage_metadata.data
};

void SimpleUInt64ComplexMessageMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleUInt64ComplexMessageMapMessage>();
    qRegisterMetaType<SimpleUInt64ComplexMessageMapMessageRepeated>();
    qRegisterMetaType<SimpleUInt64ComplexMessageMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::uint64, ComplexMessage>();
}
SimpleUInt64ComplexMessageMapMessage::SimpleUInt64ComplexMessageMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleUInt64ComplexMessageMapMessage::SimpleUInt64ComplexMessageMapMessage(const SimpleUInt64ComplexMessageMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleUInt64ComplexMessageMapMessage &SimpleUInt64ComplexMessageMapMessage::operator =(const SimpleUInt64ComplexMessageMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleUInt64ComplexMessageMapMessage::SimpleUInt64ComplexMessageMapMessage(SimpleUInt64ComplexMessageMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleUInt64ComplexMessageMapMessage &SimpleUInt64ComplexMessageMapMessage::operator =(SimpleUInt64ComplexMessageMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleUInt64ComplexMessageMapMessage::operator ==(const SimpleUInt64ComplexMessageMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleUInt64ComplexMessageMapMessage::operator !=(const SimpleUInt64ComplexMessageMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleUInt64ComplexMessageMapMessage::setMapField(const SimpleUInt64ComplexMessageMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleFixed32ComplexMessageMapMessage::~SimpleFixed32ComplexMessageMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixed32ComplexMessageMapMessage_uint_data;
    const char qt_protobuf_SimpleFixed32ComplexMessageMapMessage_char_data[10];
} qt_protobuf_SimpleFixed32ComplexMessageMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        7, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixed32ComplexMessageMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleFixed32ComplexMessageMapMessage_metadata.data
};

void SimpleFixed32ComplexMessageMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleFixed32ComplexMessageMapMessage>();
    qRegisterMetaType<SimpleFixed32ComplexMessageMapMessageRepeated>();
    qRegisterMetaType<SimpleFixed32ComplexMessageMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::fixed32, ComplexMessage>();
}
SimpleFixed32ComplexMessageMapMessage::SimpleFixed32ComplexMessageMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleFixed32ComplexMessageMapMessage::SimpleFixed32ComplexMessageMapMessage(const SimpleFixed32ComplexMessageMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleFixed32ComplexMessageMapMessage &SimpleFixed32ComplexMessageMapMessage::operator =(const SimpleFixed32ComplexMessageMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleFixed32ComplexMessageMapMessage::SimpleFixed32ComplexMessageMapMessage(SimpleFixed32ComplexMessageMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleFixed32ComplexMessageMapMessage &SimpleFixed32ComplexMessageMapMessage::operator =(SimpleFixed32ComplexMessageMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleFixed32ComplexMessageMapMessage::operator ==(const SimpleFixed32ComplexMessageMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleFixed32ComplexMessageMapMessage::operator !=(const SimpleFixed32ComplexMessageMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleFixed32ComplexMessageMapMessage::setMapField(const SimpleFixed32ComplexMessageMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleFixed64ComplexMessageMapMessage::~SimpleFixed64ComplexMessageMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixed64ComplexMessageMapMessage_uint_data;
    const char qt_protobuf_SimpleFixed64ComplexMessageMapMessage_char_data[10];
} qt_protobuf_SimpleFixed64ComplexMessageMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        8, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixed64ComplexMessageMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleFixed64ComplexMessageMapMessage_metadata.data
};

void SimpleFixed64ComplexMessageMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleFixed64ComplexMessageMapMessage>();
    qRegisterMetaType<SimpleFixed64ComplexMessageMapMessageRepeated>();
    qRegisterMetaType<SimpleFixed64ComplexMessageMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::fixed64, ComplexMessage>();
}
SimpleFixed64ComplexMessageMapMessage::SimpleFixed64ComplexMessageMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleFixed64ComplexMessageMapMessage::SimpleFixed64ComplexMessageMapMessage(const SimpleFixed64ComplexMessageMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleFixed64ComplexMessageMapMessage &SimpleFixed64ComplexMessageMapMessage::operator =(const SimpleFixed64ComplexMessageMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleFixed64ComplexMessageMapMessage::SimpleFixed64ComplexMessageMapMessage(SimpleFixed64ComplexMessageMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleFixed64ComplexMessageMapMessage &SimpleFixed64ComplexMessageMapMessage::operator =(SimpleFixed64ComplexMessageMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleFixed64ComplexMessageMapMessage::operator ==(const SimpleFixed64ComplexMessageMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleFixed64ComplexMessageMapMessage::operator !=(const SimpleFixed64ComplexMessageMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleFixed64ComplexMessageMapMessage::setMapField(const SimpleFixed64ComplexMessageMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSFixed32ComplexMessageMapMessage::~SimpleSFixed32ComplexMessageMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixed32ComplexMessageMapMessage_uint_data;
    const char qt_protobuf_SimpleSFixed32ComplexMessageMapMessage_char_data[10];
} qt_protobuf_SimpleSFixed32ComplexMessageMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        9, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixed32ComplexMessageMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSFixed32ComplexMessageMapMessage_metadata.data
};

void SimpleSFixed32ComplexMessageMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSFixed32ComplexMessageMapMessage>();
    qRegisterMetaType<SimpleSFixed32ComplexMessageMapMessageRepeated>();
    qRegisterMetaType<SimpleSFixed32ComplexMessageMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sfixed32, ComplexMessage>();
}
SimpleSFixed32ComplexMessageMapMessage::SimpleSFixed32ComplexMessageMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSFixed32ComplexMessageMapMessage::SimpleSFixed32ComplexMessageMapMessage(const SimpleSFixed32ComplexMessageMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSFixed32ComplexMessageMapMessage &SimpleSFixed32ComplexMessageMapMessage::operator =(const SimpleSFixed32ComplexMessageMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSFixed32ComplexMessageMapMessage::SimpleSFixed32ComplexMessageMapMessage(SimpleSFixed32ComplexMessageMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSFixed32ComplexMessageMapMessage &SimpleSFixed32ComplexMessageMapMessage::operator =(SimpleSFixed32ComplexMessageMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSFixed32ComplexMessageMapMessage::operator ==(const SimpleSFixed32ComplexMessageMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSFixed32ComplexMessageMapMessage::operator !=(const SimpleSFixed32ComplexMessageMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSFixed32ComplexMessageMapMessage::setMapField(const SimpleSFixed32ComplexMessageMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleSFixed64ComplexMessageMapMessage::~SimpleSFixed64ComplexMessageMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixed64ComplexMessageMapMessage_uint_data;
    const char qt_protobuf_SimpleSFixed64ComplexMessageMapMessage_char_data[10];
} qt_protobuf_SimpleSFixed64ComplexMessageMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        10, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixed64ComplexMessageMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleSFixed64ComplexMessageMapMessage_metadata.data
};

void SimpleSFixed64ComplexMessageMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleSFixed64ComplexMessageMapMessage>();
    qRegisterMetaType<SimpleSFixed64ComplexMessageMapMessageRepeated>();
    qRegisterMetaType<SimpleSFixed64ComplexMessageMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QtProtobuf::sfixed64, ComplexMessage>();
}
SimpleSFixed64ComplexMessageMapMessage::SimpleSFixed64ComplexMessageMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleSFixed64ComplexMessageMapMessage::SimpleSFixed64ComplexMessageMapMessage(const SimpleSFixed64ComplexMessageMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleSFixed64ComplexMessageMapMessage &SimpleSFixed64ComplexMessageMapMessage::operator =(const SimpleSFixed64ComplexMessageMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleSFixed64ComplexMessageMapMessage::SimpleSFixed64ComplexMessageMapMessage(SimpleSFixed64ComplexMessageMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleSFixed64ComplexMessageMapMessage &SimpleSFixed64ComplexMessageMapMessage::operator =(SimpleSFixed64ComplexMessageMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleSFixed64ComplexMessageMapMessage::operator ==(const SimpleSFixed64ComplexMessageMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleSFixed64ComplexMessageMapMessage::operator !=(const SimpleSFixed64ComplexMessageMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleSFixed64ComplexMessageMapMessage::setMapField(const SimpleSFixed64ComplexMessageMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

SimpleStringComplexMessageMapMessage::~SimpleStringComplexMessageMapMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleStringComplexMessageMapMessage_uint_data;
    const char qt_protobuf_SimpleStringComplexMessageMapMessage_char_data[10];
} qt_protobuf_SimpleStringComplexMessageMapMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = mapField */
        9, /* = end-of-string-marker */
        // Field numbers:
        13, /* = mapField */
        // Property indices:
        1, /* = mapField */
    },
    // char_data
    "mapField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleStringComplexMessageMapMessage::propertyOrdering = {
    &qt_protobuf_SimpleStringComplexMessageMapMessage_metadata.data
};

void SimpleStringComplexMessageMapMessage::registerTypes()
{
    qRegisterMetaType<SimpleStringComplexMessageMapMessage>();
    qRegisterMetaType<SimpleStringComplexMessageMapMessageRepeated>();
    qRegisterMetaType<SimpleStringComplexMessageMapMessage::MapFieldEntry>();
    qRegisterProtobufMapType<QString, ComplexMessage>();
}
SimpleStringComplexMessageMapMessage::SimpleStringComplexMessageMapMessage(QObject *parent) : QObject(parent)
{
}
SimpleStringComplexMessageMapMessage::SimpleStringComplexMessageMapMessage(const SimpleStringComplexMessageMapMessage &other) : QObject()
{
    setMapField(other.m_mapField);
}
SimpleStringComplexMessageMapMessage &SimpleStringComplexMessageMapMessage::operator =(const SimpleStringComplexMessageMapMessage &other)
{
    setMapField(other.m_mapField);
    return *this;
}
SimpleStringComplexMessageMapMessage::SimpleStringComplexMessageMapMessage(SimpleStringComplexMessageMapMessage &&other) noexcept : QObject()
{
    m_mapField = std::move(other.m_mapField);
    other.mapFieldChanged();
}
SimpleStringComplexMessageMapMessage &SimpleStringComplexMessageMapMessage::operator =(SimpleStringComplexMessageMapMessage &&other) noexcept
{
    if (m_mapField != other.m_mapField) {
        m_mapField = std::move(other.m_mapField);
        mapFieldChanged();
        other.mapFieldChanged();
    }
    return *this;
}
bool SimpleStringComplexMessageMapMessage::operator ==(const SimpleStringComplexMessageMapMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_mapField, other.m_mapField);
}
bool SimpleStringComplexMessageMapMessage::operator !=(const SimpleStringComplexMessageMapMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleStringComplexMessageMapMessage::setMapField(const SimpleStringComplexMessageMapMessage::MapFieldEntry &mapField)
{
    if (m_mapField != mapField) {
        m_mapField = mapField;
        mapFieldChanged();
    }
}

} // namespace qtprotobufnamespace::tests

#include "moc_mapmessages.qpb.cpp"
