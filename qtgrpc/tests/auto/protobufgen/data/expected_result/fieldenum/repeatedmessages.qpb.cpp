/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#include "repeatedmessages.qpb.h"
#include <QProtobufSerializer>

namespace qtprotobufnamespace::tests {
RepeatedStringMessage::~RepeatedStringMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_RepeatedStringMessage_uint_data;
    const char qt_protobuf_RepeatedStringMessage_char_data[20];
} qt_protobuf_RepeatedStringMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testRepeatedString */
        19, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedString */
        // Property indices:
        1, /* = testRepeatedString */
    },
    // char_data
    "testRepeatedString\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedStringMessage::propertyOrdering = {
    &qt_protobuf_RepeatedStringMessage_metadata.data
};

void RepeatedStringMessage::registerTypes()
{
    qRegisterMetaType<RepeatedStringMessage>();
    qRegisterMetaType<RepeatedStringMessageRepeated>();
}
RepeatedStringMessage::RepeatedStringMessage(QObject *parent) : QObject(parent)
{
}
RepeatedStringMessage::RepeatedStringMessage(const RepeatedStringMessage &other) : QObject()
{
    setTestRepeatedString(other.m_testRepeatedString);
}
RepeatedStringMessage &RepeatedStringMessage::operator =(const RepeatedStringMessage &other)
{
    setTestRepeatedString(other.m_testRepeatedString);
    return *this;
}
RepeatedStringMessage::RepeatedStringMessage(RepeatedStringMessage &&other) noexcept : QObject()
{
    m_testRepeatedString = std::move(other.m_testRepeatedString);
    other.testRepeatedStringChanged();
}
RepeatedStringMessage &RepeatedStringMessage::operator =(RepeatedStringMessage &&other) noexcept
{
    if (m_testRepeatedString != other.m_testRepeatedString) {
        m_testRepeatedString = std::move(other.m_testRepeatedString);
        testRepeatedStringChanged();
        other.testRepeatedStringChanged();
    }
    return *this;
}
bool RepeatedStringMessage::operator ==(const RepeatedStringMessage &other) const
{
    return m_testRepeatedString == other.m_testRepeatedString;
}
bool RepeatedStringMessage::operator !=(const RepeatedStringMessage &other) const
{
    return !this->operator ==(other);
}

void RepeatedStringMessage::setTestRepeatedString(const QStringList &testRepeatedString)
{
    if (m_testRepeatedString != testRepeatedString) {
        m_testRepeatedString = testRepeatedString;
        testRepeatedStringChanged();
    }
}

RepeatedDoubleMessage::~RepeatedDoubleMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_RepeatedDoubleMessage_uint_data;
    const char qt_protobuf_RepeatedDoubleMessage_char_data[20];
} qt_protobuf_RepeatedDoubleMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testRepeatedDouble */
        19, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedDouble */
        // Property indices:
        1, /* = testRepeatedDouble */
    },
    // char_data
    "testRepeatedDouble\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedDoubleMessage::propertyOrdering = {
    &qt_protobuf_RepeatedDoubleMessage_metadata.data
};

void RepeatedDoubleMessage::registerTypes()
{
    qRegisterMetaType<RepeatedDoubleMessage>();
    qRegisterMetaType<RepeatedDoubleMessageRepeated>();
}
RepeatedDoubleMessage::RepeatedDoubleMessage(QObject *parent) : QObject(parent)
{
}
RepeatedDoubleMessage::RepeatedDoubleMessage(const RepeatedDoubleMessage &other) : QObject()
{
    setTestRepeatedDouble(other.m_testRepeatedDouble);
}
RepeatedDoubleMessage &RepeatedDoubleMessage::operator =(const RepeatedDoubleMessage &other)
{
    setTestRepeatedDouble(other.m_testRepeatedDouble);
    return *this;
}
RepeatedDoubleMessage::RepeatedDoubleMessage(RepeatedDoubleMessage &&other) noexcept : QObject()
{
    m_testRepeatedDouble = std::move(other.m_testRepeatedDouble);
    other.testRepeatedDoubleChanged();
}
RepeatedDoubleMessage &RepeatedDoubleMessage::operator =(RepeatedDoubleMessage &&other) noexcept
{
    if (m_testRepeatedDouble != other.m_testRepeatedDouble) {
        m_testRepeatedDouble = std::move(other.m_testRepeatedDouble);
        testRepeatedDoubleChanged();
        other.testRepeatedDoubleChanged();
    }
    return *this;
}
bool RepeatedDoubleMessage::operator ==(const RepeatedDoubleMessage &other) const
{
    return m_testRepeatedDouble == other.m_testRepeatedDouble;
}
bool RepeatedDoubleMessage::operator !=(const RepeatedDoubleMessage &other) const
{
    return !this->operator ==(other);
}

RepeatedBytesMessage::~RepeatedBytesMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_RepeatedBytesMessage_uint_data;
    const char qt_protobuf_RepeatedBytesMessage_char_data[19];
} qt_protobuf_RepeatedBytesMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testRepeatedBytes */
        18, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedBytes */
        // Property indices:
        1, /* = testRepeatedBytes */
    },
    // char_data
    "testRepeatedBytes\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedBytesMessage::propertyOrdering = {
    &qt_protobuf_RepeatedBytesMessage_metadata.data
};

void RepeatedBytesMessage::registerTypes()
{
    qRegisterMetaType<RepeatedBytesMessage>();
    qRegisterMetaType<RepeatedBytesMessageRepeated>();
}
RepeatedBytesMessage::RepeatedBytesMessage(QObject *parent) : QObject(parent)
{
}
RepeatedBytesMessage::RepeatedBytesMessage(const RepeatedBytesMessage &other) : QObject()
{
    setTestRepeatedBytes(other.m_testRepeatedBytes);
}
RepeatedBytesMessage &RepeatedBytesMessage::operator =(const RepeatedBytesMessage &other)
{
    setTestRepeatedBytes(other.m_testRepeatedBytes);
    return *this;
}
RepeatedBytesMessage::RepeatedBytesMessage(RepeatedBytesMessage &&other) noexcept : QObject()
{
    m_testRepeatedBytes = std::move(other.m_testRepeatedBytes);
    other.testRepeatedBytesChanged();
}
RepeatedBytesMessage &RepeatedBytesMessage::operator =(RepeatedBytesMessage &&other) noexcept
{
    if (m_testRepeatedBytes != other.m_testRepeatedBytes) {
        m_testRepeatedBytes = std::move(other.m_testRepeatedBytes);
        testRepeatedBytesChanged();
        other.testRepeatedBytesChanged();
    }
    return *this;
}
bool RepeatedBytesMessage::operator ==(const RepeatedBytesMessage &other) const
{
    return m_testRepeatedBytes == other.m_testRepeatedBytes;
}
bool RepeatedBytesMessage::operator !=(const RepeatedBytesMessage &other) const
{
    return !this->operator ==(other);
}

void RepeatedBytesMessage::setTestRepeatedBytes(const QByteArrayList &testRepeatedBytes)
{
    if (m_testRepeatedBytes != testRepeatedBytes) {
        m_testRepeatedBytes = testRepeatedBytes;
        testRepeatedBytesChanged();
    }
}

RepeatedFloatMessage::~RepeatedFloatMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_RepeatedFloatMessage_uint_data;
    const char qt_protobuf_RepeatedFloatMessage_char_data[19];
} qt_protobuf_RepeatedFloatMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testRepeatedFloat */
        18, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedFloat */
        // Property indices:
        1, /* = testRepeatedFloat */
    },
    // char_data
    "testRepeatedFloat\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedFloatMessage::propertyOrdering = {
    &qt_protobuf_RepeatedFloatMessage_metadata.data
};

void RepeatedFloatMessage::registerTypes()
{
    qRegisterMetaType<RepeatedFloatMessage>();
    qRegisterMetaType<RepeatedFloatMessageRepeated>();
}
RepeatedFloatMessage::RepeatedFloatMessage(QObject *parent) : QObject(parent)
{
}
RepeatedFloatMessage::RepeatedFloatMessage(const RepeatedFloatMessage &other) : QObject()
{
    setTestRepeatedFloat(other.m_testRepeatedFloat);
}
RepeatedFloatMessage &RepeatedFloatMessage::operator =(const RepeatedFloatMessage &other)
{
    setTestRepeatedFloat(other.m_testRepeatedFloat);
    return *this;
}
RepeatedFloatMessage::RepeatedFloatMessage(RepeatedFloatMessage &&other) noexcept : QObject()
{
    m_testRepeatedFloat = std::move(other.m_testRepeatedFloat);
    other.testRepeatedFloatChanged();
}
RepeatedFloatMessage &RepeatedFloatMessage::operator =(RepeatedFloatMessage &&other) noexcept
{
    if (m_testRepeatedFloat != other.m_testRepeatedFloat) {
        m_testRepeatedFloat = std::move(other.m_testRepeatedFloat);
        testRepeatedFloatChanged();
        other.testRepeatedFloatChanged();
    }
    return *this;
}
bool RepeatedFloatMessage::operator ==(const RepeatedFloatMessage &other) const
{
    return m_testRepeatedFloat == other.m_testRepeatedFloat;
}
bool RepeatedFloatMessage::operator !=(const RepeatedFloatMessage &other) const
{
    return !this->operator ==(other);
}

RepeatedComplexMessage::~RepeatedComplexMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_RepeatedComplexMessage_uint_data;
    const char qt_protobuf_RepeatedComplexMessage_char_data[21];
} qt_protobuf_RepeatedComplexMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testRepeatedComplex */
        20, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedComplex */
        // Property indices:
        1, /* = testRepeatedComplex */
    },
    // char_data
    "testRepeatedComplex\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedComplexMessage::propertyOrdering = {
    &qt_protobuf_RepeatedComplexMessage_metadata.data
};

void RepeatedComplexMessage::registerTypes()
{
    qRegisterMetaType<RepeatedComplexMessage>();
    qRegisterMetaType<RepeatedComplexMessageRepeated>();
}
RepeatedComplexMessage::RepeatedComplexMessage(QObject *parent) : QObject(parent)
{
}
RepeatedComplexMessage::RepeatedComplexMessage(const RepeatedComplexMessage &other) : QObject()
{
    setTestRepeatedComplex(other.m_testRepeatedComplex);
}
RepeatedComplexMessage &RepeatedComplexMessage::operator =(const RepeatedComplexMessage &other)
{
    setTestRepeatedComplex(other.m_testRepeatedComplex);
    return *this;
}
RepeatedComplexMessage::RepeatedComplexMessage(RepeatedComplexMessage &&other) noexcept : QObject()
{
    m_testRepeatedComplex = std::move(other.m_testRepeatedComplex);
    other.testRepeatedComplexChanged();
}
RepeatedComplexMessage &RepeatedComplexMessage::operator =(RepeatedComplexMessage &&other) noexcept
{
    if (m_testRepeatedComplex != other.m_testRepeatedComplex) {
        m_testRepeatedComplex = std::move(other.m_testRepeatedComplex);
        testRepeatedComplexChanged();
        other.testRepeatedComplexChanged();
    }
    return *this;
}
bool RepeatedComplexMessage::operator ==(const RepeatedComplexMessage &other) const
{
    return QtProtobuf::repeatedValueCompare(m_testRepeatedComplex, other.m_testRepeatedComplex);
}
bool RepeatedComplexMessage::operator !=(const RepeatedComplexMessage &other) const
{
    return !this->operator ==(other);
}

void RepeatedComplexMessage::setTestRepeatedComplex(const ComplexMessageRepeated &testRepeatedComplex)
{
    if (m_testRepeatedComplex != testRepeatedComplex) {
        m_testRepeatedComplex = testRepeatedComplex;
        testRepeatedComplexChanged();
    }
}

RepeatedSIntMessage::~RepeatedSIntMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_RepeatedSIntMessage_uint_data;
    const char qt_protobuf_RepeatedSIntMessage_char_data[17];
} qt_protobuf_RepeatedSIntMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testRepeatedInt */
        16, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        1, /* = testRepeatedInt */
    },
    // char_data
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedSIntMessage::propertyOrdering = {
    &qt_protobuf_RepeatedSIntMessage_metadata.data
};

void RepeatedSIntMessage::registerTypes()
{
    qRegisterMetaType<RepeatedSIntMessage>();
    qRegisterMetaType<RepeatedSIntMessageRepeated>();
}
RepeatedSIntMessage::RepeatedSIntMessage(QObject *parent) : QObject(parent)
{
}
RepeatedSIntMessage::RepeatedSIntMessage(const RepeatedSIntMessage &other) : QObject()
{
    setTestRepeatedInt(other.m_testRepeatedInt);
}
RepeatedSIntMessage &RepeatedSIntMessage::operator =(const RepeatedSIntMessage &other)
{
    setTestRepeatedInt(other.m_testRepeatedInt);
    return *this;
}
RepeatedSIntMessage::RepeatedSIntMessage(RepeatedSIntMessage &&other) noexcept : QObject()
{
    m_testRepeatedInt = std::move(other.m_testRepeatedInt);
    other.testRepeatedIntChanged();
}
RepeatedSIntMessage &RepeatedSIntMessage::operator =(RepeatedSIntMessage &&other) noexcept
{
    if (m_testRepeatedInt != other.m_testRepeatedInt) {
        m_testRepeatedInt = std::move(other.m_testRepeatedInt);
        testRepeatedIntChanged();
        other.testRepeatedIntChanged();
    }
    return *this;
}
bool RepeatedSIntMessage::operator ==(const RepeatedSIntMessage &other) const
{
    return m_testRepeatedInt == other.m_testRepeatedInt;
}
bool RepeatedSIntMessage::operator !=(const RepeatedSIntMessage &other) const
{
    return !this->operator ==(other);
}

RepeatedIntMessage::~RepeatedIntMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_RepeatedIntMessage_uint_data;
    const char qt_protobuf_RepeatedIntMessage_char_data[17];
} qt_protobuf_RepeatedIntMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testRepeatedInt */
        16, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        1, /* = testRepeatedInt */
    },
    // char_data
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedIntMessage::propertyOrdering = {
    &qt_protobuf_RepeatedIntMessage_metadata.data
};

void RepeatedIntMessage::registerTypes()
{
    qRegisterMetaType<RepeatedIntMessage>();
    qRegisterMetaType<RepeatedIntMessageRepeated>();
}
RepeatedIntMessage::RepeatedIntMessage(QObject *parent) : QObject(parent)
{
}
RepeatedIntMessage::RepeatedIntMessage(const RepeatedIntMessage &other) : QObject()
{
    setTestRepeatedInt(other.m_testRepeatedInt);
}
RepeatedIntMessage &RepeatedIntMessage::operator =(const RepeatedIntMessage &other)
{
    setTestRepeatedInt(other.m_testRepeatedInt);
    return *this;
}
RepeatedIntMessage::RepeatedIntMessage(RepeatedIntMessage &&other) noexcept : QObject()
{
    m_testRepeatedInt = std::move(other.m_testRepeatedInt);
    other.testRepeatedIntChanged();
}
RepeatedIntMessage &RepeatedIntMessage::operator =(RepeatedIntMessage &&other) noexcept
{
    if (m_testRepeatedInt != other.m_testRepeatedInt) {
        m_testRepeatedInt = std::move(other.m_testRepeatedInt);
        testRepeatedIntChanged();
        other.testRepeatedIntChanged();
    }
    return *this;
}
bool RepeatedIntMessage::operator ==(const RepeatedIntMessage &other) const
{
    return m_testRepeatedInt == other.m_testRepeatedInt;
}
bool RepeatedIntMessage::operator !=(const RepeatedIntMessage &other) const
{
    return !this->operator ==(other);
}

RepeatedUIntMessage::~RepeatedUIntMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_RepeatedUIntMessage_uint_data;
    const char qt_protobuf_RepeatedUIntMessage_char_data[17];
} qt_protobuf_RepeatedUIntMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testRepeatedInt */
        16, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        1, /* = testRepeatedInt */
    },
    // char_data
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedUIntMessage::propertyOrdering = {
    &qt_protobuf_RepeatedUIntMessage_metadata.data
};

void RepeatedUIntMessage::registerTypes()
{
    qRegisterMetaType<RepeatedUIntMessage>();
    qRegisterMetaType<RepeatedUIntMessageRepeated>();
}
RepeatedUIntMessage::RepeatedUIntMessage(QObject *parent) : QObject(parent)
{
}
RepeatedUIntMessage::RepeatedUIntMessage(const RepeatedUIntMessage &other) : QObject()
{
    setTestRepeatedInt(other.m_testRepeatedInt);
}
RepeatedUIntMessage &RepeatedUIntMessage::operator =(const RepeatedUIntMessage &other)
{
    setTestRepeatedInt(other.m_testRepeatedInt);
    return *this;
}
RepeatedUIntMessage::RepeatedUIntMessage(RepeatedUIntMessage &&other) noexcept : QObject()
{
    m_testRepeatedInt = std::move(other.m_testRepeatedInt);
    other.testRepeatedIntChanged();
}
RepeatedUIntMessage &RepeatedUIntMessage::operator =(RepeatedUIntMessage &&other) noexcept
{
    if (m_testRepeatedInt != other.m_testRepeatedInt) {
        m_testRepeatedInt = std::move(other.m_testRepeatedInt);
        testRepeatedIntChanged();
        other.testRepeatedIntChanged();
    }
    return *this;
}
bool RepeatedUIntMessage::operator ==(const RepeatedUIntMessage &other) const
{
    return m_testRepeatedInt == other.m_testRepeatedInt;
}
bool RepeatedUIntMessage::operator !=(const RepeatedUIntMessage &other) const
{
    return !this->operator ==(other);
}

RepeatedSInt64Message::~RepeatedSInt64Message() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_RepeatedSInt64Message_uint_data;
    const char qt_protobuf_RepeatedSInt64Message_char_data[17];
} qt_protobuf_RepeatedSInt64Message_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testRepeatedInt */
        16, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        1, /* = testRepeatedInt */
    },
    // char_data
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedSInt64Message::propertyOrdering = {
    &qt_protobuf_RepeatedSInt64Message_metadata.data
};

void RepeatedSInt64Message::registerTypes()
{
    qRegisterMetaType<RepeatedSInt64Message>();
    qRegisterMetaType<RepeatedSInt64MessageRepeated>();
}
RepeatedSInt64Message::RepeatedSInt64Message(QObject *parent) : QObject(parent)
{
}
RepeatedSInt64Message::RepeatedSInt64Message(const RepeatedSInt64Message &other) : QObject()
{
    setTestRepeatedInt(other.m_testRepeatedInt);
}
RepeatedSInt64Message &RepeatedSInt64Message::operator =(const RepeatedSInt64Message &other)
{
    setTestRepeatedInt(other.m_testRepeatedInt);
    return *this;
}
RepeatedSInt64Message::RepeatedSInt64Message(RepeatedSInt64Message &&other) noexcept : QObject()
{
    m_testRepeatedInt = std::move(other.m_testRepeatedInt);
    other.testRepeatedIntChanged();
}
RepeatedSInt64Message &RepeatedSInt64Message::operator =(RepeatedSInt64Message &&other) noexcept
{
    if (m_testRepeatedInt != other.m_testRepeatedInt) {
        m_testRepeatedInt = std::move(other.m_testRepeatedInt);
        testRepeatedIntChanged();
        other.testRepeatedIntChanged();
    }
    return *this;
}
bool RepeatedSInt64Message::operator ==(const RepeatedSInt64Message &other) const
{
    return m_testRepeatedInt == other.m_testRepeatedInt;
}
bool RepeatedSInt64Message::operator !=(const RepeatedSInt64Message &other) const
{
    return !this->operator ==(other);
}

RepeatedInt64Message::~RepeatedInt64Message() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_RepeatedInt64Message_uint_data;
    const char qt_protobuf_RepeatedInt64Message_char_data[17];
} qt_protobuf_RepeatedInt64Message_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testRepeatedInt */
        16, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        1, /* = testRepeatedInt */
    },
    // char_data
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedInt64Message::propertyOrdering = {
    &qt_protobuf_RepeatedInt64Message_metadata.data
};

void RepeatedInt64Message::registerTypes()
{
    qRegisterMetaType<RepeatedInt64Message>();
    qRegisterMetaType<RepeatedInt64MessageRepeated>();
}
RepeatedInt64Message::RepeatedInt64Message(QObject *parent) : QObject(parent)
{
}
RepeatedInt64Message::RepeatedInt64Message(const RepeatedInt64Message &other) : QObject()
{
    setTestRepeatedInt(other.m_testRepeatedInt);
}
RepeatedInt64Message &RepeatedInt64Message::operator =(const RepeatedInt64Message &other)
{
    setTestRepeatedInt(other.m_testRepeatedInt);
    return *this;
}
RepeatedInt64Message::RepeatedInt64Message(RepeatedInt64Message &&other) noexcept : QObject()
{
    m_testRepeatedInt = std::move(other.m_testRepeatedInt);
    other.testRepeatedIntChanged();
}
RepeatedInt64Message &RepeatedInt64Message::operator =(RepeatedInt64Message &&other) noexcept
{
    if (m_testRepeatedInt != other.m_testRepeatedInt) {
        m_testRepeatedInt = std::move(other.m_testRepeatedInt);
        testRepeatedIntChanged();
        other.testRepeatedIntChanged();
    }
    return *this;
}
bool RepeatedInt64Message::operator ==(const RepeatedInt64Message &other) const
{
    return m_testRepeatedInt == other.m_testRepeatedInt;
}
bool RepeatedInt64Message::operator !=(const RepeatedInt64Message &other) const
{
    return !this->operator ==(other);
}

RepeatedUInt64Message::~RepeatedUInt64Message() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_RepeatedUInt64Message_uint_data;
    const char qt_protobuf_RepeatedUInt64Message_char_data[17];
} qt_protobuf_RepeatedUInt64Message_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testRepeatedInt */
        16, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        1, /* = testRepeatedInt */
    },
    // char_data
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedUInt64Message::propertyOrdering = {
    &qt_protobuf_RepeatedUInt64Message_metadata.data
};

void RepeatedUInt64Message::registerTypes()
{
    qRegisterMetaType<RepeatedUInt64Message>();
    qRegisterMetaType<RepeatedUInt64MessageRepeated>();
}
RepeatedUInt64Message::RepeatedUInt64Message(QObject *parent) : QObject(parent)
{
}
RepeatedUInt64Message::RepeatedUInt64Message(const RepeatedUInt64Message &other) : QObject()
{
    setTestRepeatedInt(other.m_testRepeatedInt);
}
RepeatedUInt64Message &RepeatedUInt64Message::operator =(const RepeatedUInt64Message &other)
{
    setTestRepeatedInt(other.m_testRepeatedInt);
    return *this;
}
RepeatedUInt64Message::RepeatedUInt64Message(RepeatedUInt64Message &&other) noexcept : QObject()
{
    m_testRepeatedInt = std::move(other.m_testRepeatedInt);
    other.testRepeatedIntChanged();
}
RepeatedUInt64Message &RepeatedUInt64Message::operator =(RepeatedUInt64Message &&other) noexcept
{
    if (m_testRepeatedInt != other.m_testRepeatedInt) {
        m_testRepeatedInt = std::move(other.m_testRepeatedInt);
        testRepeatedIntChanged();
        other.testRepeatedIntChanged();
    }
    return *this;
}
bool RepeatedUInt64Message::operator ==(const RepeatedUInt64Message &other) const
{
    return m_testRepeatedInt == other.m_testRepeatedInt;
}
bool RepeatedUInt64Message::operator !=(const RepeatedUInt64Message &other) const
{
    return !this->operator ==(other);
}

RepeatedFixedIntMessage::~RepeatedFixedIntMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_RepeatedFixedIntMessage_uint_data;
    const char qt_protobuf_RepeatedFixedIntMessage_char_data[17];
} qt_protobuf_RepeatedFixedIntMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testRepeatedInt */
        16, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        1, /* = testRepeatedInt */
    },
    // char_data
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedFixedIntMessage::propertyOrdering = {
    &qt_protobuf_RepeatedFixedIntMessage_metadata.data
};

void RepeatedFixedIntMessage::registerTypes()
{
    qRegisterMetaType<RepeatedFixedIntMessage>();
    qRegisterMetaType<RepeatedFixedIntMessageRepeated>();
}
RepeatedFixedIntMessage::RepeatedFixedIntMessage(QObject *parent) : QObject(parent)
{
}
RepeatedFixedIntMessage::RepeatedFixedIntMessage(const RepeatedFixedIntMessage &other) : QObject()
{
    setTestRepeatedInt(other.m_testRepeatedInt);
}
RepeatedFixedIntMessage &RepeatedFixedIntMessage::operator =(const RepeatedFixedIntMessage &other)
{
    setTestRepeatedInt(other.m_testRepeatedInt);
    return *this;
}
RepeatedFixedIntMessage::RepeatedFixedIntMessage(RepeatedFixedIntMessage &&other) noexcept : QObject()
{
    m_testRepeatedInt = std::move(other.m_testRepeatedInt);
    other.testRepeatedIntChanged();
}
RepeatedFixedIntMessage &RepeatedFixedIntMessage::operator =(RepeatedFixedIntMessage &&other) noexcept
{
    if (m_testRepeatedInt != other.m_testRepeatedInt) {
        m_testRepeatedInt = std::move(other.m_testRepeatedInt);
        testRepeatedIntChanged();
        other.testRepeatedIntChanged();
    }
    return *this;
}
bool RepeatedFixedIntMessage::operator ==(const RepeatedFixedIntMessage &other) const
{
    return m_testRepeatedInt == other.m_testRepeatedInt;
}
bool RepeatedFixedIntMessage::operator !=(const RepeatedFixedIntMessage &other) const
{
    return !this->operator ==(other);
}

RepeatedSFixedIntMessage::~RepeatedSFixedIntMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_RepeatedSFixedIntMessage_uint_data;
    const char qt_protobuf_RepeatedSFixedIntMessage_char_data[17];
} qt_protobuf_RepeatedSFixedIntMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testRepeatedInt */
        16, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        1, /* = testRepeatedInt */
    },
    // char_data
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedSFixedIntMessage::propertyOrdering = {
    &qt_protobuf_RepeatedSFixedIntMessage_metadata.data
};

void RepeatedSFixedIntMessage::registerTypes()
{
    qRegisterMetaType<RepeatedSFixedIntMessage>();
    qRegisterMetaType<RepeatedSFixedIntMessageRepeated>();
}
RepeatedSFixedIntMessage::RepeatedSFixedIntMessage(QObject *parent) : QObject(parent)
{
}
RepeatedSFixedIntMessage::RepeatedSFixedIntMessage(const RepeatedSFixedIntMessage &other) : QObject()
{
    setTestRepeatedInt(other.m_testRepeatedInt);
}
RepeatedSFixedIntMessage &RepeatedSFixedIntMessage::operator =(const RepeatedSFixedIntMessage &other)
{
    setTestRepeatedInt(other.m_testRepeatedInt);
    return *this;
}
RepeatedSFixedIntMessage::RepeatedSFixedIntMessage(RepeatedSFixedIntMessage &&other) noexcept : QObject()
{
    m_testRepeatedInt = std::move(other.m_testRepeatedInt);
    other.testRepeatedIntChanged();
}
RepeatedSFixedIntMessage &RepeatedSFixedIntMessage::operator =(RepeatedSFixedIntMessage &&other) noexcept
{
    if (m_testRepeatedInt != other.m_testRepeatedInt) {
        m_testRepeatedInt = std::move(other.m_testRepeatedInt);
        testRepeatedIntChanged();
        other.testRepeatedIntChanged();
    }
    return *this;
}
bool RepeatedSFixedIntMessage::operator ==(const RepeatedSFixedIntMessage &other) const
{
    return m_testRepeatedInt == other.m_testRepeatedInt;
}
bool RepeatedSFixedIntMessage::operator !=(const RepeatedSFixedIntMessage &other) const
{
    return !this->operator ==(other);
}

RepeatedFixedInt64Message::~RepeatedFixedInt64Message() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_RepeatedFixedInt64Message_uint_data;
    const char qt_protobuf_RepeatedFixedInt64Message_char_data[17];
} qt_protobuf_RepeatedFixedInt64Message_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testRepeatedInt */
        16, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        1, /* = testRepeatedInt */
    },
    // char_data
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedFixedInt64Message::propertyOrdering = {
    &qt_protobuf_RepeatedFixedInt64Message_metadata.data
};

void RepeatedFixedInt64Message::registerTypes()
{
    qRegisterMetaType<RepeatedFixedInt64Message>();
    qRegisterMetaType<RepeatedFixedInt64MessageRepeated>();
}
RepeatedFixedInt64Message::RepeatedFixedInt64Message(QObject *parent) : QObject(parent)
{
}
RepeatedFixedInt64Message::RepeatedFixedInt64Message(const RepeatedFixedInt64Message &other) : QObject()
{
    setTestRepeatedInt(other.m_testRepeatedInt);
}
RepeatedFixedInt64Message &RepeatedFixedInt64Message::operator =(const RepeatedFixedInt64Message &other)
{
    setTestRepeatedInt(other.m_testRepeatedInt);
    return *this;
}
RepeatedFixedInt64Message::RepeatedFixedInt64Message(RepeatedFixedInt64Message &&other) noexcept : QObject()
{
    m_testRepeatedInt = std::move(other.m_testRepeatedInt);
    other.testRepeatedIntChanged();
}
RepeatedFixedInt64Message &RepeatedFixedInt64Message::operator =(RepeatedFixedInt64Message &&other) noexcept
{
    if (m_testRepeatedInt != other.m_testRepeatedInt) {
        m_testRepeatedInt = std::move(other.m_testRepeatedInt);
        testRepeatedIntChanged();
        other.testRepeatedIntChanged();
    }
    return *this;
}
bool RepeatedFixedInt64Message::operator ==(const RepeatedFixedInt64Message &other) const
{
    return m_testRepeatedInt == other.m_testRepeatedInt;
}
bool RepeatedFixedInt64Message::operator !=(const RepeatedFixedInt64Message &other) const
{
    return !this->operator ==(other);
}

RepeatedSFixedInt64Message::~RepeatedSFixedInt64Message() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_RepeatedSFixedInt64Message_uint_data;
    const char qt_protobuf_RepeatedSFixedInt64Message_char_data[17];
} qt_protobuf_RepeatedSFixedInt64Message_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testRepeatedInt */
        16, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        1, /* = testRepeatedInt */
    },
    // char_data
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedSFixedInt64Message::propertyOrdering = {
    &qt_protobuf_RepeatedSFixedInt64Message_metadata.data
};

void RepeatedSFixedInt64Message::registerTypes()
{
    qRegisterMetaType<RepeatedSFixedInt64Message>();
    qRegisterMetaType<RepeatedSFixedInt64MessageRepeated>();
}
RepeatedSFixedInt64Message::RepeatedSFixedInt64Message(QObject *parent) : QObject(parent)
{
}
RepeatedSFixedInt64Message::RepeatedSFixedInt64Message(const RepeatedSFixedInt64Message &other) : QObject()
{
    setTestRepeatedInt(other.m_testRepeatedInt);
}
RepeatedSFixedInt64Message &RepeatedSFixedInt64Message::operator =(const RepeatedSFixedInt64Message &other)
{
    setTestRepeatedInt(other.m_testRepeatedInt);
    return *this;
}
RepeatedSFixedInt64Message::RepeatedSFixedInt64Message(RepeatedSFixedInt64Message &&other) noexcept : QObject()
{
    m_testRepeatedInt = std::move(other.m_testRepeatedInt);
    other.testRepeatedIntChanged();
}
RepeatedSFixedInt64Message &RepeatedSFixedInt64Message::operator =(RepeatedSFixedInt64Message &&other) noexcept
{
    if (m_testRepeatedInt != other.m_testRepeatedInt) {
        m_testRepeatedInt = std::move(other.m_testRepeatedInt);
        testRepeatedIntChanged();
        other.testRepeatedIntChanged();
    }
    return *this;
}
bool RepeatedSFixedInt64Message::operator ==(const RepeatedSFixedInt64Message &other) const
{
    return m_testRepeatedInt == other.m_testRepeatedInt;
}
bool RepeatedSFixedInt64Message::operator !=(const RepeatedSFixedInt64Message &other) const
{
    return !this->operator ==(other);
}

RepeatedBoolMessage::~RepeatedBoolMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_RepeatedBoolMessage_uint_data;
    const char qt_protobuf_RepeatedBoolMessage_char_data[18];
} qt_protobuf_RepeatedBoolMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testRepeatedBool */
        17, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedBool */
        // Property indices:
        1, /* = testRepeatedBool */
    },
    // char_data
    "testRepeatedBool\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedBoolMessage::propertyOrdering = {
    &qt_protobuf_RepeatedBoolMessage_metadata.data
};

void RepeatedBoolMessage::registerTypes()
{
    qRegisterMetaType<RepeatedBoolMessage>();
    qRegisterMetaType<RepeatedBoolMessageRepeated>();
}
RepeatedBoolMessage::RepeatedBoolMessage(QObject *parent) : QObject(parent)
{
}
RepeatedBoolMessage::RepeatedBoolMessage(const RepeatedBoolMessage &other) : QObject()
{
    setTestRepeatedBool(other.m_testRepeatedBool);
}
RepeatedBoolMessage &RepeatedBoolMessage::operator =(const RepeatedBoolMessage &other)
{
    setTestRepeatedBool(other.m_testRepeatedBool);
    return *this;
}
RepeatedBoolMessage::RepeatedBoolMessage(RepeatedBoolMessage &&other) noexcept : QObject()
{
    m_testRepeatedBool = std::move(other.m_testRepeatedBool);
    other.testRepeatedBoolChanged();
}
RepeatedBoolMessage &RepeatedBoolMessage::operator =(RepeatedBoolMessage &&other) noexcept
{
    if (m_testRepeatedBool != other.m_testRepeatedBool) {
        m_testRepeatedBool = std::move(other.m_testRepeatedBool);
        testRepeatedBoolChanged();
        other.testRepeatedBoolChanged();
    }
    return *this;
}
bool RepeatedBoolMessage::operator ==(const RepeatedBoolMessage &other) const
{
    return m_testRepeatedBool == other.m_testRepeatedBool;
}
bool RepeatedBoolMessage::operator !=(const RepeatedBoolMessage &other) const
{
    return !this->operator ==(other);
}

} // namespace qtprotobufnamespace::tests

#include "moc_repeatedmessages.qpb.cpp"
