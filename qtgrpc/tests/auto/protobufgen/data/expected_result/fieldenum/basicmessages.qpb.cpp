/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#include "basicmessages.qpb.h"
#include <QProtobufSerializer>

namespace qtprotobufnamespace::tests {
EmptyMessage::~EmptyMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 1> qt_protobuf_EmptyMessage_uint_data;
    const char qt_protobuf_EmptyMessage_char_data[1];
} qt_protobuf_EmptyMessage_metadata {
    // data
    {
        0, /* = version */
        0, /* = num fields */
        1, /* = field number offset */
        1, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = end-of-string-marker */
        // Field numbers:
        // Property indices:
    },
    // char_data
    ""
};

const QtProtobufPrivate::QProtobufPropertyOrdering EmptyMessage::propertyOrdering = {
    &qt_protobuf_EmptyMessage_metadata.data
};

void EmptyMessage::registerTypes()
{
    qRegisterMetaType<EmptyMessage>();
    qRegisterMetaType<EmptyMessageRepeated>();
}
EmptyMessage::EmptyMessage(QObject *parent) : QObject(parent)
{
}
EmptyMessage::EmptyMessage(const EmptyMessage &) : QObject() {}
EmptyMessage &EmptyMessage::operator =(const EmptyMessage &) { return *this; }
EmptyMessage::EmptyMessage(EmptyMessage &&) noexcept : QObject() {}
EmptyMessage &EmptyMessage::operator =(EmptyMessage &&) noexcept { return *this; }
bool EmptyMessage::operator ==(const EmptyMessage &) const
{
    return true;
}

bool EmptyMessage::operator !=(const EmptyMessage &other) const
{
    return !this->operator ==(other);
}

SimpleBoolMessage::~SimpleBoolMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleBoolMessage_uint_data;
    const char qt_protobuf_SimpleBoolMessage_char_data[15];
} qt_protobuf_SimpleBoolMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testFieldBool */
        14, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testFieldBool */
        // Property indices:
        1, /* = testFieldBool */
    },
    // char_data
    "testFieldBool\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleBoolMessage::propertyOrdering = {
    &qt_protobuf_SimpleBoolMessage_metadata.data
};

void SimpleBoolMessage::registerTypes()
{
    qRegisterMetaType<SimpleBoolMessage>();
    qRegisterMetaType<SimpleBoolMessageRepeated>();
}
SimpleBoolMessage::SimpleBoolMessage(QObject *parent) : QObject(parent),
    m_testFieldBool(false)
{
}
SimpleBoolMessage::SimpleBoolMessage(const SimpleBoolMessage &other) : QObject()
{
    setTestFieldBool(other.m_testFieldBool);
}
SimpleBoolMessage &SimpleBoolMessage::operator =(const SimpleBoolMessage &other)
{
    setTestFieldBool(other.m_testFieldBool);
    return *this;
}
SimpleBoolMessage::SimpleBoolMessage(SimpleBoolMessage &&other) noexcept : QObject()
{
    setTestFieldBool(std::exchange(other.m_testFieldBool, 0));
    other.testFieldBoolChanged();
}
SimpleBoolMessage &SimpleBoolMessage::operator =(SimpleBoolMessage &&other) noexcept
{
    setTestFieldBool(std::exchange(other.m_testFieldBool, 0));
    other.testFieldBoolChanged();
    return *this;
}
bool SimpleBoolMessage::operator ==(const SimpleBoolMessage &other) const
{
    return m_testFieldBool == other.m_testFieldBool;
}
bool SimpleBoolMessage::operator !=(const SimpleBoolMessage &other) const
{
    return !this->operator ==(other);
}

SimpleIntMessage::~SimpleIntMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleIntMessage_uint_data;
    const char qt_protobuf_SimpleIntMessage_char_data[14];
} qt_protobuf_SimpleIntMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testFieldInt */
        13, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testFieldInt */
        // Property indices:
        1, /* = testFieldInt */
    },
    // char_data
    "testFieldInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleIntMessage::propertyOrdering = {
    &qt_protobuf_SimpleIntMessage_metadata.data
};

void SimpleIntMessage::registerTypes()
{
    qRegisterMetaType<SimpleIntMessage>();
    qRegisterMetaType<SimpleIntMessageRepeated>();
}
SimpleIntMessage::SimpleIntMessage(QObject *parent) : QObject(parent),
    m_testFieldInt(0)
{
}
SimpleIntMessage::SimpleIntMessage(const SimpleIntMessage &other) : QObject()
{
    setTestFieldInt(other.m_testFieldInt);
}
SimpleIntMessage &SimpleIntMessage::operator =(const SimpleIntMessage &other)
{
    setTestFieldInt(other.m_testFieldInt);
    return *this;
}
SimpleIntMessage::SimpleIntMessage(SimpleIntMessage &&other) noexcept : QObject()
{
    setTestFieldInt(std::exchange(other.m_testFieldInt, 0));
    other.testFieldIntChanged();
}
SimpleIntMessage &SimpleIntMessage::operator =(SimpleIntMessage &&other) noexcept
{
    setTestFieldInt(std::exchange(other.m_testFieldInt, 0));
    other.testFieldIntChanged();
    return *this;
}
bool SimpleIntMessage::operator ==(const SimpleIntMessage &other) const
{
    return m_testFieldInt == other.m_testFieldInt;
}
bool SimpleIntMessage::operator !=(const SimpleIntMessage &other) const
{
    return !this->operator ==(other);
}

SimpleSIntMessage::~SimpleSIntMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSIntMessage_uint_data;
    const char qt_protobuf_SimpleSIntMessage_char_data[14];
} qt_protobuf_SimpleSIntMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testFieldInt */
        13, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testFieldInt */
        // Property indices:
        1, /* = testFieldInt */
    },
    // char_data
    "testFieldInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSIntMessage::propertyOrdering = {
    &qt_protobuf_SimpleSIntMessage_metadata.data
};

void SimpleSIntMessage::registerTypes()
{
    qRegisterMetaType<SimpleSIntMessage>();
    qRegisterMetaType<SimpleSIntMessageRepeated>();
}
SimpleSIntMessage::SimpleSIntMessage(QObject *parent) : QObject(parent),
    m_testFieldInt(0)
{
}
SimpleSIntMessage::SimpleSIntMessage(const SimpleSIntMessage &other) : QObject()
{
    setTestFieldInt(other.m_testFieldInt);
}
SimpleSIntMessage &SimpleSIntMessage::operator =(const SimpleSIntMessage &other)
{
    setTestFieldInt(other.m_testFieldInt);
    return *this;
}
SimpleSIntMessage::SimpleSIntMessage(SimpleSIntMessage &&other) noexcept : QObject()
{
    setTestFieldInt(std::exchange(other.m_testFieldInt, 0));
    other.testFieldIntChanged();
}
SimpleSIntMessage &SimpleSIntMessage::operator =(SimpleSIntMessage &&other) noexcept
{
    setTestFieldInt(std::exchange(other.m_testFieldInt, 0));
    other.testFieldIntChanged();
    return *this;
}
bool SimpleSIntMessage::operator ==(const SimpleSIntMessage &other) const
{
    return m_testFieldInt == other.m_testFieldInt;
}
bool SimpleSIntMessage::operator !=(const SimpleSIntMessage &other) const
{
    return !this->operator ==(other);
}

SimpleUIntMessage::~SimpleUIntMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUIntMessage_uint_data;
    const char qt_protobuf_SimpleUIntMessage_char_data[14];
} qt_protobuf_SimpleUIntMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testFieldInt */
        13, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testFieldInt */
        // Property indices:
        1, /* = testFieldInt */
    },
    // char_data
    "testFieldInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUIntMessage::propertyOrdering = {
    &qt_protobuf_SimpleUIntMessage_metadata.data
};

void SimpleUIntMessage::registerTypes()
{
    qRegisterMetaType<SimpleUIntMessage>();
    qRegisterMetaType<SimpleUIntMessageRepeated>();
}
SimpleUIntMessage::SimpleUIntMessage(QObject *parent) : QObject(parent),
    m_testFieldInt(0)
{
}
SimpleUIntMessage::SimpleUIntMessage(const SimpleUIntMessage &other) : QObject()
{
    setTestFieldInt(other.m_testFieldInt);
}
SimpleUIntMessage &SimpleUIntMessage::operator =(const SimpleUIntMessage &other)
{
    setTestFieldInt(other.m_testFieldInt);
    return *this;
}
SimpleUIntMessage::SimpleUIntMessage(SimpleUIntMessage &&other) noexcept : QObject()
{
    setTestFieldInt(std::exchange(other.m_testFieldInt, 0));
    other.testFieldIntChanged();
}
SimpleUIntMessage &SimpleUIntMessage::operator =(SimpleUIntMessage &&other) noexcept
{
    setTestFieldInt(std::exchange(other.m_testFieldInt, 0));
    other.testFieldIntChanged();
    return *this;
}
bool SimpleUIntMessage::operator ==(const SimpleUIntMessage &other) const
{
    return m_testFieldInt == other.m_testFieldInt;
}
bool SimpleUIntMessage::operator !=(const SimpleUIntMessage &other) const
{
    return !this->operator ==(other);
}

SimpleInt64Message::~SimpleInt64Message() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleInt64Message_uint_data;
    const char qt_protobuf_SimpleInt64Message_char_data[14];
} qt_protobuf_SimpleInt64Message_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testFieldInt */
        13, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testFieldInt */
        // Property indices:
        1, /* = testFieldInt */
    },
    // char_data
    "testFieldInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleInt64Message::propertyOrdering = {
    &qt_protobuf_SimpleInt64Message_metadata.data
};

void SimpleInt64Message::registerTypes()
{
    qRegisterMetaType<SimpleInt64Message>();
    qRegisterMetaType<SimpleInt64MessageRepeated>();
}
SimpleInt64Message::SimpleInt64Message(QObject *parent) : QObject(parent),
    m_testFieldInt(0)
{
}
SimpleInt64Message::SimpleInt64Message(const SimpleInt64Message &other) : QObject()
{
    setTestFieldInt(other.m_testFieldInt);
}
SimpleInt64Message &SimpleInt64Message::operator =(const SimpleInt64Message &other)
{
    setTestFieldInt(other.m_testFieldInt);
    return *this;
}
SimpleInt64Message::SimpleInt64Message(SimpleInt64Message &&other) noexcept : QObject()
{
    setTestFieldInt(std::exchange(other.m_testFieldInt, 0));
    other.testFieldIntChanged();
}
SimpleInt64Message &SimpleInt64Message::operator =(SimpleInt64Message &&other) noexcept
{
    setTestFieldInt(std::exchange(other.m_testFieldInt, 0));
    other.testFieldIntChanged();
    return *this;
}
bool SimpleInt64Message::operator ==(const SimpleInt64Message &other) const
{
    return m_testFieldInt == other.m_testFieldInt;
}
bool SimpleInt64Message::operator !=(const SimpleInt64Message &other) const
{
    return !this->operator ==(other);
}

SimpleSInt64Message::~SimpleSInt64Message() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSInt64Message_uint_data;
    const char qt_protobuf_SimpleSInt64Message_char_data[14];
} qt_protobuf_SimpleSInt64Message_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testFieldInt */
        13, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testFieldInt */
        // Property indices:
        1, /* = testFieldInt */
    },
    // char_data
    "testFieldInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSInt64Message::propertyOrdering = {
    &qt_protobuf_SimpleSInt64Message_metadata.data
};

void SimpleSInt64Message::registerTypes()
{
    qRegisterMetaType<SimpleSInt64Message>();
    qRegisterMetaType<SimpleSInt64MessageRepeated>();
}
SimpleSInt64Message::SimpleSInt64Message(QObject *parent) : QObject(parent),
    m_testFieldInt(0)
{
}
SimpleSInt64Message::SimpleSInt64Message(const SimpleSInt64Message &other) : QObject()
{
    setTestFieldInt(other.m_testFieldInt);
}
SimpleSInt64Message &SimpleSInt64Message::operator =(const SimpleSInt64Message &other)
{
    setTestFieldInt(other.m_testFieldInt);
    return *this;
}
SimpleSInt64Message::SimpleSInt64Message(SimpleSInt64Message &&other) noexcept : QObject()
{
    setTestFieldInt(std::exchange(other.m_testFieldInt, 0));
    other.testFieldIntChanged();
}
SimpleSInt64Message &SimpleSInt64Message::operator =(SimpleSInt64Message &&other) noexcept
{
    setTestFieldInt(std::exchange(other.m_testFieldInt, 0));
    other.testFieldIntChanged();
    return *this;
}
bool SimpleSInt64Message::operator ==(const SimpleSInt64Message &other) const
{
    return m_testFieldInt == other.m_testFieldInt;
}
bool SimpleSInt64Message::operator !=(const SimpleSInt64Message &other) const
{
    return !this->operator ==(other);
}

SimpleUInt64Message::~SimpleUInt64Message() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleUInt64Message_uint_data;
    const char qt_protobuf_SimpleUInt64Message_char_data[14];
} qt_protobuf_SimpleUInt64Message_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testFieldInt */
        13, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testFieldInt */
        // Property indices:
        1, /* = testFieldInt */
    },
    // char_data
    "testFieldInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleUInt64Message::propertyOrdering = {
    &qt_protobuf_SimpleUInt64Message_metadata.data
};

void SimpleUInt64Message::registerTypes()
{
    qRegisterMetaType<SimpleUInt64Message>();
    qRegisterMetaType<SimpleUInt64MessageRepeated>();
}
SimpleUInt64Message::SimpleUInt64Message(QObject *parent) : QObject(parent),
    m_testFieldInt(0)
{
}
SimpleUInt64Message::SimpleUInt64Message(const SimpleUInt64Message &other) : QObject()
{
    setTestFieldInt(other.m_testFieldInt);
}
SimpleUInt64Message &SimpleUInt64Message::operator =(const SimpleUInt64Message &other)
{
    setTestFieldInt(other.m_testFieldInt);
    return *this;
}
SimpleUInt64Message::SimpleUInt64Message(SimpleUInt64Message &&other) noexcept : QObject()
{
    setTestFieldInt(std::exchange(other.m_testFieldInt, 0));
    other.testFieldIntChanged();
}
SimpleUInt64Message &SimpleUInt64Message::operator =(SimpleUInt64Message &&other) noexcept
{
    setTestFieldInt(std::exchange(other.m_testFieldInt, 0));
    other.testFieldIntChanged();
    return *this;
}
bool SimpleUInt64Message::operator ==(const SimpleUInt64Message &other) const
{
    return m_testFieldInt == other.m_testFieldInt;
}
bool SimpleUInt64Message::operator !=(const SimpleUInt64Message &other) const
{
    return !this->operator ==(other);
}

SimpleStringMessage::~SimpleStringMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleStringMessage_uint_data;
    const char qt_protobuf_SimpleStringMessage_char_data[17];
} qt_protobuf_SimpleStringMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testFieldString */
        16, /* = end-of-string-marker */
        // Field numbers:
        6, /* = testFieldString */
        // Property indices:
        1, /* = testFieldString */
    },
    // char_data
    "testFieldString\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleStringMessage::propertyOrdering = {
    &qt_protobuf_SimpleStringMessage_metadata.data
};

void SimpleStringMessage::registerTypes()
{
    qRegisterMetaType<SimpleStringMessage>();
    qRegisterMetaType<SimpleStringMessageRepeated>();
}
SimpleStringMessage::SimpleStringMessage(QObject *parent) : QObject(parent)
{
}
SimpleStringMessage::SimpleStringMessage(const SimpleStringMessage &other) : QObject()
{
    setTestFieldString(other.m_testFieldString);
}
SimpleStringMessage &SimpleStringMessage::operator =(const SimpleStringMessage &other)
{
    setTestFieldString(other.m_testFieldString);
    return *this;
}
SimpleStringMessage::SimpleStringMessage(SimpleStringMessage &&other) noexcept : QObject()
{
    m_testFieldString = std::move(other.m_testFieldString);
    other.testFieldStringChanged();
}
SimpleStringMessage &SimpleStringMessage::operator =(SimpleStringMessage &&other) noexcept
{
    if (m_testFieldString != other.m_testFieldString) {
        m_testFieldString = std::move(other.m_testFieldString);
        testFieldStringChanged();
        other.testFieldStringChanged();
    }
    return *this;
}
bool SimpleStringMessage::operator ==(const SimpleStringMessage &other) const
{
    return m_testFieldString == other.m_testFieldString;
}
bool SimpleStringMessage::operator !=(const SimpleStringMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleStringMessage::setTestFieldString(const QString &testFieldString)
{
    if (m_testFieldString != testFieldString) {
        m_testFieldString = testFieldString;
        testFieldStringChanged();
    }
}

SimpleFloatMessage::~SimpleFloatMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFloatMessage_uint_data;
    const char qt_protobuf_SimpleFloatMessage_char_data[16];
} qt_protobuf_SimpleFloatMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testFieldFloat */
        15, /* = end-of-string-marker */
        // Field numbers:
        7, /* = testFieldFloat */
        // Property indices:
        1, /* = testFieldFloat */
    },
    // char_data
    "testFieldFloat\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFloatMessage::propertyOrdering = {
    &qt_protobuf_SimpleFloatMessage_metadata.data
};

void SimpleFloatMessage::registerTypes()
{
    qRegisterMetaType<SimpleFloatMessage>();
    qRegisterMetaType<SimpleFloatMessageRepeated>();
}
SimpleFloatMessage::SimpleFloatMessage(QObject *parent) : QObject(parent),
    m_testFieldFloat(0.0)
{
}
SimpleFloatMessage::SimpleFloatMessage(const SimpleFloatMessage &other) : QObject()
{
    setTestFieldFloat(other.m_testFieldFloat);
}
SimpleFloatMessage &SimpleFloatMessage::operator =(const SimpleFloatMessage &other)
{
    setTestFieldFloat(other.m_testFieldFloat);
    return *this;
}
SimpleFloatMessage::SimpleFloatMessage(SimpleFloatMessage &&other) noexcept : QObject()
{
    setTestFieldFloat(std::exchange(other.m_testFieldFloat, 0));
    other.testFieldFloatChanged();
}
SimpleFloatMessage &SimpleFloatMessage::operator =(SimpleFloatMessage &&other) noexcept
{
    setTestFieldFloat(std::exchange(other.m_testFieldFloat, 0));
    other.testFieldFloatChanged();
    return *this;
}
bool SimpleFloatMessage::operator ==(const SimpleFloatMessage &other) const
{
    return m_testFieldFloat == other.m_testFieldFloat;
}
bool SimpleFloatMessage::operator !=(const SimpleFloatMessage &other) const
{
    return !this->operator ==(other);
}

SimpleDoubleMessage::~SimpleDoubleMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleDoubleMessage_uint_data;
    const char qt_protobuf_SimpleDoubleMessage_char_data[17];
} qt_protobuf_SimpleDoubleMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testFieldDouble */
        16, /* = end-of-string-marker */
        // Field numbers:
        8, /* = testFieldDouble */
        // Property indices:
        1, /* = testFieldDouble */
    },
    // char_data
    "testFieldDouble\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleDoubleMessage::propertyOrdering = {
    &qt_protobuf_SimpleDoubleMessage_metadata.data
};

void SimpleDoubleMessage::registerTypes()
{
    qRegisterMetaType<SimpleDoubleMessage>();
    qRegisterMetaType<SimpleDoubleMessageRepeated>();
}
SimpleDoubleMessage::SimpleDoubleMessage(QObject *parent) : QObject(parent),
    m_testFieldDouble(0.0)
{
}
SimpleDoubleMessage::SimpleDoubleMessage(const SimpleDoubleMessage &other) : QObject()
{
    setTestFieldDouble(other.m_testFieldDouble);
}
SimpleDoubleMessage &SimpleDoubleMessage::operator =(const SimpleDoubleMessage &other)
{
    setTestFieldDouble(other.m_testFieldDouble);
    return *this;
}
SimpleDoubleMessage::SimpleDoubleMessage(SimpleDoubleMessage &&other) noexcept : QObject()
{
    setTestFieldDouble(std::exchange(other.m_testFieldDouble, 0));
    other.testFieldDoubleChanged();
}
SimpleDoubleMessage &SimpleDoubleMessage::operator =(SimpleDoubleMessage &&other) noexcept
{
    setTestFieldDouble(std::exchange(other.m_testFieldDouble, 0));
    other.testFieldDoubleChanged();
    return *this;
}
bool SimpleDoubleMessage::operator ==(const SimpleDoubleMessage &other) const
{
    return m_testFieldDouble == other.m_testFieldDouble;
}
bool SimpleDoubleMessage::operator !=(const SimpleDoubleMessage &other) const
{
    return !this->operator ==(other);
}

SimpleBytesMessage::~SimpleBytesMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleBytesMessage_uint_data;
    const char qt_protobuf_SimpleBytesMessage_char_data[16];
} qt_protobuf_SimpleBytesMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testFieldBytes */
        15, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testFieldBytes */
        // Property indices:
        1, /* = testFieldBytes */
    },
    // char_data
    "testFieldBytes\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleBytesMessage::propertyOrdering = {
    &qt_protobuf_SimpleBytesMessage_metadata.data
};

void SimpleBytesMessage::registerTypes()
{
    qRegisterMetaType<SimpleBytesMessage>();
    qRegisterMetaType<SimpleBytesMessageRepeated>();
}
SimpleBytesMessage::SimpleBytesMessage(QObject *parent) : QObject(parent)
{
}
SimpleBytesMessage::SimpleBytesMessage(const SimpleBytesMessage &other) : QObject()
{
    setTestFieldBytes(other.m_testFieldBytes);
}
SimpleBytesMessage &SimpleBytesMessage::operator =(const SimpleBytesMessage &other)
{
    setTestFieldBytes(other.m_testFieldBytes);
    return *this;
}
SimpleBytesMessage::SimpleBytesMessage(SimpleBytesMessage &&other) noexcept : QObject()
{
    m_testFieldBytes = std::move(other.m_testFieldBytes);
    other.testFieldBytesChanged();
}
SimpleBytesMessage &SimpleBytesMessage::operator =(SimpleBytesMessage &&other) noexcept
{
    if (m_testFieldBytes != other.m_testFieldBytes) {
        m_testFieldBytes = std::move(other.m_testFieldBytes);
        testFieldBytesChanged();
        other.testFieldBytesChanged();
    }
    return *this;
}
bool SimpleBytesMessage::operator ==(const SimpleBytesMessage &other) const
{
    return m_testFieldBytes == other.m_testFieldBytes;
}
bool SimpleBytesMessage::operator !=(const SimpleBytesMessage &other) const
{
    return !this->operator ==(other);
}

void SimpleBytesMessage::setTestFieldBytes(const QByteArray &testFieldBytes)
{
    if (m_testFieldBytes != testFieldBytes) {
        m_testFieldBytes = testFieldBytes;
        testFieldBytesChanged();
    }
}

SimpleFixedInt32Message::~SimpleFixedInt32Message() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixedInt32Message_uint_data;
    const char qt_protobuf_SimpleFixedInt32Message_char_data[21];
} qt_protobuf_SimpleFixedInt32Message_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testFieldFixedInt32 */
        20, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testFieldFixedInt32 */
        // Property indices:
        1, /* = testFieldFixedInt32 */
    },
    // char_data
    "testFieldFixedInt32\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixedInt32Message::propertyOrdering = {
    &qt_protobuf_SimpleFixedInt32Message_metadata.data
};

void SimpleFixedInt32Message::registerTypes()
{
    qRegisterMetaType<SimpleFixedInt32Message>();
    qRegisterMetaType<SimpleFixedInt32MessageRepeated>();
}
SimpleFixedInt32Message::SimpleFixedInt32Message(QObject *parent) : QObject(parent),
    m_testFieldFixedInt32(0)
{
}
SimpleFixedInt32Message::SimpleFixedInt32Message(const SimpleFixedInt32Message &other) : QObject()
{
    setTestFieldFixedInt32(other.m_testFieldFixedInt32);
}
SimpleFixedInt32Message &SimpleFixedInt32Message::operator =(const SimpleFixedInt32Message &other)
{
    setTestFieldFixedInt32(other.m_testFieldFixedInt32);
    return *this;
}
SimpleFixedInt32Message::SimpleFixedInt32Message(SimpleFixedInt32Message &&other) noexcept : QObject()
{
    setTestFieldFixedInt32(std::exchange(other.m_testFieldFixedInt32, 0));
    other.testFieldFixedInt32Changed();
}
SimpleFixedInt32Message &SimpleFixedInt32Message::operator =(SimpleFixedInt32Message &&other) noexcept
{
    setTestFieldFixedInt32(std::exchange(other.m_testFieldFixedInt32, 0));
    other.testFieldFixedInt32Changed();
    return *this;
}
bool SimpleFixedInt32Message::operator ==(const SimpleFixedInt32Message &other) const
{
    return m_testFieldFixedInt32 == other.m_testFieldFixedInt32;
}
bool SimpleFixedInt32Message::operator !=(const SimpleFixedInt32Message &other) const
{
    return !this->operator ==(other);
}

SimpleFixedInt64Message::~SimpleFixedInt64Message() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleFixedInt64Message_uint_data;
    const char qt_protobuf_SimpleFixedInt64Message_char_data[21];
} qt_protobuf_SimpleFixedInt64Message_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testFieldFixedInt64 */
        20, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testFieldFixedInt64 */
        // Property indices:
        1, /* = testFieldFixedInt64 */
    },
    // char_data
    "testFieldFixedInt64\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFixedInt64Message::propertyOrdering = {
    &qt_protobuf_SimpleFixedInt64Message_metadata.data
};

void SimpleFixedInt64Message::registerTypes()
{
    qRegisterMetaType<SimpleFixedInt64Message>();
    qRegisterMetaType<SimpleFixedInt64MessageRepeated>();
}
SimpleFixedInt64Message::SimpleFixedInt64Message(QObject *parent) : QObject(parent),
    m_testFieldFixedInt64(0)
{
}
SimpleFixedInt64Message::SimpleFixedInt64Message(const SimpleFixedInt64Message &other) : QObject()
{
    setTestFieldFixedInt64(other.m_testFieldFixedInt64);
}
SimpleFixedInt64Message &SimpleFixedInt64Message::operator =(const SimpleFixedInt64Message &other)
{
    setTestFieldFixedInt64(other.m_testFieldFixedInt64);
    return *this;
}
SimpleFixedInt64Message::SimpleFixedInt64Message(SimpleFixedInt64Message &&other) noexcept : QObject()
{
    setTestFieldFixedInt64(std::exchange(other.m_testFieldFixedInt64, 0));
    other.testFieldFixedInt64Changed();
}
SimpleFixedInt64Message &SimpleFixedInt64Message::operator =(SimpleFixedInt64Message &&other) noexcept
{
    setTestFieldFixedInt64(std::exchange(other.m_testFieldFixedInt64, 0));
    other.testFieldFixedInt64Changed();
    return *this;
}
bool SimpleFixedInt64Message::operator ==(const SimpleFixedInt64Message &other) const
{
    return m_testFieldFixedInt64 == other.m_testFieldFixedInt64;
}
bool SimpleFixedInt64Message::operator !=(const SimpleFixedInt64Message &other) const
{
    return !this->operator ==(other);
}

SimpleSFixedInt32Message::~SimpleSFixedInt32Message() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixedInt32Message_uint_data;
    const char qt_protobuf_SimpleSFixedInt32Message_char_data[21];
} qt_protobuf_SimpleSFixedInt32Message_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testFieldFixedInt32 */
        20, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testFieldFixedInt32 */
        // Property indices:
        1, /* = testFieldFixedInt32 */
    },
    // char_data
    "testFieldFixedInt32\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixedInt32Message::propertyOrdering = {
    &qt_protobuf_SimpleSFixedInt32Message_metadata.data
};

void SimpleSFixedInt32Message::registerTypes()
{
    qRegisterMetaType<SimpleSFixedInt32Message>();
    qRegisterMetaType<SimpleSFixedInt32MessageRepeated>();
}
SimpleSFixedInt32Message::SimpleSFixedInt32Message(QObject *parent) : QObject(parent)
{
}
SimpleSFixedInt32Message::SimpleSFixedInt32Message(const SimpleSFixedInt32Message &other) : QObject()
{
    setTestFieldFixedInt32(other.m_testFieldFixedInt32);
}
SimpleSFixedInt32Message &SimpleSFixedInt32Message::operator =(const SimpleSFixedInt32Message &other)
{
    setTestFieldFixedInt32(other.m_testFieldFixedInt32);
    return *this;
}
SimpleSFixedInt32Message::SimpleSFixedInt32Message(SimpleSFixedInt32Message &&other) noexcept : QObject()
{
    setTestFieldFixedInt32(std::exchange(other.m_testFieldFixedInt32, 0));
    other.testFieldFixedInt32Changed();
}
SimpleSFixedInt32Message &SimpleSFixedInt32Message::operator =(SimpleSFixedInt32Message &&other) noexcept
{
    setTestFieldFixedInt32(std::exchange(other.m_testFieldFixedInt32, 0));
    other.testFieldFixedInt32Changed();
    return *this;
}
bool SimpleSFixedInt32Message::operator ==(const SimpleSFixedInt32Message &other) const
{
    return m_testFieldFixedInt32 == other.m_testFieldFixedInt32;
}
bool SimpleSFixedInt32Message::operator !=(const SimpleSFixedInt32Message &other) const
{
    return !this->operator ==(other);
}

SimpleSFixedInt64Message::~SimpleSFixedInt64Message() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 4> qt_protobuf_SimpleSFixedInt64Message_uint_data;
    const char qt_protobuf_SimpleSFixedInt64Message_char_data[21];
} qt_protobuf_SimpleSFixedInt64Message_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testFieldFixedInt64 */
        20, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testFieldFixedInt64 */
        // Property indices:
        1, /* = testFieldFixedInt64 */
    },
    // char_data
    "testFieldFixedInt64\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleSFixedInt64Message::propertyOrdering = {
    &qt_protobuf_SimpleSFixedInt64Message_metadata.data
};

void SimpleSFixedInt64Message::registerTypes()
{
    qRegisterMetaType<SimpleSFixedInt64Message>();
    qRegisterMetaType<SimpleSFixedInt64MessageRepeated>();
}
SimpleSFixedInt64Message::SimpleSFixedInt64Message(QObject *parent) : QObject(parent)
{
}
SimpleSFixedInt64Message::SimpleSFixedInt64Message(const SimpleSFixedInt64Message &other) : QObject()
{
    setTestFieldFixedInt64(other.m_testFieldFixedInt64);
}
SimpleSFixedInt64Message &SimpleSFixedInt64Message::operator =(const SimpleSFixedInt64Message &other)
{
    setTestFieldFixedInt64(other.m_testFieldFixedInt64);
    return *this;
}
SimpleSFixedInt64Message::SimpleSFixedInt64Message(SimpleSFixedInt64Message &&other) noexcept : QObject()
{
    setTestFieldFixedInt64(std::exchange(other.m_testFieldFixedInt64, 0));
    other.testFieldFixedInt64Changed();
}
SimpleSFixedInt64Message &SimpleSFixedInt64Message::operator =(SimpleSFixedInt64Message &&other) noexcept
{
    setTestFieldFixedInt64(std::exchange(other.m_testFieldFixedInt64, 0));
    other.testFieldFixedInt64Changed();
    return *this;
}
bool SimpleSFixedInt64Message::operator ==(const SimpleSFixedInt64Message &other) const
{
    return m_testFieldFixedInt64 == other.m_testFieldFixedInt64;
}
bool SimpleSFixedInt64Message::operator !=(const SimpleSFixedInt64Message &other) const
{
    return !this->operator ==(other);
}

ComplexMessage::~ComplexMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 7> qt_protobuf_ComplexMessage_uint_data;
    const char qt_protobuf_ComplexMessage_char_data[31];
} qt_protobuf_ComplexMessage_metadata {
    // data
    {
        0, /* = version */
        2, /* = num fields */
        3, /* = field number offset */
        5, /* = property index offset */
    },
    // uint_data
    {
        // JSON name offsets:
        0, /* = testFieldInt */
        13, /* = testComplexField */
        30, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testFieldInt */
        2, /* = testComplexField */
        // Property indices:
        1, /* = testFieldInt */
        2, /* = testComplexField */
    },
    // char_data
    "testFieldInt\0testComplexField\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering ComplexMessage::propertyOrdering = {
    &qt_protobuf_ComplexMessage_metadata.data
};

void ComplexMessage::registerTypes()
{
    qRegisterMetaType<ComplexMessage>();
    qRegisterMetaType<ComplexMessageRepeated>();
}
ComplexMessage::ComplexMessage(QObject *parent) : QObject(parent),
    m_testFieldInt(0),
    m_testComplexField(nullptr)
{
}
ComplexMessage::ComplexMessage(const ComplexMessage &other) : QObject(),
    m_testComplexField(nullptr)
{
    setTestFieldInt(other.m_testFieldInt);
    if (m_testComplexField != other.m_testComplexField) {
        *m_testComplexField = *other.m_testComplexField;
    }
}
ComplexMessage &ComplexMessage::operator =(const ComplexMessage &other)
{
    setTestFieldInt(other.m_testFieldInt);
    if (m_testComplexField != other.m_testComplexField) {
        *m_testComplexField = *other.m_testComplexField;
        testComplexFieldChanged();
    }
    return *this;
}
ComplexMessage::ComplexMessage(ComplexMessage &&other) noexcept : QObject(),
    m_testComplexField(nullptr)
{
    setTestFieldInt(std::exchange(other.m_testFieldInt, 0));
    other.testFieldIntChanged();
    if (m_testComplexField != other.m_testComplexField) {
        *m_testComplexField = std::move(*other.m_testComplexField);
    }
}
ComplexMessage &ComplexMessage::operator =(ComplexMessage &&other) noexcept
{
    setTestFieldInt(std::exchange(other.m_testFieldInt, 0));
    other.testFieldIntChanged();
    if (m_testComplexField != other.m_testComplexField) {
        *m_testComplexField = std::move(*other.m_testComplexField);
        testComplexFieldChanged();
        other.testComplexFieldChanged();
    }
    return *this;
}
bool ComplexMessage::operator ==(const ComplexMessage &other) const
{
    return m_testFieldInt == other.m_testFieldInt
        && (m_testComplexField == other.m_testComplexField
            || *m_testComplexField == *other.m_testComplexField)
;
}
bool ComplexMessage::operator !=(const ComplexMessage &other) const
{
    return !this->operator ==(other);
}

SimpleStringMessage *ComplexMessage::testComplexField_p() const
{
    return m_testComplexField.get();
}

SimpleStringMessage &ComplexMessage::testComplexField() const
{
    return *m_testComplexField;
}

void ComplexMessage::setTestComplexField_p(SimpleStringMessage *testComplexField)
{
    if (m_testComplexField.get() != testComplexField) {
        m_testComplexField.reset(testComplexField);
        testComplexFieldChanged();
    }
}

void ComplexMessage::setTestComplexField(const SimpleStringMessage &testComplexField)
{
    if (*m_testComplexField != testComplexField) {
        *m_testComplexField = testComplexField;
        testComplexFieldChanged();
    }
}

} // namespace qtprotobufnamespace::tests

#include "moc_basicmessages.qpb.cpp"
