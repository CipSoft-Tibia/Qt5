/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#ifndef QPROTOBUF_ENUMMESSAGES_H
#define QPROTOBUF_ENUMMESSAGES_H

#include <QtProtobuf/qprotobufmessage.h>
#include <QtProtobuf/qprotobufobject.h>
#include <QtProtobuf/qprotobuflazymessagepointer.h>

#include <QtQml/qqmlregistration.h>
#include <QtQml/qqmllist.h>

#include <QtCore/qbytearray.h>
#include <QtCore/qstring.h>

#include <QtCore/qmetatype.h>
#include <QtCore/qlist.h>
#include <QtCore/qshareddata.h>

#include <memory>

#if defined(QT_SHARED) || !defined(QT_STATIC)
#  if defined(QT_BUILD_TST_QTPROTOBUFGEN_QML_GEN_LIB)
#    define QPB_TST_QTPROTOBUFGEN_QML_GEN_EXPORT Q_DECL_EXPORT
#  else
#    define QPB_TST_QTPROTOBUFGEN_QML_GEN_EXPORT Q_DECL_IMPORT
#  endif
#else
#  define QPB_TST_QTPROTOBUFGEN_QML_GEN_EXPORT
#endif

namespace qtprotobufnamespace::tests {

namespace TestEnumGadget {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_QML_GEN_EXPORT)
QPB_TST_QTPROTOBUFGEN_QML_GEN_EXPORT void registerTypes();
enum TestEnum {
    TEST_ENUM_VALUE0 = 0,
    TEST_ENUM_VALUE1 = 1,
    TEST_ENUM_VALUE2 = 2,
    TEST_ENUM_VALUE3 = 4,
    TEST_ENUM_VALUE4 = 3,
};
Q_ENUM_NS(TestEnum)
using TestEnumRepeated = QList<TestEnum>;
};

namespace TestEnumSecondInFileGadget {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_QML_GEN_EXPORT)
QPB_TST_QTPROTOBUFGEN_QML_GEN_EXPORT void registerTypes();
enum TestEnumSecondInFile {
    TEST_ENUM_SIF_VALUE0 = 0,
    TEST_ENUM_SIF_VALUE1 = 1,
    TEST_ENUM_SIF_VALUE2 = 2,
};
Q_ENUM_NS(TestEnumSecondInFile)
using TestEnumSecondInFileRepeated = QList<TestEnumSecondInFile>;
};
class SimpleEnumMessage;
using SimpleEnumMessageRepeated = QList<SimpleEnumMessage>;
class RepeatedEnumMessage;
using RepeatedEnumMessageRepeated = QList<RepeatedEnumMessage>;
class MixedEnumUsageMessage;
using MixedEnumUsageMessageRepeated = QList<MixedEnumUsageMessage>;
namespace MixedEnumUsageMessage_QtProtobufNested {
class NestedEnumHolder;
using NestedEnumHolderRepeated = QList<NestedEnumHolder>;
class NestedEnumHolderLevel1;
using NestedEnumHolderLevel1Repeated = QList<NestedEnumHolderLevel1>;
namespace NestedEnumHolderLevel1_QtProtobufNested {
class NestedEnumHolderLevel2;
using NestedEnumHolderLevel2Repeated = QList<NestedEnumHolderLevel2>;
} // namespace NestedEnumHolderLevel1_QtProtobufNested
class NestedEnumMessage;
using NestedEnumMessageRepeated = QList<NestedEnumMessage>;
} // namespace MixedEnumUsageMessage_QtProtobufNested
class SimpleFileEnumMessage;
using SimpleFileEnumMessageRepeated = QList<SimpleFileEnumMessage>;
class StepChildEnumMessage;
using StepChildEnumMessageRepeated = QList<StepChildEnumMessage>;

class SimpleEnumMessage_QtProtobufData;
class QPB_TST_QTPROTOBUFGEN_QML_GEN_EXPORT SimpleEnumMessage : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(SimpleEnumMessage)
    QML_VALUE_TYPE(simpleEnumMessage)
    Q_PROPERTY(LocalEnum localEnum READ localEnum WRITE setLocalEnum SCRIPTABLE true)

public:
    enum QtProtobufFieldEnum {
        LocalEnumProtoFieldNumber = 1,
    };
    Q_ENUM(QtProtobufFieldEnum)

    enum LocalEnum {
        LOCAL_ENUM_VALUE0 = 0,
        LOCAL_ENUM_VALUE1 = 1,
        LOCAL_ENUM_VALUE2 = 2,
        LOCAL_ENUM_VALUE3 = 3,
    };
    Q_ENUM(LocalEnum)
    using LocalEnumRepeated = QList<LocalEnum>;
    SimpleEnumMessage();
    ~SimpleEnumMessage();
    SimpleEnumMessage(const SimpleEnumMessage &other);
    SimpleEnumMessage &operator =(const SimpleEnumMessage &other);
    SimpleEnumMessage(SimpleEnumMessage &&other) noexcept;
    SimpleEnumMessage &operator =(SimpleEnumMessage &&other) noexcept;
    bool operator ==(const SimpleEnumMessage &other) const;
    bool operator !=(const SimpleEnumMessage &other) const;

    SimpleEnumMessage::LocalEnum localEnum() const;
    void setLocalEnum(const SimpleEnumMessage::LocalEnum &localEnum);
    static void registerTypes();

private:
    QExplicitlySharedDataPointer<SimpleEnumMessage_QtProtobufData> dptr;
};

class RepeatedEnumMessage_QtProtobufData;
class QPB_TST_QTPROTOBUFGEN_QML_GEN_EXPORT RepeatedEnumMessage : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(RepeatedEnumMessage)
    QML_VALUE_TYPE(repeatedEnumMessage)
    Q_PROPERTY(qtprotobufnamespace::tests::RepeatedEnumMessage::LocalEnumRepeated localEnumList READ localEnumList WRITE setLocalEnumList SCRIPTABLE true)

public:
    enum QtProtobufFieldEnum {
        LocalEnumListProtoFieldNumber = 1,
    };
    Q_ENUM(QtProtobufFieldEnum)

    enum LocalEnum {
        LOCAL_ENUM_VALUE0 = 0,
        LOCAL_ENUM_VALUE1 = 1,
        LOCAL_ENUM_VALUE2 = 2,
        LOCAL_ENUM_VALUE3 = 3,
    };
    Q_ENUM(LocalEnum)
    using LocalEnumRepeated = QList<LocalEnum>;
    RepeatedEnumMessage();
    ~RepeatedEnumMessage();
    RepeatedEnumMessage(const RepeatedEnumMessage &other);
    RepeatedEnumMessage &operator =(const RepeatedEnumMessage &other);
    RepeatedEnumMessage(RepeatedEnumMessage &&other) noexcept;
    RepeatedEnumMessage &operator =(RepeatedEnumMessage &&other) noexcept;
    bool operator ==(const RepeatedEnumMessage &other) const;
    bool operator !=(const RepeatedEnumMessage &other) const;

    RepeatedEnumMessage::LocalEnumRepeated localEnumList() const;
    RepeatedEnumMessage::LocalEnumRepeated &localEnumList();
    void setLocalEnumList(const RepeatedEnumMessage::LocalEnumRepeated &localEnumList);
    static void registerTypes();

private:
    QExplicitlySharedDataPointer<RepeatedEnumMessage_QtProtobufData> dptr;
};

class MixedEnumUsageMessage_QtProtobufData;
class QPB_TST_QTPROTOBUFGEN_QML_GEN_EXPORT MixedEnumUsageMessage : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(MixedEnumUsageMessage)
    QML_VALUE_TYPE(mixedEnumUsageMessage)
    Q_PROPERTY(LocalEnum localEnum READ localEnum WRITE setLocalEnum SCRIPTABLE true)
    Q_PROPERTY(qtprotobufnamespace::tests::MixedEnumUsageMessage::LocalEnumRepeated localEnumList READ localEnumList WRITE setLocalEnumList SCRIPTABLE true)
    Q_PROPERTY(qtprotobufnamespace::tests::MixedEnumUsageMessage::LocalEnumMapEntry localEnumMap READ localEnumMap WRITE setLocalEnumMap SCRIPTABLE true)
    Q_PROPERTY(qtprotobufnamespace::tests::MixedEnumUsageMessage::NestedEnumMessageRepeated msgListData READ msgList WRITE setMsgList SCRIPTABLE true)

public:
    enum QtProtobufFieldEnum {
        LocalEnumProtoFieldNumber = 1,
        LocalEnumListProtoFieldNumber = 2,
        LocalEnumMapProtoFieldNumber = 3,
        MsgListProtoFieldNumber = 4,
    };
    Q_ENUM(QtProtobufFieldEnum)

    enum LocalEnum {
        LOCAL_ENUM_VALUE0 = 0,
        LOCAL_ENUM_VALUE1 = 1,
        LOCAL_ENUM_VALUE2 = 2,
        LOCAL_ENUM_VALUE3 = 3,
    };
    Q_ENUM(LocalEnum)
    using LocalEnumRepeated = QList<LocalEnum>;
    using NestedEnumHolder = MixedEnumUsageMessage_QtProtobufNested::NestedEnumHolder;
    using NestedEnumHolderRepeated = MixedEnumUsageMessage_QtProtobufNested::NestedEnumHolderRepeated;
    using NestedEnumHolderLevel1 = MixedEnumUsageMessage_QtProtobufNested::NestedEnumHolderLevel1;
    using NestedEnumHolderLevel1Repeated = MixedEnumUsageMessage_QtProtobufNested::NestedEnumHolderLevel1Repeated;
    using NestedEnumMessage = MixedEnumUsageMessage_QtProtobufNested::NestedEnumMessage;
    using NestedEnumMessageRepeated = MixedEnumUsageMessage_QtProtobufNested::NestedEnumMessageRepeated;
    using LocalEnumMapEntry = QHash<QString, MixedEnumUsageMessage::LocalEnum>;
    MixedEnumUsageMessage();
    ~MixedEnumUsageMessage();
    MixedEnumUsageMessage(const MixedEnumUsageMessage &other);
    MixedEnumUsageMessage &operator =(const MixedEnumUsageMessage &other);
    MixedEnumUsageMessage(MixedEnumUsageMessage &&other) noexcept;
    MixedEnumUsageMessage &operator =(MixedEnumUsageMessage &&other) noexcept;
    bool operator ==(const MixedEnumUsageMessage &other) const;
    bool operator !=(const MixedEnumUsageMessage &other) const;

    MixedEnumUsageMessage::LocalEnum localEnum() const;

    MixedEnumUsageMessage::LocalEnumRepeated localEnumList() const;
    MixedEnumUsageMessage::LocalEnumRepeated &localEnumList();

    MixedEnumUsageMessage::LocalEnumMapEntry localEnumMap() const;
    MixedEnumUsageMessage::LocalEnumMapEntry &localEnumMap();

    MixedEnumUsageMessage_QtProtobufNested::NestedEnumMessageRepeated msgList() const;
    MixedEnumUsageMessage_QtProtobufNested::NestedEnumMessageRepeated &msgList();
    void setLocalEnum(const MixedEnumUsageMessage::LocalEnum &localEnum);
    void setLocalEnumList(const MixedEnumUsageMessage::LocalEnumRepeated &localEnumList);
    void setLocalEnumMap(const MixedEnumUsageMessage::LocalEnumMapEntry &localEnumMap);
    void setMsgList(const MixedEnumUsageMessage_QtProtobufNested::NestedEnumMessageRepeated &msgList);
    static void registerTypes();

private:
    QExplicitlySharedDataPointer<MixedEnumUsageMessage_QtProtobufData> dptr;
};
namespace MixedEnumUsageMessage_QtProtobufNested {

class NestedEnumHolder_QtProtobufData;
class QPB_TST_QTPROTOBUFGEN_QML_GEN_EXPORT NestedEnumHolder : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(NestedEnumHolder)
    QML_VALUE_TYPE(nestedEnumHolder)

public:
    enum LocalEnum {
        NESTED_LOCAL_ENUM_VALUE0 = 0,
        NESTED_LOCAL_ENUM_VALUE1 = 1,
        NESTED_LOCAL_ENUM_VALUE2 = 2,
        NESTED_LOCAL_ENUM_VALUE3 = 3,
    };
    Q_ENUM(LocalEnum)
    using LocalEnumRepeated = QList<LocalEnum>;
    NestedEnumHolder();
    ~NestedEnumHolder();
    NestedEnumHolder(const NestedEnumHolder &other);
    NestedEnumHolder &operator =(const NestedEnumHolder &other);
    NestedEnumHolder(NestedEnumHolder &&other) noexcept;
    NestedEnumHolder &operator =(NestedEnumHolder &&other) noexcept;
    bool operator ==(const NestedEnumHolder &other) const;
    bool operator !=(const NestedEnumHolder &other) const;
    static void registerTypes();

private:
    QExplicitlySharedDataPointer<NestedEnumHolder_QtProtobufData> dptr;
};

class NestedEnumHolderLevel1_QtProtobufData;
class QPB_TST_QTPROTOBUFGEN_QML_GEN_EXPORT NestedEnumHolderLevel1 : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(NestedEnumHolderLevel1)
    QML_VALUE_TYPE(nestedEnumHolderLevel1)

public:
    enum LocalEnum {
        NESTED_LEVEL1_LOCAL_ENUM_VALUE0 = 0,
        NESTED_LEVEL1_LOCAL_ENUM_VALUE1 = 1,
    };
    Q_ENUM(LocalEnum)
    using LocalEnumRepeated = QList<LocalEnum>;
    using NestedEnumHolderLevel2 = NestedEnumHolderLevel1_QtProtobufNested::NestedEnumHolderLevel2;
    using NestedEnumHolderLevel2Repeated = NestedEnumHolderLevel1_QtProtobufNested::NestedEnumHolderLevel2Repeated;
    NestedEnumHolderLevel1();
    ~NestedEnumHolderLevel1();
    NestedEnumHolderLevel1(const NestedEnumHolderLevel1 &other);
    NestedEnumHolderLevel1 &operator =(const NestedEnumHolderLevel1 &other);
    NestedEnumHolderLevel1(NestedEnumHolderLevel1 &&other) noexcept;
    NestedEnumHolderLevel1 &operator =(NestedEnumHolderLevel1 &&other) noexcept;
    bool operator ==(const NestedEnumHolderLevel1 &other) const;
    bool operator !=(const NestedEnumHolderLevel1 &other) const;
    static void registerTypes();

private:
    QExplicitlySharedDataPointer<NestedEnumHolderLevel1_QtProtobufData> dptr;
};
namespace NestedEnumHolderLevel1_QtProtobufNested {

class NestedEnumHolderLevel2_QtProtobufData;
class QPB_TST_QTPROTOBUFGEN_QML_GEN_EXPORT NestedEnumHolderLevel2 : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(NestedEnumHolderLevel2)
    QML_VALUE_TYPE(nestedEnumHolderLevel2)

public:
    enum LocalEnum {
        NESTED_LEVEL2_LOCAL_ENUM_VALUE0 = 0,
        NESTED_LEVEL2_LOCAL_ENUM_VALUE1 = 1,
    };
    Q_ENUM(LocalEnum)
    using LocalEnumRepeated = QList<LocalEnum>;
    NestedEnumHolderLevel2();
    ~NestedEnumHolderLevel2();
    NestedEnumHolderLevel2(const NestedEnumHolderLevel2 &other);
    NestedEnumHolderLevel2 &operator =(const NestedEnumHolderLevel2 &other);
    NestedEnumHolderLevel2(NestedEnumHolderLevel2 &&other) noexcept;
    NestedEnumHolderLevel2 &operator =(NestedEnumHolderLevel2 &&other) noexcept;
    bool operator ==(const NestedEnumHolderLevel2 &other) const;
    bool operator !=(const NestedEnumHolderLevel2 &other) const;
    static void registerTypes();

private:
    QExplicitlySharedDataPointer<NestedEnumHolderLevel2_QtProtobufData> dptr;
};
} // namespace NestedEnumHolderLevel1_QtProtobufNested

class NestedEnumMessage_QtProtobufData;
class QPB_TST_QTPROTOBUFGEN_QML_GEN_EXPORT NestedEnumMessage : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(NestedEnumMessage)
    QML_VALUE_TYPE(nestedEnumMessage)
    Q_PROPERTY(qtprotobufnamespace::tests::MixedEnumUsageMessage::LocalEnum localEnumField READ localEnumField WRITE setLocalEnumField SCRIPTABLE true)
    Q_PROPERTY(qtprotobufnamespace::tests::RepeatedEnumMessage::LocalEnum localEnumField2 READ localEnumField2 WRITE setLocalEnumField2 SCRIPTABLE true)
    Q_PROPERTY(qtprotobufnamespace::tests::MixedEnumUsageMessage::NestedEnumHolder::LocalEnum localEnumField3 READ localEnumField3 WRITE setLocalEnumField3 SCRIPTABLE true)
    Q_PROPERTY(qtprotobufnamespace::tests::MixedEnumUsageMessage::NestedEnumHolderLevel1::LocalEnum localEnumField4 READ localEnumField4 WRITE setLocalEnumField4 SCRIPTABLE true)
    Q_PROPERTY(qtprotobufnamespace::tests::MixedEnumUsageMessage::NestedEnumHolderLevel1::NestedEnumHolderLevel2::LocalEnum localEnumField5 READ localEnumField5 WRITE setLocalEnumField5 SCRIPTABLE true)

public:
    enum QtProtobufFieldEnum {
        LocalEnumFieldProtoFieldNumber = 1,
        LocalEnumField2ProtoFieldNumber = 2,
        LocalEnumField3ProtoFieldNumber = 3,
        LocalEnumField4ProtoFieldNumber = 4,
        LocalEnumField5ProtoFieldNumber = 5,
    };
    Q_ENUM(QtProtobufFieldEnum)

    NestedEnumMessage();
    ~NestedEnumMessage();
    NestedEnumMessage(const NestedEnumMessage &other);
    NestedEnumMessage &operator =(const NestedEnumMessage &other);
    NestedEnumMessage(NestedEnumMessage &&other) noexcept;
    NestedEnumMessage &operator =(NestedEnumMessage &&other) noexcept;
    bool operator ==(const NestedEnumMessage &other) const;
    bool operator !=(const NestedEnumMessage &other) const;

    MixedEnumUsageMessage::LocalEnum localEnumField() const;

    RepeatedEnumMessage::LocalEnum localEnumField2() const;

    MixedEnumUsageMessage_QtProtobufNested::NestedEnumHolder::LocalEnum localEnumField3() const;

    MixedEnumUsageMessage_QtProtobufNested::NestedEnumHolderLevel1::LocalEnum localEnumField4() const;

    MixedEnumUsageMessage_QtProtobufNested::NestedEnumHolderLevel1_QtProtobufNested::NestedEnumHolderLevel2::LocalEnum localEnumField5() const;
    void setLocalEnumField(const MixedEnumUsageMessage::LocalEnum &localEnumField);
    void setLocalEnumField2(const RepeatedEnumMessage::LocalEnum &localEnumField2);
    void setLocalEnumField3(const MixedEnumUsageMessage_QtProtobufNested::NestedEnumHolder::LocalEnum &localEnumField3);
    void setLocalEnumField4(const MixedEnumUsageMessage_QtProtobufNested::NestedEnumHolderLevel1::LocalEnum &localEnumField4);
    void setLocalEnumField5(const MixedEnumUsageMessage_QtProtobufNested::NestedEnumHolderLevel1_QtProtobufNested::NestedEnumHolderLevel2::LocalEnum &localEnumField5);
    static void registerTypes();

private:
    QExplicitlySharedDataPointer<NestedEnumMessage_QtProtobufData> dptr;
};
} // namespace MixedEnumUsageMessage_QtProtobufNested

class SimpleFileEnumMessage_QtProtobufData;
class QPB_TST_QTPROTOBUFGEN_QML_GEN_EXPORT SimpleFileEnumMessage : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(SimpleFileEnumMessage)
    QML_VALUE_TYPE(simpleFileEnumMessage)
    Q_PROPERTY(qtprotobufnamespace::tests::TestEnumGadget::TestEnum globalEnum READ globalEnum WRITE setGlobalEnum SCRIPTABLE true)
    Q_PROPERTY(qtprotobufnamespace::tests::TestEnumGadget::TestEnumRepeated globalEnumList READ globalEnumList WRITE setGlobalEnumList SCRIPTABLE true)

public:
    enum QtProtobufFieldEnum {
        GlobalEnumProtoFieldNumber = 1,
        GlobalEnumListProtoFieldNumber = 2,
    };
    Q_ENUM(QtProtobufFieldEnum)

    SimpleFileEnumMessage();
    ~SimpleFileEnumMessage();
    SimpleFileEnumMessage(const SimpleFileEnumMessage &other);
    SimpleFileEnumMessage &operator =(const SimpleFileEnumMessage &other);
    SimpleFileEnumMessage(SimpleFileEnumMessage &&other) noexcept;
    SimpleFileEnumMessage &operator =(SimpleFileEnumMessage &&other) noexcept;
    bool operator ==(const SimpleFileEnumMessage &other) const;
    bool operator !=(const SimpleFileEnumMessage &other) const;

    TestEnumGadget::TestEnum globalEnum() const;

    TestEnumGadget::TestEnumRepeated globalEnumList() const;
    TestEnumGadget::TestEnumRepeated &globalEnumList();
    void setGlobalEnum(const TestEnumGadget::TestEnum &globalEnum);
    void setGlobalEnumList(const TestEnumGadget::TestEnumRepeated &globalEnumList);
    static void registerTypes();

private:
    QExplicitlySharedDataPointer<SimpleFileEnumMessage_QtProtobufData> dptr;
};

class StepChildEnumMessage_QtProtobufData;
class QPB_TST_QTPROTOBUFGEN_QML_GEN_EXPORT StepChildEnumMessage : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(StepChildEnumMessage)
    QML_VALUE_TYPE(stepChildEnumMessage)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleEnumMessage::LocalEnum localStepChildEnum READ localStepChildEnum WRITE setLocalStepChildEnum SCRIPTABLE true)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleEnumMessage::LocalEnumRepeated localStepChildList READ localStepChildList WRITE setLocalStepChildList SCRIPTABLE true)

public:
    enum QtProtobufFieldEnum {
        LocalStepChildEnumProtoFieldNumber = 1,
        LocalStepChildListProtoFieldNumber = 2,
    };
    Q_ENUM(QtProtobufFieldEnum)

    StepChildEnumMessage();
    ~StepChildEnumMessage();
    StepChildEnumMessage(const StepChildEnumMessage &other);
    StepChildEnumMessage &operator =(const StepChildEnumMessage &other);
    StepChildEnumMessage(StepChildEnumMessage &&other) noexcept;
    StepChildEnumMessage &operator =(StepChildEnumMessage &&other) noexcept;
    bool operator ==(const StepChildEnumMessage &other) const;
    bool operator !=(const StepChildEnumMessage &other) const;

    SimpleEnumMessage::LocalEnum localStepChildEnum() const;

    SimpleEnumMessage::LocalEnumRepeated localStepChildList() const;
    SimpleEnumMessage::LocalEnumRepeated &localStepChildList();
    void setLocalStepChildEnum(const SimpleEnumMessage::LocalEnum &localStepChildEnum);
    void setLocalStepChildList(const SimpleEnumMessage::LocalEnumRepeated &localStepChildList);
    static void registerTypes();

private:
    QExplicitlySharedDataPointer<StepChildEnumMessage_QtProtobufData> dptr;
};
} // namespace qtprotobufnamespace::tests

Q_DECLARE_METATYPE(qtprotobufnamespace::tests::SimpleEnumMessage)
Q_DECLARE_METATYPE(qtprotobufnamespace::tests::RepeatedEnumMessage)
Q_DECLARE_METATYPE(qtprotobufnamespace::tests::MixedEnumUsageMessage)
Q_DECLARE_METATYPE(qtprotobufnamespace::tests::MixedEnumUsageMessage::NestedEnumHolder)
Q_DECLARE_METATYPE(qtprotobufnamespace::tests::MixedEnumUsageMessage::NestedEnumHolderLevel1)
Q_DECLARE_METATYPE(qtprotobufnamespace::tests::MixedEnumUsageMessage::NestedEnumHolderLevel1::NestedEnumHolderLevel2)
Q_DECLARE_METATYPE(qtprotobufnamespace::tests::MixedEnumUsageMessage::NestedEnumMessage)
Q_DECLARE_METATYPE(qtprotobufnamespace::tests::SimpleFileEnumMessage)
Q_DECLARE_METATYPE(qtprotobufnamespace::tests::StepChildEnumMessage)
#endif // QPROTOBUF_ENUMMESSAGES_H
