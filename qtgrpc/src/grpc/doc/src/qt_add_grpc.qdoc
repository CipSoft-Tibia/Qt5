// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
\page qt_add_grpc.html
\ingroup cmake-commands-qtgrpc

\title qt_add_grpc
\target qt_add_grpc
\summary {Generates Qt-based C++ services using a protobuf schema}
\preliminarycmakecommand
\cmakecommandsince 6.5

Usually \c qtgrpcgen is invoked through the \c qt_add_grpc CMake macro.

\badcode
    qt_add_grpc(<target> <TARGET_TYPE>
        PROTO_FILES <file> ...
        [COPY_COMMENTS]
        [GENERATE_PACKAGE_SUBFOLDERS]
        [QML]
        [EXTRA_NAMESPACE <namespace>]
        [EXPORT_MACRO <infix>]
        [PROTO_INCLUDES <path> ...]
        [OUTPUT_DIRECTORY <dir>]
        [OUTPUT_HEADERS <var>]
        [OUTPUT_TARGETS <var>]
    )
\endcode

The source files are created by \c qtgrpcgen and added to the target.
If the target already exists, the files are \e added to the target source
list. If the target doesn't exist, it is created as a library which you must
link to.

The gRPC library that is generated using the \c qt_add_grpc command refers to
the protobuf symbols that are used in service calls. This means you either need
to use a common target in both \l qt_add_protobuf and \l qt_add_grpc calls or
link the generated protobuf library to the gRPC one.

Considering the above statement you may reuse the target for both protobuf and
gRPC client code:
\badcode
    # Generate the protobuf types first
    qt_add_protobuf(test_service_client
        PROTO_FILES
            test_service.protobuf
    )
    ...
    # Reuse the protobuf target and extend it with gRPC client
    # functionality
    qt_add_grpc(test_service_client CLIENT
        PROTO_FILES
            test_service.protobuf
    )
\endcode

If you want to have separate targets then you need to link the gRPC client
target to the protobuf one:
\badcode
    # Generate the protobuf types first
    qt_add_protobuf(test_service_protobuf
        PROTO_FILES
            test_service.protobuf
    )
    ...
    # Add separate target with the generated code of the gRPC client.
    qt_add_grpc(test_service_client CLIENT
        PROTO_FILES
            test_service.protobuf
    )
    target_link_libraries(test_service_client PRIVATE test_service_protobuf)
\endcode

\section1 Arguments
\list
    \li \c TARGET_TYPE is the type of gRPC code to be generated.
        Since gRPC supports a client-server architecture, \c CLIENT or
        \c SERVER source code may be generated.
        \note for Qt 6.5 only \c CLIENT source code generation is supported.
    \include qtgrpcgen-options.qdocinc 0
    \include qtprotoccommon-options.qdocinc 0
    \include qtprotogen-cmake-options.qdocinc 0
\endlist

\sa{The qtgrpcgen Tool}
*/
