/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example sensorgestures
    \title Qt Sensors - C++ Sensor Gestures Example
    \ingroup qtsensors-examples
    \brief The sensor gesture example demonstrates the steps for creating a C++ application
     that uses sensor gestures and the included shake sensor.
    \image sensorgesturecpp.png

    QSensorGestures class defines one predefined signal, \c { void detected(const QString &) }

    As well, Sensor Gesture Recognizers may implement any number of their own custom signals.

    Our shake recognizer defines one custom signal, \c {void shake()}, as well as the predefined
    detected signal.

    \section1 SensorGestures Class Implementation

    In order to know about custom signals that may be available, we need to ask the QSensorGestureManager about them,

    Using the QSensorGesture::gestureIds() function, the manager will return a QStringList of known and valid gesture Ids.
    \snippet sensorgestures/mainwindow.cpp 0

    We can then use this to create a QSensorGesture object that we can use to connect signals to,
    and start the detection process. A QSensorGesture object will take a list of one or more
    recognizer ids in it's constructor.

    \snippet sensorgestures/mainwindow.cpp 1

    and later stop the detection process.

    \snippet sensorgestures/mainwindow.cpp 2

    The QSensorGesture object will contain all the signals of the valid  requested recognizers found on the system.

    You can discover which of the requested recognizer ID's that were not found by using QSensorGesture::invalidIds();

    By using QSensorGesture::gestureSignals(), you can get a QStringList of usable signals.


*/
